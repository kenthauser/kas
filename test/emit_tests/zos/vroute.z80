/*
 * Copyright (c) 1992 Twenty-First Designs, Inc.
 * Unpublished work. All rights reserved.  
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF 
 * TWENTY-FIRST DESIGNS, INC.
 *
 * This software source code contains trade secrets and other
 * proprietary information of Twenty-First Designs, Inc. All
 * disclosure or use of this source code is strictly restricted
 * by contract to that required for operation and maintenance 
 * of equipment provided by Twenty-First Designs, Inc.
 * All other disclosure or use of this source code is prohibited.
 *
 ***********************************************************
 *
 * $Id: vroute.z80,v 1.1.1.1 2000/10/18 04:29:56 kent Exp $
 *
 ***********************************************************
 *
 * vroute.z80
 *
 *	vroute:     create and install vectored interrupt handler which
 *		    saves registers & loads IY. 
 *	   called:  IY = interrupt IY
 *		    HL = routine address
 *		    DE = interrupt number (see interrupt.h)
 *	   returns: HL = `routine' address suitable for installation
 *	                 in system interrupt table. `routine'
 *			 is also installed.
 *
 *	alloc_tramp: create and install function trampoline
 *	   called:  IY = routine IY
 *	   	    HL = routine address
 *	   returns: HL = address of function which saves IY
 *		    	 and branchs to routine address
 *
 ***********************************************************
 */

 
	.globl vroute, alloc_tramp

vr_proto_len = vr_common - vr_proto

vroute:
	push	bc			; save scratch register
	push	de			; save vector number
	push	hl			; save routine address
	ld	hl,#vr_proto_len	; allocate memory
	call	sbrk
	push	hl			; dup the base address
	ld	de,#vr_proto		; vector prototype 
	ld	bc,#vr_proto_len	; bytes
	ex	de,hl			; get registers right...
	ldir				; ...and copy
	ld	hl,#-8			; sizeof JMP + LD HL,### + ###
	add	hl,de			; dest pointer to HL
	pop	de			; base to DE 
	push	iy			; get workspace pointer
	pop	bc			; workspace address to BC
	ld	(hl),c			; update address
	inc	hl
	ld	(hl),b
	inc	hl
	inc	hl			; skip LD HL insn
	pop	bc			; get routine address
	ld	(hl),c			; update address
	inc	hl
	ld	(hl),b
	ex	de,hl			; base to HL
	pop	de			; restore vector number
	pop	bc			; restore scratch register
	jp	set_intv		; exit thru routine (preseves HL)

vr_proto:
	ei				; run with ints enabled
	push	iy
	push	hl
	ld	iy,#0			; routine workspace
	ld	hl,#0			; routine address
	jp	vr_common		; common routine

; here to process the interrupt
; interrupts enabled, HL = routine, IY = data area
vr_common:
	push	af
	push	bc
	push	de
	push	ix
	call	chl
	pop	ix
	pop	de
	pop	bc
	pop	af
	pop	hl
	pop	iy	
	reti

tr_proto_len = tr_proto_end - tr_proto

alloc_tramp:
	push	bc			; save scratch register
	push	hl			; save routine address
	ld	hl,#tr_proto_len	; allocate memory
	call	sbrk
	push	hl			; dup the base address
	ld	de,#tr_proto		; trampoline prototype 
	ld	bc,#tr_proto_len	; bytes
	ex	de,hl			; get registers right...
	ldir				; ...and copy
	ld	hl,#-5			; sizeof JMP ### + ###
	add	hl,de			; dest pointer to HL
	pop	de			; base to DE 
	push	iy			; get workspace pointer
	pop	bc			; workspace address to BC
	ld	(hl),c			; update address
	inc	hl
	ld	(hl),b
	inc	hl
	inc	hl			; skip LD HL insn
	pop	bc			; get routine address
	ld	(hl),c			; update address
	inc	hl
	ld	(hl),b
	ex	de,hl			; base to HL
	pop	bc			; restore scratch register
	ret				; return routine address

tr_proto:
	push	iy
	ld	iy,#0			; routine workspace
	jp	#0			; routine address
tr_proto_end:
