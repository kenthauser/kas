/*
 * Copyright (c) 1992 Twenty-First Designs, Inc.
 * Unpublished work. All rights reserved.  
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF 
 * TWENTY-FIRST DESIGNS, INC.
 *
 * This software source code contains trade secrets and other
 * proprietary information of Twenty-First Designs, Inc. All
 * disclosure or use of this source code is strictly restricted
 * by contract to that required for operation and maintenance 
 * of equipment provided by Twenty-First Designs, Inc.
 * All other disclosure or use of this source code is prohibited.
 *
 ***********************************************************
 *
 * $Id: console_io.z80,v 1.1.1.1 2000/10/18 04:29:57 kent Exp $
 *
 ***********************************************************
 *
 * These routines make up a console async I/O. The interface
 * allows for buffered character transmission, character echo,
 * and line input.
 *
 * These routines are designed to function with multiple SIO
 * channels (ie they are re-entrant).
 *
 * The following "print" routines are available.
 * The 8-bit arguments are passed in `A'. The 16-bit
 * are passed in `HL'. For all routines, IY must hold the
 * "cons_io" address for the channel.
 *
 * print_hl (char *)	transmits character string at HL

 * putchar (char)	transmits character
 * put1hex (char)	transmits character as 1 hex character
 * put2hex (char)	transmits character as 2 hex characters
 * put3hex (u_short)	transmits argument as 3 hex characters
 * put4hex (u_short)	transmits argument as 4 hex characters
 * putdec  (u_char)	transmits argument as 3 decimal characters
 *
 * Also included are the initialization and control routines:
 *
 * console_io_init:
 *	C = SIO_CTRL_DATA (ctrl port assumed 1 more)
 *	A = transmit interrupt vector # (see interrupt.h)
 *     HL = FN to call with buffered message.
 *
 * Returns:
 *     HL = console I/O area ("cons_io" used for print fns)
 *
 * console_config:
 *	A = control word
 *     IY = console I/O area
 *
 * The control word controls echo & prompting. The following
 * bits are defined:
 *	bit 0: 0 = enable/1 = disable echo
 *	bit 1: 0 = enable/1 = disable prompting
 *
 *
 * The console semantics are as follows:
 *
 *	The "console_io_init" HL function is called as soon
 *	as a newline terminated input line is rx'd.
 *
 *	The console input routine understands standard
 *	unix command line editing characters, such as
 *	^X, ^C, ^U, ^H, DEL, etc. Command lines end with a 
 *	newline or carriage return (which both echo as CR LF).
 *
 *	If the `FN' returns an HL != 0, then the specified
 *	HL is called as soon as the console transmit buffer
 *	is empty. If the `FN' returns HL == 0, then the 
 *	console goes back to scanning for input lines.
 *
 *	If the console_io routine receives a character
 *	while waiting for a "returned fn" to complete,
 *	the console_io routine prints "#\n" & goes back to 
 *	scan mode.
 *
 *	For other insights, as Obe Wan says:
 *		"Use the source, Luke"
 *
 ***********************************************************
 */


; delcare local memory (IY area)

BIDIN		= 0	; buffer to send
EOB  		= 1	; no returned buffers
RX_ROUTE	= 2	; received character route
SIO_CTRL	= 3	; SIO control address
SIO_DATA	= 4	; SIO data address
TX_QUEUE	= 5	; transmit buffer pointer
TX_FLAG		= 7	; tranmitter busy flag
RX_FN		= 8	; function to execute with received buffer
RX_BUFFER	= 10	; base of receive buffer
RX_BPTR		= 12	; current buffer pointer
RX_NEXT_MSG	= 14	; function to execute when transmitter drains
RX_CANCEL_FN	= 16	; function to execute on received character
RX_CANCEL_FLAG	= 18	; cancel function is pending	
RX_FLUSH	= 19	; flushing received data
ECHO_FLAG	= 20	; config flag

IY_LEN		= ECHO_FLAG + 1

	.globl	print, print_hl, putchar, putdec
	.globl	put1hex, put2hex, put3hex, put4hex

get_ix:
; internal print support routine
; save and load IX, and "call" calling routine
	ld	d,(iy+TX_QUEUE+1)	; load BPTR
	ld	e,(iy+TX_QUEUE+0)
	ex	de,hl
	ex	(sp),hl			; bptr to SP, calling routine
					; to HL
	ex	de,hl			; restore HL, routine to DE
	ex	(sp),ix			; bptr to IX
	call	cde			; "call" calling routine
; now check to see if need to start the transmitter
	ld	a,(iy+TX_FLAG)
	or	a
	jr	nz,1$			; already running
	dec	a			; get non-zero
	ld	(iy+TX_FLAG),a		; set the flag first
	call	bpop			; get first character
	cp	#-1			; chaser
	jr	z,2$
	ld	h,c			; save call-saved reg 'C'
	ld	c,(iy+SIO_DATA)		; get port address
	out	(c),l			; bpop copies data to 'L'
	ld	c,h			; restore call-saved register
1$:	pop	ix			; restore general register
	ret				; to initial caller

; pending character is a "chaser".
2$:	pop	ix			; restore register
	xor	a			; flag idle
	ld	(iy+TX_FLAG),a
	dec	a			; get marker
	ld	l,(iy+RX_ROUTE)
	jp	route			; send flag back

; call thru DE
cde:	push	de
	ret

/*
 * print entrypoints
 */

; print character in A
putchar:
	call	get_ix
	cp	#'\n'
	call	z,put_cr
	jp	bput

; print inline string
print:	pop	hl			; get address of data
	push	bc
	call	_print_hl
	ld	l,c			; copy pointer past null to HL
	ld	h,b
	pop	bc			; restore register
	jp	(hl)			; return to caller

; print string in HL, return address past the NULL in HL
; NB this return address is actually used in print help message routines
print_hl:
	push	bc			; free register
	call	_print_hl		; do the printing
	ld	l,c			; copy pointer past null to HL
	ld	h,b
	pop	bc
	ret

; print string in HL, return address past the NULL in BC
_print_hl:
	call	get_ix
	ld	c,l			; move pointer to BC
	ld	b,h
1$:	ld	a,(bc)			; get character
	inc	bc			; next character
	or	a			; check for NULL
	ret	z			; if done
	cp	#'\n'			; newline?
	call	z,put_cr		; if so print CR, and return LF
	call	bput
	jr	1$

put_cr:	ld	a,#'\r'			; prepend newline with CR
	call	bput			; print it
	ld	a,#'\n'			; restore register
	ret

; print as four hex characters data passed in 'HL'
put4hex:
	call	get_ix			; setup IX
	push	hl			; save data
	ld	a,h			; print high byte
	call	1f			; common routine
	pop	hl			; restore low byte
	ld	a,l			; and print it
	jr	1f

; print as three hex characters data passed in 'HL'
put3hex:
	call	get_ix			; setup IX
	push	hl			; save data
	ld	a,h			; print high byte
	call	2f			; common routine
	pop	hl			; restore low byte
	ld	a,l			; and print it
	jr	1f

; print as 1 hex character data passed in 'A'
put1hex:
	call	get_ix			; setup IX
	jr	2f			; common routine

; print as two hex characters data passed in 'A'
put2hex:
	call	get_ix			; setup IX
1:	push	af			; save character
	rrca				; get high nibble
	rrca
	rrca
	rrca
	call	2f			; common routine
	pop	af			; restore low nibble
2:	and	0x0f			; get 4 lsbs
	add	a,#0x90			; convert to hex character
	daa
	adc	a,#0x40
	daa
	jp	bput			; and print

; print as three decimal characters data passsed in A
putdec:
	call	get_ix			; setup IX
	ld	l,a			; to HL
	ld	h,#0			; clear high byte
	ld	de,#-100
	call	1$
	ld	de,#-10
	call	1$
	ld	a,l
	add	a,#'0'
	jp	bput

; divide HL by DE, convert to ASCII and print
1$:	ld	a,#'0' - 1		; create character in A
2$:	inc	a
	add	hl,de			; test for overflow
	jr	c,2$			; branch if not
	sbc	hl,de			; restore extra subtract
	push	hl			; save modulo data
	call	bput			; print
	pop	hl			; restore modulo data
	ret



/*
 * Console IO software initialization.
 * 
 * This entrypoint allocates and initializes the
 * software structures as required. 
 *
 * The `tx', `rx', and `src' interrupt handlers
 * are allocated and attached. The receive character
 * buffer is likewise allocated.
 *
 * The serial port is assumed to be correctly setup before
 * this routine is called. The DTR/RTS pins are not
 * modified. The external/status interrupt is not processed.
 *
 * Called:
 *
 * console_io_init:
 *	C = SIO_CTRL_DATA (ctrl port assumed 1 more)
 *	A = transmit interrupt vector # (see interrupt.h)
 *     HL = FN to call with buffered message.
 *
 * Returns:
 *     HL = console I/O area
 */

	.globl	console_io_init, console_config, PROMPT

console_io_init:
; here to initialize the IY area from arguments
	push	bc			; call saved reg
	push	ix			; call saved reg
	push	iy			; call saved reg
	push	hl			; save fn
	ld	hl,#IY_LEN		; allocate local memory
	call	sbrk			; saves A/B/C
	push	hl			; save base address
	ld	de,#IY_LEN		; now zero new memory
	call	bzero			; saves A/B/C
	pop	iy			; copy to IY (orig already saved)
	ld	(iy+SIO_DATA),c
	inc	c			; XXX ctrl = data + 1
	ld	(iy+SIO_CTRL),c
	pop	hl			; restore rx FN
	ld	(iy+RX_FN+0),l		; save function
	ld	(iy+RX_FN+1),h
	ld	c,a			; save vector #
; receive buffer
	call	blkget			; grab a buffer block
	ld	(iy+RX_BUFFER+0),l	; save buffer pointer
	ld	(iy+RX_BUFFER+1),h
	ld	(iy+RX_BPTR+0),l
	ld	(iy+RX_BPTR+1),h
; transmit queue
	xor	a
	call	bmake			; clobbers IX
	push	ix
	pop	hl
	ld	(iy+TX_QUEUE+0),l	; save transmit pointer
	ld	(iy+TX_QUEUE+1),h
; receive route
	ld	hl,#proc_rx		; character processing
	call	rtable_add		; put in rtable
	ld	(iy+RX_ROUTE),a		; route to here
; here to allocate & attach interrupt handlers
	ld	e,c			; get tx vector #
	ld	d,#0
	ld	hl,#cons_tx
	call	vroute			; allocate & attach tx
	inc	c			; skip ESC
	inc	c
	inc	c			; get rx vector #
	inc	c
	ld	e,c
	ld	d,#0
	ld	hl,#cons_rx
	call	vroute			; attach rx
	inc	c			; get SRC
	inc	c
	ld	e,c
	ld	d,#0
	ld	hl,#cons_src
	call	vroute			; attach src
	ex	(sp),iy			; restore original IY
	pop	hl			; return allocated memory
	pop	ix			; call saved register
	pop	bc			; call saved register
	ret

console_config:
	ld	(iy+ECHO_FLAG),a
	ret

; setup rx cancel function
	.globl	set_rx_cancel
set_rx_cancel:
	di				; avoid contention
	ld	(iy+RX_CANCEL_FN+1),h
	ld	(iy+RX_CANCEL_FN+0),l
	ei
	ld	a,#1
	ld	(iy+RX_CANCEL_FLAG),a
	ret

; here to process received characters
proc_rx:
	ld	a,(iy+RX_NEXT_MSG+1)	; is NEXT_MSG set?
	or	a
	jr	z,0$			; if not
	inc	(iy)			; was next char -1?
	jr	z,1$			; if so
	jr	2$			; cancel printout

; normal character processing
0$:	ld	a,(iy)			; get received character
	or	a
	ret	z
	cp	-1			; chaser
	jr	z,1$
	and	0x7f			; strip parity
	bit	0,(iy+RX_CANCEL_FLAG)
	jr	nz,02$			; execute cancel function
	cp	'X'-'@'			; ctrl-x
	jr	z,2$			; cancel printout
	cp	'C'-'@'			; ctrl-c
	jr	z,2$			; cancel printout
	cp	0x1b			; esc
	jr	z,2$			; cancel printout
	cp	'U'-'@'			; ctrl-u
	jr	z,2$			; cancel printout
	cp	'\b'			; backspace
	jr	z,3$
	cp	0x7f			; delete
	jr	z,3$
	cp	'\n'			; newline
	jr	z,4$
	cp	'\r'			; cr
	jr	z,4$
; not a special character -- block other control characters
	cp	' '
	ret	c			; just eat them
; force uppercase if lower
	cp	'a'
	jr	c,5$
	cp	'z'+1
	jr	nc,5$
	and	~0x20			; force lower case
; put character into buffer if room
5$:	ld	l,(iy+RX_BUFFER)	; get buffer base
	ld	h,(iy+RX_BUFFER+1)
	ld	de,#BLKLEN-1
	add	hl,de			; get end pointer (clr CY)
	ld	e,(iy+RX_BPTR)		; get current pointer
	ld	d,(iy+RX_BPTR+1)
	ld	(de),a			; save character
	sbc	hl,de			; compare ptrs
	jr	z,6$			; if no room
	inc	de			; bump ptr
	ld	(iy+RX_BPTR),e
	ld	(iy+RX_BPTR+1),d
	jr	7$
6$:	ld	a,'\a'			; ring bell -- no room
	ld	(iy+RX_FLUSH),#-1
7$:	bit	0,(iy+ECHO_FLAG)	; echo enabled?
	jp	z,putchar		; return thru routine
	ret

; recd -1 -- chaser
1$:	ld	a,(iy+RX_NEXT_MSG+1)	; next fn MSB
	or	a			; set?
	ret	z			; if not -- return
	ld	h,a
	ld	l,(iy+RX_NEXT_MSG)
	call	chl			; execute next function
	jr	9$

; here to execute cancel function & prompt
02$:	ld	(iy+RX_CANCEL_FLAG),#0
	ld	l,(iy+RX_CANCEL_FN)
	ld	h,(iy+RX_CANCEL_FN+1)
	call	chl
; FALLSTHRU

; recd ctrl-x -- cancel printout
2$:	bit	1,(iy+ECHO_FLAG)	; prompt enabled?
	ret	nz			; if disabled
	call	print			; echo '#'
	.asciz	"#\n"
	ld	hl,#0			; clear RX_NEXT_MSG
	jr	9$			; prompt

; recd backspace -- delete prev char
3$:	ld	l,(iy+RX_BUFFER)
	ld	h,(iy+RX_BUFFER+1)
	ld	e,(iy+RX_BPTR)
	ld	d,(iy+RX_BPTR+1)
	or	a			; clear CY
	sbc	hl,de			; at beginning of buffer?
	ret	z			; just eat if so
	dec	de			; backup
	ld	(iy+RX_BPTR),e
	ld	(iy+RX_BPTR+1),d
	bit	0,(iy+ECHO_FLAG)	; echo enabled?
	ret	nz			; if disabled
	call	print			; delete from console
	.asciz	"\b \b"
	ret

; recd newline -- proc buffer
4$:	ld	a,'\n'			; echo newline
	bit	0,(iy+ECHO_FLAG)	; echo enabled?
	call	z,putchar		; echo newline if so
	ld	l,(iy+RX_BPTR)		; get buffer pointer
	ld	h,(iy+RX_BPTR+1)
	ld	(hl),#0			; null terminate string
	ld	e,(iy+RX_BUFFER)	; get buffer beginning
	ld	d,(iy+RX_BUFFER+1)
	or	a			; clear CY
	sbc	hl,de
	jr	z,9$			; prompt on empty line (HL = 0)
	push	de			; save buffer base
	pop	hl			; buffer base to HL
	ld	e,(iy+RX_FN+0)		; get address of FN
	ld	d,(iy+RX_FN+1)
	call	cde			; and execute
; FALLS THRU

; send prompt or wait for next line
; HL = new RX_NEXT_MSG
9$:	ld	(iy+RX_FLUSH),#0	; allow received characters
	ld	(iy+RX_NEXT_MSG+1),h	; save new value
	ld	(iy+RX_NEXT_MSG),l
	ld	a,h
	or	a			; test for next function zero
	ld	a,#-1			; prepare for chaser
	jr	nz,putchar		; exit thru routine
	ld	l,(iy+RX_BUFFER)
	ld	h,(iy+RX_BUFFER+1)
	ld	(iy+RX_BPTR),l		; rewind buffer
	ld	(iy+RX_BPTR+1),h
	bit	1,(iy+ECHO_FLAG)	; prompt enabled?
	ret	nz			; if disabled
	call	print
PROMPT:
	.asciz	">"			; prompt message
	ret

; declare SIO control words
RESET_TXINTP	= 0x28			; reset transmit interrupt pending
RESET_ERROR	= 0x30			; reset receiver error

cons_tx:
; here on transmit interrupt
	ld	l,(iy+TX_QUEUE+0)
	ld	h,(iy+TX_QUEUE+1)
	push	hl
	pop	ix
0$:	call	bpop
	jr	z,2$			; if buffer empty
	cp	#-1			; flag tx idle
	jr	z,1$			; to send back idle flag
	ld	c,(iy+SIO_DATA)
	out	(c),a
	ret

1$:	call	rx_route
	jr	0$

2$:	ld	a,#RESET_TXINTP
	ld	c,(iy+SIO_CTRL)
	out	(c),a
	xor	a
	ld	(iy+TX_FLAG),a
	ret

cons_src:
; parity, framing, etc error -- send in CANCEL
	ld	a,#RESET_ERROR
	ld	c,(iy+SIO_CTRL)
	out	(c),a
	ld	c,(iy+SIO_DATA)
	in	a,(c)			; flush it
	ld	a,'X'-'@'		; CTRL-X (CAN)
	jr	rx_route

cons_rx:
; received character -- input it and route on
	ld	c,(iy+SIO_DATA)
	in	a,(c)
	and	0x7f			; reset parity bit
; FALLS THRU
rx_route:
	bit	0,(iy+RX_FLUSH)		; trash on line?
	jr	z,1$			; no -- OK
	cp	#'\n'			; allow NL & ctrl-c only
	jr	z,1$
	cp	#'C' - '@'		; allow NL & ctrl-c only
	ret	nz
1$:	ld	l,(iy+RX_ROUTE)
	or	a
	jp	nz,route		; dont queue a zero!
	ret
