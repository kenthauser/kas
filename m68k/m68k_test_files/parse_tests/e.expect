in :  .byte[\t]37, foo, . + 2[\n]
out:  INT<1>	{[EXPR = 25: src = "37"], [EXPR = [foo(index: 1)]: src = "foo"], [EXPR = cx[1](2+ca([dot])): src = ". + 2"]}

in :  .byte[\t]37 + 73, foo,, . + 2[\n]
out:  INT<1>	{[EXPR = 6e: src = "37 + 73"], [EXPR = [foo(index: 1)]: src = "foo"], [MISSING: src = ""], [EXPR = cx[2](2+ca([dot])): src = ". + 2"]}

in :  equ_1[\t]= [\n]
out:  ERROR	[kas::parser::kas_diag: 1 loc: ]

in :  equ_1[\t]= 100[\n]
out:  EQU	[IDENT: src = "equ_1"], [EXPR = 64: src = "100"]

in :  equ_2[\t]= foo + . - 2[\n]
out:  EQU	[IDENT: src = "equ_2"], [EXPR = cx[3](fffffffe+[ident 0:foo]+ca([dot])): src = "foo + . - 2"]

in :  equ_3[\t]= equ_1[\n]
out:  EQU	[IDENT: src = "equ_3"], [EXPR = [equ_1(index: 2)]: src = "equ_1"]

in :  .org[\t]100[\n]
out:  ORG	{[EXPR = 64: src = "100"]}

in :  .org    .[\n]
out:  ORG	{[EXPR = ca([dot]): src = "."]}

in :  .org    . + 10[\n]
out:  ORG	{[EXPR = cx[4](a+ca([dot])): src = ". + 10"]}

in :  .[\t][\t]= 64[\n]
out:  EQU	[IDENT: src = "."], [EXPR = 40: src = "64"]

in :  .[\t][\t]= . + 2[\n]
out:  EQU	[IDENT: src = "."], [EXPR = cx[5](2+ca([dot])): src = ". + 2"]

in :  equ_dot = .[\n]
out:  EQU	[IDENT: src = "equ_dot"], [EXPR = ca([dot]): src = "."]

in :  equ_4[\t]= 99$ + 3[\n]
out:  EQU	[IDENT: src = "equ_4"], [EXPR = cx[6](3+[ident 2:[initial]:99]): src = "99$ + 3"]

in :  equ_5[\t]= 2f - 2[\n]
out:  EQU	[IDENT: src = "equ_5"], [EXPR = cx[7](fffffffe+[ident 3:2:0]): src = "2f - 2"]

in :  2:
out:  LABEL	[sym: 4 loc: 32]

in :  .word[\t]2b, 2f[\n]
out:  INT<2>	{[EXPR = [2:0(index: 4)]: src = "2b"], [EXPR = [2:1(index: 5)]: src = "2f"]}

in :  equ_6[\t]= 3b * 3[\n]
out:  EQU	[IDENT: src = "equ_6"], [EXPR = Error: Invalid expression: src = "3b * 3"]

in :  equ_66[\t]= 8[\n]
out:  EQU	[IDENT: src = "equ_66"], [EXPR = 8: src = "8"]

in :  equ_7[\t]= 4[\n]
out:  EQU	[IDENT: src = "equ_7"], [EXPR = 4: src = "4"]

in :  [\n]junk[\n]
out:  ERROR	[kas::parser::kas_diag: 3 loc: junk
.text]

in :  .text[\t]2[\n]
out:  SEG	{.text}, {[EXPR = 2: src = "2"]}

in :  .text[\t]1, 2[\n]
out:  SEG	{.text}, {[EXPR = 1: src = "1"], [EXPR = 2: src = "2"]}

in :  .text9[\t]2, 4[\n]
out:  ERROR	[kas::parser::kas_diag: 4 loc: .text9]

in :  .text[\n]
out:  SEG	{.text}, {[MISSING: src = ""]}

in :  
out:  EOI	

in :  
out:  EOI	

symbols:
   0: foo                 U : *undef*
   1: equ_1               T : *undef*
   2: [initial]:99        I : *undef*
   3: 2:0                 I : *undef*
   4: 2:1                 I : *undef*
   5: 3:0                 I : *undef*

