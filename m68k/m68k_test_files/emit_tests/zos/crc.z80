/*
 * Copyright (c) 1992 Twenty-First Designs, Inc.
 * Unpublished work. All rights reserved.  
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF 
 * TWENTY-FIRST DESIGNS, INC.
 *
 * This software source code contains trade secrets and other
 * proprietary information of Twenty-First Designs, Inc. All
 * disclosure or use of this source code is strictly restricted
 * by contract to that required for operation and maintenance 
 * of equipment provided by Twenty-First Designs, Inc.
 * All other disclosure or use of this source code is prohibited.
 *
 ***********************************************************
 *
 * $Id: crc.z80,v 1.1.1.1 2000/10/18 04:29:56 kent Exp $
 *
 ***********************************************************
 *
 * crc calulation routine
 *
 * This routine updates a CRC (compatible with PPP)
 * using table lookup.
 *
 * arguments:	HL = old CRC
 *		A  = new byte
 *
 * returns:	HL = new CRC
 *
 * To be compatible with the async HDLC standard, the CRC
 * value must be initialized to 0xffff. The calculated CRC
 * is inverted before transmission, and is sent with the
 * least significant byte transmitted first.
 *
 * Upon receipt, a properly received message will have a
 * residual CRC of 0xf0b8.
 *
 * The 'crc_table' is generated with this file by defining
 * the preprocessor symbol `GEN_TABLE', compiling & running.
 *
 * All of this derived from the PPP rfc.
 *
 ***********************************************************
 */

#ifndef	GEN_TABLE

	.globl	crc

crc:	xor	l
	ld	e,a
	ld	d,#0
	ld	a,h
	ld	hl,#crc_table
	add	hl,de
	xor	(hl)
	inc	h
	ld	h,(hl)
	ld	l,a
	ret

#else

/* HDLC polynominal: x**0 + x**5 + x**12 + x**16 */

#define	P	0x8408

main (argc, argv)
int argc;
char **argv;
{
    unsigned int b, v, i;
    unsigned short fcstab[256], *p = fcstab;

    for (b = 0; b < 256; b++) {
	for (v = b, i = 8; i--;)
	    v = v & 1 ? (v >> 1) ^ P : v >> 1;
	*p++ = v;
    }
	
    printf ("; This file generated by `%s'\n\n", argv[0]);
    printf (".globl crc_table\ncrc_table:");

    for (b = 0, p = fcstab; b < 256; b++)
	printf (b & 7 ? ", %d" : "\n.byte\t%d", *p++ & 0xff);

    for (b = 0, p = fcstab; b < 256; b++)
	printf (b & 7 ? ", %d" : "\n.byte\t%d", *p++ >> 8);

    putchar ('\n');
    exit (0);
}
    
#endif
