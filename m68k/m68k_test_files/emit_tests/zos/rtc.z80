/*
 * Copyright (c) 1992 Twenty-First Designs, Inc.
 * Unpublished work. All rights reserved.  
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF 
 * TWENTY-FIRST DESIGNS, INC.
 *
 * This software source code contains trade secrets and other
 * proprietary information of Twenty-First Designs, Inc. All
 * disclosure or use of this source code is strictly restricted
 * by contract to that required for operation and maintenance 
 * of equipment provided by Twenty-First Designs, Inc.
 * All other disclosure or use of this source code is prohibited.
 *
 ***********************************************************
 *
 * $Id: rtc.z80,v 1.1.1.1 2000/10/18 04:29:56 kent Exp $
 *
 ***********************************************************
 *
 * Implement a real-time callout table
 *
 * Arrange to execute a routine every 25 msec.
 *
 * Items are placed in the "callout" table via
 *
 * function:  rtc_install
 * arguments:	HL = fn
 *		IY = iy_area
 *
 * returns:	HL = cancel pointer
 *	
 * This causes `fn' to be executed every 25 msec.
 * IY register is set before function execution.
 * All registers saved before function execution.
 *
 ***********************************************************
 */


#include "io_addr.h"

#ifndef RTC_SIO
#define RTC_SIO	SIO_0a_ctrl
#endif

RTC_EVENTS	= 5			; 5 entries every 25 msec

#ifdef RTC_PSCALE
	.lcomm	rtc_pscale, 1
#endif

	.data
rtc_ptr:
	.word	rtc_tbl
rtc_tbl:
	.skip	RTC_EVENTS * 4		; room for IY/HL
	.word	0, rtc_top		; last entry (IY/FN)
	.text

	.globl	rtc_esc_int, rtc_install, rtc_int

RESET_EXTERNAL  = 0x10			; SIO command word

rtc_esc_int:
; entered every 5 msec
; save only the AF & HL registers
	ei				; run with ints enabled
	push	af
	push	hl
	ld	a,#RESET_EXTERNAL	; first satisfy the INT
	out	(RTC_SIO),a
#ifdef RTC_PSCALE
	ld	hl,#rtc_pscale
	dec	(hl)
	call	z,rtc_int
#else
	call	rtc_int
#endif
	pop	hl
	pop	af
	reti				; interrupts already enabled

rtc_int:
; entered every 5 msec from an exteral RTC source
; assumes that calling routine has saved AF & HL 
; assumes that calling routine has enabled interrupts
#ifdef RTC_PSCALE
	ld	(hl),#RTC_PSCALE
#endif
	push	de			; save remaining registers
	push	bc
	push	ix
	ld	hl,(rtc_ptr)		; check for routine
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	push	de
	ex	(sp),iy			; copy to IY, save old
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(rtc_ptr),hl		; save for next time
	ex	de,hl			; fn to HL
	ld	a,h
	or	a
	call	nz,chl			; execute FN if present
	pop	iy			; restore registers
	pop	ix
	pop	bc
	pop	de			; restore scratch
	ret

rtc_top:
; restore pointer to top of table
	ld	hl,#rtc_tbl
	ld	(rtc_ptr),hl
	ret
;

rtc_install:
; put vector in the timer table
	push	bc			; call saved register
	ld	b,#RTC_EVENTS		; four entries
	ex	de,hl
	ld	hl,#rtc_tbl + 2		; point to HL area
	push	iy			; prepare for save
; loop here to find empty slot
1$:	di				; avoid contention
	ld	a,(hl)
	inc	hl
	or	(hl)
	inc	hl
	jr	z,2$
	ei				; allow interrupt
	inc	hl			; skip IY area
	inc	hl
	djnz	1$
	rst	0x38			; no empty slots
; install in table
2$:	dec	hl
	ld	(hl),d			; save FN
	dec	hl
	ld	(hl),e
	dec	hl
	pop	de			; get IY
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ei
	pop	bc
	ret				; addr returned in HL



