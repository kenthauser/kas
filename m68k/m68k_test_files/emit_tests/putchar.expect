










gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA, DATA_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: arg mode = 12 arg = [__no_return(index: 9)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [__no_return(index: 9)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2











gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 0 arg = d3
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d2
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L4(index: 13)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L4(index: 13)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d3
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d3: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d3
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = d2: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 010 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L5(index: 16)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L5(index: 16)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: arg mode = 12 arg = [abort(index: 7)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [abort(index: 7)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2





gen_insn: arg mode = 11 arg = #2
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = #2: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] Q_4BITS [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 0 arg = d3
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2













gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [.L7(index: 20)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L7(index: 20)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(7): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(7): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L9(index: 21)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L9(index: 21)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [_mb_unlink(index: 22)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [_mb_unlink(index: 22)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(7): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(7): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(7)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(7): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #255
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DATA_REG [fits: 2]-> [2,2] 
 1: info [sz: v, words: 1, arg_c: 1, tst: m68k] MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 1, tst: m68k] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #255
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 2]-> [2,2] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 01000 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #751
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [6,6] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DATA_REG [fits: 2]-> [2,2] 
 1: info [sz: v, words: 1, arg_c: 1, tst: m68k] MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 1, tst: m68k] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #255
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #751
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #751: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 2]-> [4,4] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DATA_REG [fits: 2]-> [2,2] 
 1: info [sz: v, words: 1, arg_c: 1, tst: m68k] MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 1, tst: m68k] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #255
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #255: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #65535
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #65535: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #65535: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #65535: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_ALTER [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 12 arg = 751
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = 751: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [chk(index: 4)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [chk(index: 4)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-2)
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-2): OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 6 arg = a1@(a0:l,16:w)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a1@(a0:l,16:w): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a1@(a0:l,16:w): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #2
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #2: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = a1@(a0:l,16:w)
gen_insn: arg mode = 5 arg = a6@(-5)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(a0:l,16:w): OK
validate: arg = a6@(-5): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(a0:l,16:w): OK
validate: arg = a6@(-5): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-5)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-5): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-5): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #2
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #2: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(4): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #2
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #2: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = a0@: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a0@: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = a1@(a0:l,16:w)
gen_insn: arg mode = 5 arg = a6@(-5)
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(a0:l,16:w): OK
validate: arg = a6@(-5): OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(a0:l,16:w): OK
validate: arg = a6@(-5): OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-5)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-5): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-5): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-6): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #2
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #2: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-6)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-6): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-8
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-8: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2






gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a0@(16)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(16): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 010000 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(2): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a0@(2)
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0@(2): OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #0: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a1@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(12)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2















gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L52(index: 130)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L52(index: 130)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [queue(index: 11)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [queue(index: 11)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L53(index: 131)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L53(index: 131)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2





gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [putConsoleChar(index: 133)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [putConsoleChar(index: 133)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2





gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L57(index: 138)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L57(index: 138)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a7@-: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [mb_alloc(index: 140)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [mb_alloc(index: 140)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [mb_stradd(index: 141)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [mb_stradd(index: 141)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [queue(index: 11)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [queue(index: 11)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: arg mode = 12 arg = [.L59(index: 143)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L59(index: 143)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: m68020] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 1, tst: cpu32] 
validate: info = cpu32
validate: info = info [sz: l, words: 1, arg_c: 1, tst: coldfire] 
validate: info = coldfire
 0: info [sz: l, words: 1, arg_c: 1, tst: m68020] DATA_REG [fits: 2]-> [2,2] 
candidates: 1 : 001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [putchar(index: 127)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [putchar(index: 127)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L58(index: 144)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L58(index: 144)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



















gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-4
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 12 arg = [panicstr(index: 146)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [panicstr(index: 146)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [panicstr(index: 146)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [panicstr(index: 146)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [panicstr(index: 146)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [panicstr(index: 146)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L64(index: 152)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L64(index: 152)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,8] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2



gen_insn: arg mode = 11 arg = #[.LC0(index: 148)]
gen_insn: arg mode = 12 arg = [panicstr(index: 146)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[.LC0(index: 148)]: OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[.LC0(index: 148)]: OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[.LC0(index: 148)]: OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[.LC0(index: 148)]: OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[.LC0(index: 148)]: OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [8,10] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 1][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [4,6] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 2 : 0000000000000000000000101 : size = [4,10] : result = 2



gen_insn: arg mode = 12 arg = [.LC1(index: 149)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.LC1(index: 149)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [puts(index: 136)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [puts(index: 136)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [puts(index: 136)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [puts(index: 136)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = [console_out(index: 129)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = [console_out(index: 129)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = [console_out(index: 129)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = [console_out(index: 129)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = [console_out(index: 129)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,8] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 12 arg = [panicstr(index: 146)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(8): OK
validate: arg = [panicstr(index: 146)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,8] : result = 2



gen_insn: arg mode = 12 arg = [abort(index: 7)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [abort(index: 7)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2




gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2



gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2












gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #-12
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = #-12: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2





gen_insn: arg mode = 12 arg = [__display_current_proc(index: 156)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [__display_current_proc(index: 156)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L66(index: 157)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L66(index: 157)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2




gen_insn: arg mode = 12 arg = [.L67(index: 159)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L67(index: 159)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2





gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 5 arg = a6@(-12)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-12): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-12): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-12): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-12): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = a6@(-12): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [4,4] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [.L68(index: 163)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L68(index: 163)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 5 arg = a6@(-12)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-12): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(-8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-8): OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [exec(index: 123)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [exec(index: 123)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #8
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #8: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #[sys_queue_tail(index: 164)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [6,6] : result = 2


gen_insn: arg mode = 12 arg = [.L67(index: 159)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L67(index: 159)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 11 arg = #[sys_queue_table(index: 165)]
gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_table(index: 165)]: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_table(index: 165)]: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_table(index: 165)]: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_table(index: 165)]: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #[sys_queue_table(index: 165)]: OK
validate: arg = [sys_queue_head(index: 162)]: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [8,10] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 1][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [4,6] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 2 : 0000000000000000000000101 : size = [4,10] : result = 2





gen_insn: arg mode = 12 arg = [sys_queue_head(index: 162)]
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_head(index: 162)]: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [sys_queue_tail(index: 164)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [sys_queue_tail(index: 164)]: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: m68k] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 000100 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L69(index: 160)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L69(index: 160)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2



gen_insn: arg mode = 11 arg = #10000
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #10000: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #10000: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #10000: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #10000: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #10000: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [8,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [8,8] : result = 2



gen_insn: arg mode = 12 arg = [.L70(index: 167)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L70(index: 167)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2





gen_insn: arg mode = 12 arg = [console_out(index: 129)]
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [console_out(index: 129)]: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a0@(4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@(4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a7@-: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [atx_idle(index: 170)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [atx_idle(index: 170)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a7: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L72(index: 171)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L72(index: 171)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2





gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6@(-4): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 5 arg = a6@(-4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a6@(-4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] GEN [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L71(index: 168)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L71(index: 168)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2


gen_insn: arg mode = 12 arg = [.L66(index: 157)]
gen_insn: const args = false
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = [.L66(index: 157)]: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DIRECT_DEL [fits: 2]-> [0,6] 
candidates: 1 : 1 : size = [0,6] : result = 2





gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2







gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2




gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































err : St13runtime_error: kas_position_tagged::kas_loc: zero handler


 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [10,10] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [10,10] : result = 2


 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [10,10] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [10,10] : result = 2

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : DW_FILE: [0,0] ffffffff 
fmt : DW_FILE [0,0]: 0: SYM: 1 "putchar.c"

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : CFI_SECTIONS: [0,0] 0 
fmt : CFI_SECTIONS [0,0]: 

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 1 
fmt : DW_FILE [0,0]: 1 : "chk.h"

raw : DW_LINE: [0,0] 1 
fmt : DW_LINE [0,0]: 32

raw : DW_START_FRAME: [0,0] 1 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 222e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 222e: a6@(8),d1

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d411000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d41: d1,a6@(fffffffe)

raw : M68K_GEN: [4,4] 3d401000 {4500, fffc} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffc)

raw : DW_LINE: [0,0] 2 
fmt : DW_LINE [0,0]: 33

raw : M68K_GEN: [4,4] 302e1000 {45, fffe} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffe),d0

raw : M68K_GEN: [4,4] 41ae1017 {45, fffc} 
fmt : M68K_GEN [4,4]: 41ae: a6@(fffffffc),d0

raw : DW_LINE: [0,0] 3 
fmt : DW_LINE [0,0]: 34

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 220022 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 220022 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 4 cx[1](0+ca(.text+22)-ca(.text+0)) 
fmt : SIZE [0,0]: cx[1](0+ca(.text+22)-ca(.text+0))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 2 
fmt : DW_FILE [0,0]: 2 : "traps.h"

raw : DW_LINE: [0,0] 4 
fmt : DW_LINE [0,0]: 55

raw : DW_START_FRAME: [0,0] 2 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 4 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 5 
fmt : DW_LINE [0,0]: 56

raw : ERROR: [0,0] 1 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : M68K_GEN: [2,2] 4afc1023 
fmt : M68K_GEN [2,2]: 4afc

raw : ERROR: [0,0] 2 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : DW_LINE: [0,0] 6 
fmt : DW_LINE [0,0]: 57

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [__no_return(index: 9)] 
fmt : M68K_GEN [6,6]: 4eb9: [__no_return(index: 9)]:l

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 2 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 7 cx[2](0+ca(.text+2e)-ca(.text+22)) 
fmt : SIZE [0,0]: cx[2](0+ca(.text+2e)-ca(.text+22))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 7 
fmt : DW_LINE [0,0]: 87

raw : DW_START_FRAME: [0,0] 3 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 5 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 6 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [2,2] 2f031000 {400} 
fmt : M68K_GEN [2,2]: 2f03: d3,a7@-

raw : M68K_GEN: [2,2] 2f021000 {400} 
fmt : M68K_GEN [2,2]: 2f02: d2,a7@-

raw : LABEL: [0,0] 80008 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 7 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 8 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 8 
fmt : DW_LINE [0,0]: 91

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : DW_LINE: [0,0] 9 
fmt : DW_LINE [0,0]: 92

raw : M68K_GEN: [4,4] 222e1000 {45, c} 
fmt : M68K_GEN [4,4]: 222e: a6@(c),d1

raw : DW_LINE: [0,0] a 
fmt : DW_LINE [0,0]: 94

raw : M68K_GEN: [2,2] 20401000 {100} 
fmt : M68K_GEN [2,2]: 2040: d0,a0

raw : M68K_GEN: [2,2] 4a88101a {1f01} 
fmt : M68K_GEN [2,2]: 4a88: a0

raw : M68K_BRANCH: [2,2] 67001021 [.L4(index: d)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] b 
fmt : DW_LINE [0,0]: 94

raw : M68K_GEN: [2,2] 20401000 {100} 
fmt : M68K_GEN [2,2]: 2040: d0,a0

raw : M68K_GEN: [2,2] 24081000 {1} 
fmt : M68K_GEN [2,2]: 2408: a0,d2

raw : M68K_GEN: [2,2] 76011001 {13} 
fmt : M68K_GEN [2,2]: 7601: #1,d3

raw : M68K_GEN: [2,2] c4831017 {0} 
fmt : M68K_GEN [2,2]: c483: d3,d2

raw : M68K_GEN: [2,2] 4a82101a {1f00} 
fmt : M68K_GEN [2,2]: 4a82: d2

raw : M68K_BRANCH: [2,2] 67001021 [.L5(index: 10)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 220022 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] c 
fmt : DW_LINE [0,0]: 95

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [abort(index: 7)] 
fmt : M68K_GEN [4,4]: 4eba: [abort(index: 7)]

raw : LABEL: [0,0] 260026 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] d 
fmt : DW_LINE [0,0]: 97

raw : ERROR: [0,0] 3 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : M68K_GEN: [2,2] 4e421022 {1f13} 
fmt : M68K_GEN [2,2]: 4e42: #2

raw : ERROR: [0,0] 4 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : DW_LINE: [0,0] e 
fmt : DW_LINE [0,0]: 99

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [4,4] 242e1000 {45, fff8} 
fmt : M68K_GEN [4,4]: 242e: a6@(fffffff8),d2

raw : M68K_GEN: [4,4] 262e1000 {45, fffc} 
fmt : M68K_GEN [4,4]: 262e: a6@(fffffffc),d3

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 3 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] b cx[3](0+ca(.text+64)-ca(.text+2e)) 
fmt : SIZE [0,0]: cx[3](0+ca(.text+64)-ca(.text+2e))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 3 
fmt : DW_FILE [0,0]: 3 : "mbuf.h"

raw : DW_LINE: [0,0] f 
fmt : DW_LINE [0,0]: 140

raw : DW_START_FRAME: [0,0] 4 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 9 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] a 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 10 
fmt : DW_LINE [0,0]: 140

raw : M68K_GEN: [4,4] 4aae101a {1f45, 8} 
fmt : M68K_GEN [4,4]: 4aae: a6@(8)

raw : M68K_BRANCH: [2,2] 67001021 [.L7(index: 14)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 11 
fmt : DW_LINE [0,0]: 140

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 10281000 {45, 7} 
fmt : M68K_GEN [4,4]: 1028: a0@(7),d0

raw : M68K_GEN: [2,2] 5300101b {13} 
fmt : M68K_GEN [2,2]: 5300: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 11401000 {4500, 7} 
fmt : M68K_GEN [4,4]: 1140: d0,a0@(7)

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 10281000 {45, 7} 
fmt : M68K_GEN [4,4]: 1028: a0@(7),d0

raw : M68K_GEN: [2,2] 4a00101a {1f00} 
fmt : M68K_GEN [2,2]: 4a00: d0

raw : M68K_BRANCH: [2,2] 66001021 [.L9(index: 15)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 280028 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 12 
fmt : DW_LINE [0,0]: 141

raw : M68K_GEN: [4,4] 2f2e1000 {445, 8} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [_mb_unlink(index: 16)] 
fmt : M68K_GEN [6,6]: 4eb9: [_mb_unlink(index: 16)]:l

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : LABEL: [0,0] 340034 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 13 
fmt : DW_LINE [0,0]: 140

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 4 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 12 cx[4](0+ca(.text+9e)-ca(.text+64)) 
fmt : SIZE [0,0]: cx[4](0+ca(.text+9e)-ca(.text+64))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 14 
fmt : DW_LINE [0,0]: 142

raw : DW_START_FRAME: [0,0] 5 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] b 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] c 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 15 
fmt : DW_LINE [0,0]: 142

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 10281000 {45, 7} 
fmt : M68K_GEN [4,4]: 1028: a0@(7),d0

raw : M68K_GEN: [2,2] 5200101b {13} 
fmt : M68K_GEN [2,2]: 5200: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 11401000 {4500, 7} 
fmt : M68K_GEN [4,4]: 1140: d0,a0@(7)

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 1e001e 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 5 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 1e001e 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 18 cx[5](0+ca(.text+bc)-ca(.text+9e)) 
fmt : SIZE [0,0]: cx[5](0+ca(.text+bc)-ca(.text+9e))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 16 
fmt : DW_LINE [0,0]: 143

raw : DW_START_FRAME: [0,0] 6 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] d 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] e 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 17 
fmt : DW_LINE [0,0]: 143

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 10281000 {45, 7} 
fmt : M68K_GEN [4,4]: 1028: a0@(7),d0

raw : M68K_GEN: [2,2] 10001000 {0} 
fmt : M68K_GEN [2,2]: 1000: d0,d0

raw : M68K_GEN: [6,6] 2801016 {56, 0, ff} 
fmt : M68K_GEN [6,6]: 280: #ff,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 6 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 1b cx[6](0+ca(.text+d4)-ca(.text+bc)) 
fmt : SIZE [0,0]: cx[6](0+ca(.text+d4)-ca(.text+bc))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 18 
fmt : DW_LINE [0,0]: 144

raw : DW_START_FRAME: [0,0] 7 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] f 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 10 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 19 
fmt : DW_LINE [0,0]: 144

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 32101000 {2} 
fmt : M68K_GEN [2,2]: 3210: a0@,d1

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] b0411017 {0} 
fmt : M68K_GEN [2,2]: b041: d1,d0

raw : M68K_GEN: [2,2] 57c0101a {1f00} 
fmt : M68K_GEN [2,2]: 57c0: d0

raw : M68K_GEN: [2,2] 4400101a {1f00} 
fmt : M68K_GEN [2,2]: 4400: d0

raw : M68K_GEN: [2,2] 10001000 {0} 
fmt : M68K_GEN [2,2]: 1000: d0,d0

raw : M68K_GEN: [6,6] 2801016 {56, 0, ff} 
fmt : M68K_GEN [6,6]: 280: #ff,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 240024 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 7 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 240024 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 1e cx[7](0+ca(.text+f8)-ca(.text+d4)) 
fmt : SIZE [0,0]: cx[7](0+ca(.text+f8)-ca(.text+d4))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 1a 
fmt : DW_LINE [0,0]: 145

raw : DW_START_FRAME: [0,0] 8 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 11 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 12 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 1b 
fmt : DW_LINE [0,0]: 145

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 32001000 {0} 
fmt : M68K_GEN [2,2]: 3200: d0,d1

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30411000 {100} 
fmt : M68K_GEN [2,2]: 3041: d1,a0

raw : M68K_GEN: [2,2] 90c01019 {100} 
fmt : M68K_GEN [2,2]: 90c0: d0,a0

raw : M68K_GEN: [2,2] 30081000 {1} 
fmt : M68K_GEN [2,2]: 3008: a0,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 1e001e 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 8 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 1e001e 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 21 cx[8](0+ca(.text+116)-ca(.text+f8)) 
fmt : SIZE [0,0]: cx[8](0+ca(.text+116)-ca(.text+f8))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 1c 
fmt : DW_LINE [0,0]: 147

raw : DW_START_FRAME: [0,0] 9 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 13 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 14 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffe)

raw : DW_LINE: [0,0] 1d 
fmt : DW_LINE [0,0]: 147

raw : M68K_GEN: [4,4] 326e1000 {145, fffe} 
fmt : M68K_GEN [4,4]: 326e: a6@(fffffffe),a1

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [2,2] 20091000 {1} 
fmt : M68K_GEN [2,2]: 2009: a1,d0

raw : M68K_GEN: [2,2] d0881017 {1} 
fmt : M68K_GEN [2,2]: d088: a0,d0

raw : M68K_GEN: [6,6] c801016 {56, 0, 2ef} 
fmt : M68K_GEN [6,6]: c80: #2ef,d0

raw : M68K_GEN: [2,2] 53c0101a {1f00} 
fmt : M68K_GEN [2,2]: 53c0: d0

raw : M68K_GEN: [2,2] 4400101a {1f00} 
fmt : M68K_GEN [2,2]: 4400: d0

raw : M68K_GEN: [2,2] 10001000 {0} 
fmt : M68K_GEN [2,2]: 1000: d0,d0

raw : M68K_GEN: [6,6] 2801016 {56, 0, ff} 
fmt : M68K_GEN [6,6]: 280: #ff,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 9 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 24 cx[9](0+ca(.text+148)-ca(.text+116)) 
fmt : SIZE [0,0]: cx[9](0+ca(.text+148)-ca(.text+116))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 1e 
fmt : DW_LINE [0,0]: 148

raw : DW_START_FRAME: [0,0] a 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 15 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 16 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 1f 
fmt : DW_LINE [0,0]: 148

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [6,6] 203c1000 {56, 0, 2ef} 
fmt : M68K_GEN [6,6]: 203c: #2ef,d0

raw : M68K_GEN: [2,2] 90881017 {1} 
fmt : M68K_GEN [2,2]: 9088: a0,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] a 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 27 cx[a](0+ca(.text+160)-ca(.text+148)) 
fmt : SIZE [0,0]: cx[a](0+ca(.text+160)-ca(.text+148))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 20 
fmt : DW_LINE [0,0]: 150

raw : DW_START_FRAME: [0,0] b 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 17 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 18 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffe)

raw : DW_LINE: [0,0] 21 
fmt : DW_LINE [0,0]: 150

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [4,4] b06e1017 {45, fffe} 
fmt : M68K_GEN [4,4]: b06e: a6@(fffffffe),d0

raw : M68K_GEN: [2,2] 5cc0101a {1f00} 
fmt : M68K_GEN [2,2]: 5cc0: d0

raw : M68K_GEN: [2,2] 4400101a {1f00} 
fmt : M68K_GEN [2,2]: 4400: d0

raw : M68K_GEN: [2,2] 10001000 {0} 
fmt : M68K_GEN [2,2]: 1000: d0,d0

raw : M68K_GEN: [6,6] 2801016 {56, 0, ff} 
fmt : M68K_GEN [6,6]: 280: #ff,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 280028 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] b 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 280028 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 2a cx[b](0+ca(.text+188)-ca(.text+160)) 
fmt : SIZE [0,0]: cx[b](0+ca(.text+188)-ca(.text+160))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 22 
fmt : DW_LINE [0,0]: 151

raw : DW_START_FRAME: [0,0] c 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 19 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1a 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 23 
fmt : DW_LINE [0,0]: 151

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 4} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(4)

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 1a001a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] c 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 1a001a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 2d cx[c](0+ca(.text+1a2)-ca(.text+188)) 
fmt : SIZE [0,0]: cx[c](0+ca(.text+1a2)-ca(.text+188))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 24 
fmt : DW_LINE [0,0]: 152

raw : DW_START_FRAME: [0,0] d 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1b 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1c 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 25 
fmt : DW_LINE [0,0]: 152

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : M68K_GEN: [2,2] d0881017 {1} 
fmt : M68K_GEN [2,2]: d088: a0,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 1c001c 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] d 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 1c001c 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 30 cx[d](0+ca(.text+1be)-ca(.text+1a2)) 
fmt : SIZE [0,0]: cx[d](0+ca(.text+1be)-ca(.text+1a2))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 26 
fmt : DW_LINE [0,0]: 153

raw : DW_START_FRAME: [0,0] e 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1d 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1e 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 27 
fmt : DW_LINE [0,0]: 153

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : M68K_GEN: [2,2] d0881017 {1} 
fmt : M68K_GEN [2,2]: d088: a0,d0

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 1a001a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] e 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 1a001a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 33 cx[e](0+ca(.text+1d8)-ca(.text+1be)) 
fmt : SIZE [0,0]: cx[e](0+ca(.text+1d8)-ca(.text+1be))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 28 
fmt : DW_LINE [0,0]: 154

raw : DW_START_FRAME: [0,0] f 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 1f 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 20 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffe)

raw : DW_LINE: [0,0] 29 
fmt : DW_LINE [0,0]: 154

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 32001000 {0} 
fmt : M68K_GEN [2,2]: 3200: d0,d1

raw : M68K_GEN: [4,4] 302e1000 {45, fffe} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffe),d0

raw : M68K_GEN: [2,2] d0411017 {0} 
fmt : M68K_GEN [2,2]: d041: d1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 2a002a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] f 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 2a002a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 36 cx[f](0+ca(.text+202)-ca(.text+1d8)) 
fmt : SIZE [0,0]: cx[f](0+ca(.text+202)-ca(.text+1d8))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 2a 
fmt : DW_LINE [0,0]: 155

raw : DW_START_FRAME: [0,0] 10 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 21 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 22 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffe)

raw : DW_LINE: [0,0] 2b 
fmt : DW_LINE [0,0]: 155

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 32001000 {0} 
fmt : M68K_GEN [2,2]: 3200: d0,d1

raw : M68K_GEN: [4,4] 302e1000 {45, fffe} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffe),d0

raw : M68K_GEN: [2,2] d0411017 {0} 
fmt : M68K_GEN [2,2]: d041: d1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30801000 {200} 
fmt : M68K_GEN [2,2]: 3080: d0,a0@

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 260026 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 10 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 260026 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 39 cx[10](0+ca(.text+228)-ca(.text+202)) 
fmt : SIZE [0,0]: cx[10](0+ca(.text+228)-ca(.text+202))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 2c 
fmt : DW_LINE [0,0]: 157

raw : DW_START_FRAME: [0,0] 11 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 23 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 24 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffe} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffe)

raw : DW_LINE: [0,0] 2d 
fmt : DW_LINE [0,0]: 157

raw : M68K_GEN: [4,4] 302e1000 {45, fffe} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffe),d0

raw : M68K_GEN: [2,2] 30001000 {0} 
fmt : M68K_GEN [2,2]: 3000: d0,d0

raw : M68K_GEN: [6,6] 2801016 {56, 0, ffff} 
fmt : M68K_GEN [6,6]: 280: #ffff,d0

raw : M68K_GEN: [4,4] 4878101a {1f47, 2ef} 
fmt : M68K_GEN [4,4]: 4878: 2ef:w

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [chk(index: 4)] 
fmt : M68K_GEN [4,4]: 4eba: [chk(index: 4)]

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : DW_LINE: [0,0] 2e 
fmt : DW_LINE [0,0]: 158

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [6,6] 316e1000 {4545, fffe, 2} 
fmt : M68K_GEN [6,6]: 316e: a6@(fffffffe),a0@(2)

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 30801000 {200} 
fmt : M68K_GEN [2,2]: 3080: d0,a0@

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 420042 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 11 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 420042 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 3c cx[11](0+ca(.text+26a)-ca(.text+228)) 
fmt : SIZE [0,0]: cx[11](0+ca(.text+26a)-ca(.text+228))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 2f 
fmt : DW_LINE [0,0]: 160

raw : DW_START_FRAME: [0,0] 12 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 25 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 26 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 1d401000 {4500, fffa} 
fmt : M68K_GEN [4,4]: 1d40: d0,a6@(fffffffa)

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 30 
fmt : DW_LINE [0,0]: 160

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 226e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 226e: a6@(fffffffc),a1

raw : M68K_GEN: [6,6] 13ae1000 {1245, fffa, 8810} 
fmt : M68K_GEN [6,6]: 13ae: a6@(fffffffa),a1@(a0:l,16:w)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 5240101b {13} 
fmt : M68K_GEN [2,2]: 5240: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30801000 {200} 
fmt : M68K_GEN [2,2]: 3080: d0,a0@

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 12 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 3f cx[12](0+ca(.text+2a2)-ca(.text+26a)) 
fmt : SIZE [0,0]: cx[12](0+ca(.text+2a2)-ca(.text+26a))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 31 
fmt : DW_LINE [0,0]: 161

raw : DW_START_FRAME: [0,0] 13 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 27 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 28 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffa} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffa)

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 32 
fmt : DW_LINE [0,0]: 161

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30ae1000 {245, fffa} 
fmt : M68K_GEN [4,4]: 30ae: a6@(fffffffa),a0@

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 5440101b {13} 
fmt : M68K_GEN [2,2]: 5440: #2,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30801000 {200} 
fmt : M68K_GEN [2,2]: 3080: d0,a0@

raw : LABEL: [0,0] 340034 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 13 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 44 cx[13](0+ca(.text+2dc)-ca(.text+2a2)) 
fmt : SIZE [0,0]: cx[13](0+ca(.text+2dc)-ca(.text+2a2))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 33 
fmt : DW_LINE [0,0]: 162

raw : DW_START_FRAME: [0,0] 14 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 29 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2a 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 34 
fmt : DW_LINE [0,0]: 162

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 20ae1000 {245, c} 
fmt : M68K_GEN [4,4]: 20ae: a6@(c),a0@

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30101000 {2} 
fmt : M68K_GEN [2,2]: 3010: a0@,d0

raw : M68K_GEN: [2,2] 5840101b {13} 
fmt : M68K_GEN [2,2]: 5840: #4,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [2,2] 30801000 {200} 
fmt : M68K_GEN [2,2]: 3080: d0,a0@

raw : LABEL: [0,0] 2c002c 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 14 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 49 cx[14](0+ca(.text+30e)-ca(.text+2dc)) 
fmt : SIZE [0,0]: cx[14](0+ca(.text+30e)-ca(.text+2dc))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 35 
fmt : DW_LINE [0,0]: 165

raw : DW_START_FRAME: [0,0] 15 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2b 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2c 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 36 
fmt : DW_LINE [0,0]: 165

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 226e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 226e: a6@(fffffffc),a1

raw : M68K_GEN: [6,6] 1d711000 {4512, 8810, fffb} 
fmt : M68K_GEN [6,6]: 1d71: a1@(a0:l,16:w),a6@(fffffffb)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 5240101b {13} 
fmt : M68K_GEN [2,2]: 5240: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 4} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(4)

raw : M68K_GEN: [4,4] 102e1000 {45, fffb} 
fmt : M68K_GEN [4,4]: 102e: a6@(fffffffb),d0

raw : LABEL: [0,0] 340034 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 37 
fmt : DW_LINE [0,0]: 164

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 15 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 4e cx[15](0+ca(.text+346)-ca(.text+30e)) 
fmt : SIZE [0,0]: cx[15](0+ca(.text+346)-ca(.text+30e))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 38 
fmt : DW_LINE [0,0]: 167

raw : DW_START_FRAME: [0,0] 16 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2d 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2e 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 39 
fmt : DW_LINE [0,0]: 167

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 3d501000 {4502, fffa} 
fmt : M68K_GEN [4,4]: 3d50: a0@,a6@(fffffffa)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 5440101b {13} 
fmt : M68K_GEN [2,2]: 5440: #2,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 4} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(4)

raw : M68K_GEN: [4,4] 302e1000 {45, fffa} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffa),d0

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3a 
fmt : DW_LINE [0,0]: 166

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 16 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 53 cx[16](0+ca(.text+380)-ca(.text+346)) 
fmt : SIZE [0,0]: cx[16](0+ca(.text+380)-ca(.text+346))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3b 
fmt : DW_LINE [0,0]: 169

raw : DW_START_FRAME: [0,0] 17 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 2f 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 30 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3c 
fmt : DW_LINE [0,0]: 169

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 2d501000 {4502, fff8} 
fmt : M68K_GEN [4,4]: 2d50: a0@,a6@(fffffff8)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 4} 
fmt : M68K_GEN [4,4]: 3028: a0@(4),d0

raw : M68K_GEN: [2,2] 5840101b {13} 
fmt : M68K_GEN [2,2]: 5840: #4,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 4} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(4)

raw : M68K_GEN: [4,4] 202e1000 {45, fff8} 
fmt : M68K_GEN [4,4]: 202e: a6@(fffffff8),d0

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3d 
fmt : DW_LINE [0,0]: 168

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 17 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 58 cx[17](0+ca(.text+3ba)-ca(.text+380)) 
fmt : SIZE [0,0]: cx[17](0+ca(.text+3ba)-ca(.text+380))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3e 
fmt : DW_LINE [0,0]: 171

raw : DW_START_FRAME: [0,0] 18 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 31 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 32 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 1d401000 {4500, fffa} 
fmt : M68K_GEN [4,4]: 1d40: d0,a6@(fffffffa)

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 3f 
fmt : DW_LINE [0,0]: 171

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5340101b {13} 
fmt : M68K_GEN [2,2]: 5340: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 10ae1000 {245, fffa} 
fmt : M68K_GEN [4,4]: 10ae: a6@(fffffffa),a0@

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 400040 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 18 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 400040 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 5d cx[18](0+ca(.text+3fa)-ca(.text+3ba)) 
fmt : SIZE [0,0]: cx[18](0+ca(.text+3fa)-ca(.text+3ba))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 40 
fmt : DW_LINE [0,0]: 172

raw : DW_START_FRAME: [0,0] 19 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 33 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 34 
fmt : DW_FRAME_CMD [0,0]: 

raw : M68K_GEN: [4,4] 202e1000 {45, c} 
fmt : M68K_GEN [4,4]: 202e: a6@(c),d0

raw : M68K_GEN: [4,4] 3d401000 {4500, fffa} 
fmt : M68K_GEN [4,4]: 3d40: d0,a6@(fffffffa)

raw : LABEL: [0,0] c000c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 41 
fmt : DW_LINE [0,0]: 172

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5540101b {13} 
fmt : M68K_GEN [2,2]: 5540: #2,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30ae1000 {245, fffa} 
fmt : M68K_GEN [4,4]: 30ae: a6@(fffffffa),a0@

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 400040 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 19 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 400040 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 62 cx[19](0+ca(.text+43a)-ca(.text+3fa)) 
fmt : SIZE [0,0]: cx[19](0+ca(.text+43a)-ca(.text+3fa))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 42 
fmt : DW_LINE [0,0]: 173

raw : DW_START_FRAME: [0,0] 1a 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 35 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 36 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 43 
fmt : DW_LINE [0,0]: 173

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5940101b {13} 
fmt : M68K_GEN [2,2]: 5940: #4,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 20ae1000 {245, c} 
fmt : M68K_GEN [4,4]: 20ae: a6@(c),a0@

raw : LABEL: [0,0] 320032 
fmt : LABEL [0,0]: 

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1a 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 67 cx[1a](0+ca(.text+472)-ca(.text+43a)) 
fmt : SIZE [0,0]: cx[1a](0+ca(.text+472)-ca(.text+43a))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 44 
fmt : DW_LINE [0,0]: 176

raw : DW_START_FRAME: [0,0] 1b 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 37 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 38 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 45 
fmt : DW_LINE [0,0]: 176

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 226e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 226e: a6@(fffffffc),a1

raw : M68K_GEN: [6,6] 1d711000 {4512, 8810, fffb} 
fmt : M68K_GEN [6,6]: 1d71: a1@(a0:l,16:w),a6@(fffffffb)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5240101b {13} 
fmt : M68K_GEN [2,2]: 5240: #1,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 102e1000 {45, fffb} 
fmt : M68K_GEN [4,4]: 102e: a6@(fffffffb),d0

raw : LABEL: [0,0] 340034 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 46 
fmt : DW_LINE [0,0]: 175

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1b 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 6c cx[1b](0+ca(.text+4aa)-ca(.text+472)) 
fmt : SIZE [0,0]: cx[1b](0+ca(.text+4aa)-ca(.text+472))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 47 
fmt : DW_LINE [0,0]: 178

raw : DW_START_FRAME: [0,0] 1c 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 39 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3a 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 48 
fmt : DW_LINE [0,0]: 178

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 3d501000 {4502, fffa} 
fmt : M68K_GEN [4,4]: 3d50: a0@,a6@(fffffffa)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5440101b {13} 
fmt : M68K_GEN [2,2]: 5440: #2,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 302e1000 {45, fffa} 
fmt : M68K_GEN [4,4]: 302e: a6@(fffffffa),d0

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 49 
fmt : DW_LINE [0,0]: 177

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1c 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 71 cx[1c](0+ca(.text+4e4)-ca(.text+4aa)) 
fmt : SIZE [0,0]: cx[1c](0+ca(.text+4e4)-ca(.text+4aa))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 4a 
fmt : DW_LINE [0,0]: 180

raw : DW_START_FRAME: [0,0] 1d 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff8} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff8

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3b 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3c 
fmt : DW_FRAME_CMD [0,0]: 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 4b 
fmt : DW_LINE [0,0]: 180

raw : M68K_GEN: [6,6] 2d6e1000 {4545, 8, fffc} 
fmt : M68K_GEN [6,6]: 2d6e: a6@(8),a6@(fffffffc)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 30401000 {100} 
fmt : M68K_GEN [2,2]: 3040: d0,a0

raw : M68K_GEN: [4,4] 41e81019 {145, 10} 
fmt : M68K_GEN [4,4]: 41e8: a0@(10),a0

raw : M68K_GEN: [4,4] d1ee1019 {145, fffc} 
fmt : M68K_GEN [4,4]: d1ee: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 2d501000 {4502, fff8} 
fmt : M68K_GEN [4,4]: 2d50: a0@,a6@(fffffff8)

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 30281000 {45, 2} 
fmt : M68K_GEN [4,4]: 3028: a0@(2),d0

raw : M68K_GEN: [2,2] 5840101b {13} 
fmt : M68K_GEN [2,2]: 5840: #4,d0

raw : M68K_GEN: [4,4] 206e1000 {145, fffc} 
fmt : M68K_GEN [4,4]: 206e: a6@(fffffffc),a0

raw : M68K_GEN: [4,4] 31401000 {4500, 2} 
fmt : M68K_GEN [4,4]: 3140: d0,a0@(2)

raw : M68K_GEN: [4,4] 202e1000 {45, fff8} 
fmt : M68K_GEN [4,4]: 202e: a6@(fffffff8),d0

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 4c 
fmt : DW_LINE [0,0]: 179

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1d 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3a003a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 76 cx[1d](0+ca(.text+51e)-ca(.text+4e4)) 
fmt : SIZE [0,0]: cx[1d](0+ca(.text+51e)-ca(.text+4e4))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 4 
fmt : DW_FILE [0,0]: 4 : "proc.h"

raw : DW_LINE: [0,0] 4d 
fmt : DW_LINE [0,0]: 35

raw : DW_START_FRAME: [0,0] 1e 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, 0} 
fmt : M68K_GEN [4,4]: 4e56: a6,#0

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3d 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3e 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 4e 
fmt : DW_LINE [0,0]: 35

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 20501000 {102} 
fmt : M68K_GEN [2,2]: 2050: a0@,a0

raw : M68K_GEN: [4,4] 226e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 226e: a6@(8),a1

raw : M68K_GEN: [4,4] 20291000 {45, 4} 
fmt : M68K_GEN [4,4]: 2029: a1@(4),d0

raw : M68K_GEN: [4,4] 2f2e1000 {445, c} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(c),a7@-

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [2,2] 4e90101a {1f02} 
fmt : M68K_GEN [2,2]: 4e90: a0@

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 220022 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1e 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 220022 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 7b cx[1e](0+ca(.text+540)-ca(.text+51e)) 
fmt : SIZE [0,0]: cx[1e](0+ca(.text+540)-ca(.text+51e))

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : COMM: [0,0] 7e 
fmt : COMM [0,0]: [in_panic(index: 126)]

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 5 
fmt : DW_FILE [0,0]: 5 : "putchar.c"

raw : DW_LINE: [0,0] 4f 
fmt : DW_LINE [0,0]: 34

raw : DW_START_FRAME: [0,0] 1f 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 3f 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 40 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 50 
fmt : DW_LINE [0,0]: 36

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : M68K_GEN: [4,4] 2d401000 {4500, fffc} 
fmt : M68K_GEN [4,4]: 2d40: d0,a6@(fffffffc)

raw : DW_LINE: [0,0] 51 
fmt : DW_LINE [0,0]: 38

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [2,2] 67001021 [.L52(index: 82)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 52 
fmt : DW_LINE [0,0]: 39

raw : M68K_GEN: [4,4] 222e1000 {45, fffc} 
fmt : M68K_GEN [4,4]: 222e: a6@(fffffffc),d1

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [2,2] 2f011000 {400} 
fmt : M68K_GEN [2,2]: 2f01: d1,a7@-

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [queue(index: b)] 
fmt : M68K_GEN [4,4]: 4eba: [queue(index: b)]

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : M68K_BRANCH: [2,2] 60001021 [.L53(index: 83)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 2c002c 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 2c002c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 53 
fmt : DW_LINE [0,0]: 41

raw : M68K_GEN: [4,4] 2f2e1000 {445, 8} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [putConsoleChar(index: 85)] 
fmt : M68K_GEN [6,6]: 4eb9: [putConsoleChar(index: 85)]:l

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 380038 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 54 
fmt : DW_LINE [0,0]: 42

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 1f 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 7f cx[1f](0+ca(.text+57e)-ca(.text+540)) 
fmt : SIZE [0,0]: cx[1f](0+ca(.text+57e)-ca(.text+540))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 55 
fmt : DW_LINE [0,0]: 46

raw : DW_START_FRAME: [0,0] 20 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 41 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 42 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 56 
fmt : DW_LINE [0,0]: 47

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [2,2] 67001021 [.L57(index: 8a)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] e000e 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 57 
fmt : DW_LINE [0,0]: 48

raw : M68K_GEN: [2,2] 42a7101a {1f04} 
fmt : M68K_GEN [2,2]: 42a7: a7@-

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [mb_alloc(index: 8c)] 
fmt : M68K_GEN [6,6]: 4eb9: [mb_alloc(index: 8c)]:l

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : M68K_GEN: [4,4] 2d401000 {4500, fffc} 
fmt : M68K_GEN [4,4]: 2d40: d0,a6@(fffffffc)

raw : DW_LINE: [0,0] 58 
fmt : DW_LINE [0,0]: 49

raw : M68K_GEN: [4,4] 2f2e1000 {445, 8} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_GEN: [4,4] 2f2e1000 {445, fffc} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(fffffffc),a7@-

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [mb_stradd(index: 8d)] 
fmt : M68K_GEN [6,6]: 4eb9: [mb_stradd(index: 8d)]:l

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : DW_LINE: [0,0] 59 
fmt : DW_LINE [0,0]: 50

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [4,4] 2f2e1000 {445, fffc} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(fffffffc),a7@-

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [queue(index: b)] 
fmt : M68K_GEN [4,4]: 4eba: [queue(index: b)]

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 5a 
fmt : DW_LINE [0,0]: 54

raw : M68K_BRANCH: [2,2] 60001021 [.L59(index: 8f)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 400040 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 5b 
fmt : DW_LINE [0,0]: 53

raw : M68K_GEN: [4,4] 202e1000 {45, 8} 
fmt : M68K_GEN [4,4]: 202e: a6@(8),d0

raw : M68K_GEN: [2,2] 22001000 {0} 
fmt : M68K_GEN [2,2]: 2200: d0,d1

raw : M68K_GEN: [2,2] 5281101b {13} 
fmt : M68K_GEN [2,2]: 5281: #1,d1

raw : M68K_GEN: [4,4] 2d411000 {4500, 8} 
fmt : M68K_GEN [4,4]: 2d41: d1,a6@(8)

raw : M68K_GEN: [2,2] 20401000 {100} 
fmt : M68K_GEN [2,2]: 2040: d0,a0

raw : M68K_GEN: [2,2] 10101000 {2} 
fmt : M68K_GEN [2,2]: 1010: a0@,d0

raw : M68K_GEN: [2,2] 49c01025 {1f00} 
fmt : M68K_GEN [2,2]: 49c0: d0

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [putchar(index: 7f)] 
fmt : M68K_GEN [4,4]: 4eba: [putchar(index: 7f)]

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : LABEL: [0,0] 5a005a 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 5c 
fmt : DW_LINE [0,0]: 52

raw : M68K_GEN: [4,4] 206e1000 {145, 8} 
fmt : M68K_GEN [4,4]: 206e: a6@(8),a0

raw : M68K_GEN: [2,2] 10101000 {2} 
fmt : M68K_GEN [2,2]: 1010: a0@,d0

raw : M68K_GEN: [2,2] 4a00101a {1f00} 
fmt : M68K_GEN [2,2]: 4a00: d0

raw : M68K_BRANCH: [2,2] 66001021 [.L58(index: 90)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 640064 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 5d 
fmt : DW_LINE [0,0]: 54

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 6a006a 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 20 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 6a006a 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 88 cx[20](0+ca(.text+5e8)-ca(.text+57e)) 
fmt : SIZE [0,0]: cx[20](0+ca(.text+5e8)-ca(.text+57e))

raw : COMM: [0,0] 92 
fmt : COMM [0,0]: [panicstr(index: 146)]

raw : SEG: [0,0] 3 
fmt : SEG [0,0]: 3 .rodata:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 70206e69 {61, 6e, 69, 63, 0} 
fmt : STR<1> [9,9]: 105 110 32 112 97 110 105 99 0 

raw : LABEL: [0,0] 90009 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 6e61500a {69, 63, 3a, 20, 0} 
fmt : STR<1> [9,9]: 10 80 97 110 105 99 58 32 0 

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 5e 
fmt : DW_LINE [0,0]: 60

raw : DW_START_FRAME: [0,0] 21 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fffc} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffffc

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 43 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 44 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 5f 
fmt : DW_LINE [0,0]: 62

raw : M68K_GEN: [6,6] 20391000 {c8} [panicstr(index: 92)] 
fmt : M68K_GEN [6,6]: 2039: [panicstr(index: 92)]:l,d0

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [2,2] 66001021 [.L64(index: 98)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 60 
fmt : DW_LINE [0,0]: 63

raw : M68K_GEN: [8,8] 2d791000 {45c8, fffc} [console_out(index: 81)] 
fmt : M68K_GEN [8,8]: 2d79: [console_out(index: 81)]:l,a6@(fffffffc)

raw : DW_LINE: [0,0] 61 
fmt : DW_LINE [0,0]: 64

raw : M68K_GEN: [6,6] 42b9101a {1fc8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 42b9: [console_out(index: 81)]:l

raw : DW_LINE: [0,0] 62 
fmt : DW_LINE [0,0]: 65

raw : M68K_LIST: [10,10] 10000 [movel] {1fc, cdd6} [.LC0(index: 94)] [panicstr(index: 92)] 
fmt : M68K_LIST [10,10]: 0000000000000000000000001 movel: #[.LC0(index: 148)],[panicstr(index: 146)]

raw : DW_LINE: [0,0] 63 
fmt : DW_LINE [0,0]: 66

raw : M68K_GEN: [6,6] 4879101a {1fc8} [.LC1(index: 95)] 
fmt : M68K_GEN [6,6]: 4879: [.LC1(index: 95)]:l

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [puts(index: 88)] 
fmt : M68K_GEN [4,4]: 4eba: [puts(index: 88)]

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : DW_LINE: [0,0] 64 
fmt : DW_LINE [0,0]: 67

raw : M68K_GEN: [4,4] 2f2e1000 {445, 8} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [puts(index: 88)] 
fmt : M68K_GEN [4,4]: 4eba: [puts(index: 88)]

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : DW_LINE: [0,0] 65 
fmt : DW_LINE [0,0]: 68

raw : M68K_GEN: [8,8] 23ee1000 {c845, fffc} [console_out(index: 81)] 
fmt : M68K_GEN [8,8]: 23ee: a6@(fffffffc),[console_out(index: 81)]:l

raw : DW_LINE: [0,0] 66 
fmt : DW_LINE [0,0]: 70

raw : M68K_GEN: [8,8] 23ee1000 {c845, 8} [panicstr(index: 92)] 
fmt : M68K_GEN [8,8]: 23ee: a6@(8),[panicstr(index: 92)]:l

raw : DW_LINE: [0,0] 67 
fmt : DW_LINE [0,0]: 71

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [abort(index: 7)] 
fmt : M68K_GEN [4,4]: 4eba: [abort(index: 7)]

raw : LABEL: [0,0] 500050 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 68 
fmt : DW_LINE [0,0]: 62

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : DW_LINE: [0,0] 69 
fmt : DW_LINE [0,0]: 72

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] 560056 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 21 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] 560056 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 96 cx[21](0+ca(.text+63e)-ca(.text+5e8)) 
fmt : SIZE [0,0]: cx[21](0+ca(.text+63e)-ca(.text+5e8))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 6a 
fmt : DW_LINE [0,0]: 76

raw : DW_START_FRAME: [0,0] 22 
fmt : DW_START_FRAME [0,0]: 

raw : M68K_GEN: [4,4] 4e561026 {5a01, fff4} 
fmt : M68K_GEN [4,4]: 4e56: a6,#fffffff4

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : DW_FRAME_CMD: [0,0] 45 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_FRAME_CMD: [0,0] 46 
fmt : DW_FRAME_CMD [0,0]: 

raw : DW_LINE: [0,0] 6b 
fmt : DW_LINE [0,0]: 77

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [__display_current_proc(index: 9c)] 
fmt : M68K_GEN [6,6]: 4eb9: [__display_current_proc(index: 9c)]:l

raw : DW_LINE: [0,0] 6c 
fmt : DW_LINE [0,0]: 78

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [4,4] 67001021 [.L66(index: 9d)] 
fmt : M68K_BRANCH [4,4]: 

raw : LABEL: [0,0] 160016 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 6d 
fmt : DW_LINE [0,0]: 83

raw : M68K_BRANCH: [2,2] 60001021 [.L67(index: 9f)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 180018 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 6e 
fmt : DW_LINE [0,0]: 84

raw : M68K_GEN: [6,6] 20791000 {1c8} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 2079: [sys_queue_head(index: a2)]:l,a0

raw : M68K_GEN: [2,2] 20081000 {1} 
fmt : M68K_GEN [2,2]: 2008: a0,d0

raw : M68K_GEN: [2,2] 5880101b {13} 
fmt : M68K_GEN [2,2]: 5880: #4,d0

raw : M68K_GEN: [6,6] 23c01000 {c800} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 23c0: d0,[sys_queue_head(index: a2)]:l

raw : M68K_GEN: [4,4] 2d501000 {4502, fff8} 
fmt : M68K_GEN [4,4]: 2d50: a0@,a6@(fffffff8)

raw : DW_LINE: [0,0] 6f 
fmt : DW_LINE [0,0]: 85

raw : M68K_GEN: [6,6] 20791000 {1c8} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 2079: [sys_queue_head(index: a2)]:l,a0

raw : M68K_GEN: [2,2] 20081000 {1} 
fmt : M68K_GEN [2,2]: 2008: a0,d0

raw : M68K_GEN: [2,2] 5880101b {13} 
fmt : M68K_GEN [2,2]: 5880: #4,d0

raw : M68K_GEN: [6,6] 23c01000 {c800} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 23c0: d0,[sys_queue_head(index: a2)]:l

raw : M68K_GEN: [4,4] 2d501000 {4502, fff4} 
fmt : M68K_GEN [4,4]: 2d50: a0@,a6@(fffffff4)

raw : DW_LINE: [0,0] 70 
fmt : DW_LINE [0,0]: 86

raw : M68K_GEN: [6,6] 20391000 {c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2039: [console_out(index: 81)]:l,d0

raw : M68K_GEN: [4,4] b0ae1017 {45, fff8} 
fmt : M68K_GEN [4,4]: b0ae: a6@(fffffff8),d0

raw : M68K_BRANCH: [2,2] 66001021 [.L68(index: a3)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 71 
fmt : DW_LINE [0,0]: 87

raw : M68K_GEN: [4,4] 2f2e1000 {445, fff4} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(fffffff4),a7@-

raw : M68K_GEN: [4,4] 2f2e1000 {445, fff8} 
fmt : M68K_GEN [4,4]: 2f2e: a6@(fffffff8),a7@-

raw : M68K_GEN: [4,4] 4eba101a {1fcc} [exec(index: 7b)] 
fmt : M68K_GEN [4,4]: 4eba: [exec(index: 7b)]

raw : M68K_GEN: [2,2] 508f101b {113} 
fmt : M68K_GEN [2,2]: 508f: #8,a7

raw : LABEL: [0,0] 5a005a 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 72 
fmt : DW_LINE [0,0]: 88

raw : M68K_GEN: [6,6] 20391000 {c8} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 2039: [sys_queue_head(index: a2)]:l,d0

raw : M68K_GEN: [6,6] c801016 {d6} [sys_queue_tail(index: a4)] 
fmt : M68K_GEN [6,6]: c80: #[sys_queue_tail(index: a4)],d0

raw : M68K_BRANCH: [2,2] 66001021 [.L67(index: 9f)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 73 
fmt : DW_LINE [0,0]: 89

raw : M68K_LIST: [10,10] 10000 [movel] {1fc, cdd6} [sys_queue_table(index: a5)] [sys_queue_head(index: a2)] 
fmt : M68K_LIST [10,10]: 0000000000000000000000001 movel: #[sys_queue_table(index: 165)],[sys_queue_head(index: 162)]

raw : LABEL: [0,0] 720072 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 720072 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 74 
fmt : DW_LINE [0,0]: 83

raw : M68K_GEN: [6,6] 22391000 {c8} [sys_queue_head(index: a2)] 
fmt : M68K_GEN [6,6]: 2239: [sys_queue_head(index: a2)]:l,d1

raw : M68K_GEN: [6,6] 20391000 {c8} [sys_queue_tail(index: a4)] 
fmt : M68K_GEN [6,6]: 2039: [sys_queue_tail(index: a4)]:l,d0

raw : M68K_GEN: [2,2] b0811017 {0} 
fmt : M68K_GEN [2,2]: b081: d1,d0

raw : M68K_BRANCH: [2,2] 66001021 [.L69(index: a0)] 
fmt : M68K_BRANCH [2,2]: 

raw : DW_LINE: [0,0] 75 
fmt : DW_LINE [0,0]: 92

raw : M68K_GEN: [8,8] 2d7c1000 {4556, 0, 2710, fffc} 
fmt : M68K_GEN [8,8]: 2d7c: #2710,a6@(fffffffc)

raw : DW_LINE: [0,0] 76 
fmt : DW_LINE [0,0]: 93

raw : M68K_BRANCH: [2,2] 60001021 [.L70(index: a7)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] 8c008c 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] 8c008c 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 77 
fmt : DW_LINE [0,0]: 94

raw : M68K_GEN: [6,6] 20791000 {1c8} [console_out(index: 81)] 
fmt : M68K_GEN [6,6]: 2079: [console_out(index: 81)]:l,a0

raw : M68K_GEN: [4,4] 20281000 {45, 4} 
fmt : M68K_GEN [4,4]: 2028: a0@(4),d0

raw : M68K_GEN: [2,2] 2f001000 {400} 
fmt : M68K_GEN [2,2]: 2f00: d0,a7@-

raw : M68K_GEN: [6,6] 4eb9101a {1fc8} [atx_idle(index: aa)] 
fmt : M68K_GEN [6,6]: 4eb9: [atx_idle(index: aa)]:l

raw : M68K_GEN: [2,2] 588f101b {113} 
fmt : M68K_GEN [2,2]: 588f: #4,a7

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [2,2] 66001021 [.L72(index: ab)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] a400a4 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] a400a4 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 78 
fmt : DW_LINE [0,0]: 93

raw : M68K_GEN: [4,4] 202e1000 {45, fffc} 
fmt : M68K_GEN [4,4]: 202e: a6@(fffffffc),d0

raw : M68K_GEN: [2,2] 22001000 {0} 
fmt : M68K_GEN [2,2]: 2200: d0,d1

raw : M68K_GEN: [2,2] 5381101b {13} 
fmt : M68K_GEN [2,2]: 5381: #1,d1

raw : M68K_GEN: [4,4] 2d411000 {4500, fffc} 
fmt : M68K_GEN [4,4]: 2d41: d1,a6@(fffffffc)

raw : M68K_GEN: [2,2] 4a80101a {1f00} 
fmt : M68K_GEN [2,2]: 4a80: d0

raw : M68K_BRANCH: [2,2] 66001021 [.L71(index: a8)] 
fmt : M68K_BRANCH [2,2]: 

raw : M68K_BRANCH: [2,2] 60001021 [.L66(index: 9d)] 
fmt : M68K_BRANCH [2,2]: 

raw : LABEL: [0,0] b600b6 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] b600b6 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 79 
fmt : DW_LINE [0,0]: 95

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : LABEL: [0,0] b800b8 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] b800b8 
fmt : LABEL [0,0]: 

raw : LABEL: [0,0] b800b8 
fmt : LABEL [0,0]: 

raw : DW_LINE: [0,0] 7a 
fmt : DW_LINE [0,0]: 98

raw : ERROR: [0,0] 5 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : M68K_GEN: [2,2] 4afc1023 
fmt : M68K_GEN [2,2]: 4afc

raw : ERROR: [0,0] 6 
fmt : ERROR [0,0]: ERROR: Expecting: Opcode or Label


raw : DW_LINE: [0,0] 7b 
fmt : DW_LINE [0,0]: 99

raw : M68K_GEN: [2,2] 4e711023 
fmt : M68K_GEN [2,2]: 4e71

raw : M68K_GEN: [2,2] 4e5e1026 {1f01} 
fmt : M68K_GEN [2,2]: 4e5e: a6

raw : M68K_GEN: [2,2] 4e751023 
fmt : M68K_GEN [2,2]: 4e75

raw : LABEL: [0,0] c000c0 
fmt : LABEL [0,0]: 

raw : DW_END_FRAME: [0,0] 22 
fmt : DW_END_FRAME [0,0]: 

raw : LABEL: [0,0] c000c0 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 9a cx[22](0+ca(.text+6fe)-ca(.text+63e)) 
fmt : SIZE [0,0]: cx[22](0+ca(.text+6fe)-ca(.text+63e))

raw : LABEL: [0,0] c000c0 
fmt : LABEL [0,0]: 

raw : DW_FILE: [0,0] 6 
fmt : DW_FILE [0,0]: 6 : "types.h"

raw : DW_FILE: [0,0] 7 
fmt : DW_FILE [0,0]: 7 : "caos.h"

raw : SEG: [0,0] 4 
fmt : SEG [0,0]: 4 .debug_info:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 9b7 
fmt : INT<4> [4,4]: 2487 

raw : INT<2>: [2,2] 10004 
fmt : INT<2> [2,2]: 4 

raw : INT<4>: [4,4] 0 [.Ldebug_abbrev0(index: b4)] 
fmt : INT<4> [4,4]: [.Ldebug_abbrev0(index: 180)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<4>: [4,4] 0 [.LASF68(index: b5)] 
fmt : INT<4> [4,4]: [.LASF68(index: 181)] 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<4>: [4,4] 0 [.LASF69(index: b6)] 
fmt : INT<4> [4,4]: [.LASF69(index: 182)] 

raw : INT<4>: [4,4] 0 [.LASF70(index: b7)] 
fmt : INT<4> [4,4]: [.LASF70(index: 183)] 

raw : INT<4>: [4,4] 0 [.Ltext0(index: 2)] 
fmt : INT<4> [4,4]: [.Ltext0(index: 2)] 

raw : INT<4>: [4,4] 0 cx[23](0+ca(.text+6fe)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[35](0+ca(.text+6fe)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 [.Ldebug_line0(index: b8)] 
fmt : INT<4> [4,4]: [.Ldebug_line0(index: 184)] 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<4>: [4,4] 0 [.LASF0(index: b9)] 
fmt : INT<4> [4,4]: [.LASF0(index: 185)] 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : INT<4>: [4,4] 0 [.LASF2(index: ba)] 
fmt : INT<4> [4,4]: [.LASF2(index: 186)] 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : INT<1>: [1,1] 1000021 
fmt : INT<1> [1,1]: 33 

raw : INT<4>: [4,4] 37 
fmt : INT<4> [4,4]: 55 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<4>: [4,4] 0 [.LASF1(index: bb)] 
fmt : INT<4> [4,4]: [.LASF1(index: 187)] 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : INT<4>: [4,4] 0 [.LASF3(index: bc)] 
fmt : INT<4> [4,4]: [.LASF3(index: 188)] 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : INT<4>: [4,4] 0 [.LASF4(index: bd)] 
fmt : INT<4> [4,4]: [.LASF4(index: 189)] 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : INT<4>: [4,4] 0 [.LASF5(index: be)] 
fmt : INT<4> [4,4]: [.LASF5(index: 190)] 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : INT<1>: [1,1] 1000024 
fmt : INT<1> [1,1]: 36 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<4>: [4,4] 0 [.LASF6(index: bf)] 
fmt : INT<4> [4,4]: [.LASF6(index: 191)] 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : INT<4>: [4,4] 0 [.LASF7(index: c0)] 
fmt : INT<4> [4,4]: [.LASF7(index: 192)] 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 6f 
fmt : INT<4> [4,4]: 111 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000007 
fmt : ULEB128 [1,1]: 7 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : STR<1>: [4,4] 3746e69 {0} 
fmt : STR<1> [4,4]: 105 110 116 0 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : INT<4>: [4,4] 0 [.LASF8(index: c1)] 
fmt : INT<4> [4,4]: [.LASF8(index: 193)] 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : INT<1>: [1,1] 100002d 
fmt : INT<1> [1,1]: 45 

raw : INT<4>: [4,4] 8a 
fmt : INT<4> [4,4]: 138 

raw : ULEB128: [1,1] 1000009 
fmt : ULEB128 [1,1]: 9 

raw : INT<4>: [4,4] 0 [.LASF13(index: c2)] 
fmt : INT<4> [4,4]: [.LASF13(index: 194)] 

raw : INT<1>: [1,1] 1000010 
fmt : INT<1> [1,1]: 16 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 100001c 
fmt : INT<1> [1,1]: 28 

raw : INT<4>: [4,4] c6 
fmt : INT<4> [4,4]: 198 

raw : ULEB128: [1,1] 100000a 
fmt : ULEB128 [1,1]: 10 

raw : STR<1>: [3,3] 3006e66 
fmt : STR<1> [3,3]: 102 110 0 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 100001d 
fmt : INT<1> [1,1]: 29 

raw : INT<4>: [4,4] 69 
fmt : INT<4> [4,4]: 105 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF9(index: c3)] 
fmt : INT<4> [4,4]: [.LASF9(index: 195)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 100001e 
fmt : INT<1> [1,1]: 30 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF10(index: c4)] 
fmt : INT<4> [4,4]: [.LASF10(index: 196)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 17a 
fmt : INT<4> [4,4]: 378 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF11(index: c5)] 
fmt : INT<4> [4,4]: [.LASF11(index: 197)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 17a 
fmt : INT<4> [4,4]: 378 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : INT<4>: [4,4] 0 [.LASF12(index: c6)] 
fmt : INT<4> [4,4]: [.LASF12(index: 198)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000029 
fmt : INT<1> [1,1]: 41 

raw : INT<4>: [4,4] d1 
fmt : INT<4> [4,4]: 209 

raw : ULEB128: [1,1] 100000c 
fmt : ULEB128 [1,1]: 12 

raw : INT<4>: [4,4] 0 [.LASF14(index: c7)] 
fmt : INT<4> [4,4]: [.LASF14(index: 199)] 

raw : INT<2>: [2,2] 10300 
fmt : INT<2> [2,2]: 768 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000034 
fmt : INT<1> [1,1]: 52 

raw : INT<4>: [4,4] f5 
fmt : INT<4> [4,4]: 245 

raw : ULEB128: [1,1] 100000a 
fmt : ULEB128 [1,1]: 10 

raw : STR<1>: [2,2] 2000068 
fmt : STR<1> [2,2]: 104 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000035 
fmt : INT<1> [1,1]: 53 

raw : INT<4>: [4,4] f5 
fmt : INT<4> [4,4]: 245 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF15(index: c8)] 
fmt : INT<4> [4,4]: [.LASF15(index: 200)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000036 
fmt : INT<1> [1,1]: 54 

raw : INT<4>: [4,4] 162 
fmt : INT<4> [4,4]: 354 

raw : INT<1>: [1,1] 1000010 
fmt : INT<1> [1,1]: 16 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000009 
fmt : ULEB128 [1,1]: 9 

raw : INT<4>: [4,4] 0 [.LASF16(index: c9)] 
fmt : INT<4> [4,4]: [.LASF16(index: 201)] 

raw : INT<1>: [1,1] 1000010 
fmt : INT<1> [1,1]: 16 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100002e 
fmt : INT<1> [1,1]: 46 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF17(index: ca)] 
fmt : INT<4> [4,4]: [.LASF17(index: 202)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100002f 
fmt : INT<1> [1,1]: 47 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF18(index: cb)] 
fmt : INT<4> [4,4]: [.LASF18(index: 203)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100002f 
fmt : INT<1> [1,1]: 47 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : ULEB128: [1,1] 100000a 
fmt : ULEB128 [1,1]: 10 

raw : STR<1>: [3,3] 3007772 
fmt : STR<1> [3,3]: 114 119 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100002f 
fmt : INT<1> [1,1]: 47 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF19(index: cc)] 
fmt : INT<4> [4,4]: [.LASF19(index: 204)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000030 
fmt : INT<1> [1,1]: 48 

raw : INT<4>: [4,4] 3e 
fmt : INT<4> [4,4]: 62 

raw : INT<1>: [1,1] 1000006 
fmt : INT<1> [1,1]: 6 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF20(index: cd)] 
fmt : INT<4> [4,4]: [.LASF20(index: 205)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000030 
fmt : INT<1> [1,1]: 48 

raw : INT<4>: [4,4] 3e 
fmt : INT<4> [4,4]: 62 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF21(index: ce)] 
fmt : INT<4> [4,4]: [.LASF21(index: 206)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000031 
fmt : INT<1> [1,1]: 49 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<4>: [4,4] 0 [.LASF22(index: cf)] 
fmt : INT<4> [4,4]: [.LASF22(index: 207)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000031 
fmt : INT<1> [1,1]: 49 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<4>: [4,4] 0 [.LASF23(index: d0)] 
fmt : INT<4> [4,4]: [.LASF23(index: 208)] 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] c6 
fmt : INT<4> [4,4]: 198 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : INT<4>: [4,4] 173 
fmt : INT<4> [4,4]: 371 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : INT<4>: [4,4] 173 
fmt : INT<4> [4,4]: 371 

raw : INT<2>: [2,2] 102ef 
fmt : INT<2> [2,2]: 751 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<4>: [4,4] 0 [.LASF24(index: d1)] 
fmt : INT<4> [4,4]: [.LASF24(index: 209)] 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 180 
fmt : INT<4> [4,4]: 384 

raw : ULEB128: [1,1] 100000f 
fmt : ULEB128 [1,1]: 15 

raw : INT<4>: [4,4] 62 
fmt : INT<4> [4,4]: 98 

raw : ULEB128: [1,1] 1000010 
fmt : ULEB128 [1,1]: 16 

raw : STR<1>: [4,4] 36b6863 {0} 
fmt : STR<1> [4,4]: 99 104 107 0 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 0 [.LFB0(index: 5)] 
fmt : INT<4> [4,4]: [.LFB0(index: 5)] 

raw : INT<4>: [4,4] 0 cx[24](0+ca(.text+22)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[36](0+ca(.text+22)-ca(.text+0)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 1b7 
fmt : INT<4> [4,4]: 439 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : INT<4>: [4,4] 0 [.LASF15(index: c8)] 
fmt : INT<4> [4,4]: [.LASF15(index: 200)] 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 50 
fmt : INT<4> [4,4]: 80 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : INT<4>: [4,4] 0 [.LASF25(index: d2)] 
fmt : INT<4> [4,4]: [.LASF25(index: 210)] 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 50 
fmt : INT<4> [4,4]: 80 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : INT<4>: [4,4] 0 [.LASF71(index: d3)] 
fmt : INT<4> [4,4]: [.LASF71(index: 211)] 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<4>: [4,4] 0 [.LFB2(index: 8)] 
fmt : INT<4> [4,4]: [.LFB2(index: 8)] 

raw : INT<4>: [4,4] 0 cx[25](0+ca(.text+2e)-ca(.text+22)) 
fmt : INT<4> [4,4]: cx[37](0+ca(.text+2e)-ca(.text+22)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<4>: [4,4] 0 [.LASF22(index: cf)] 
fmt : INT<4> [4,4]: [.LASF22(index: 207)] 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000056 
fmt : INT<1> [1,1]: 86 

raw : INT<4>: [4,4] 0 [.LFB5(index: c)] 
fmt : INT<4> [4,4]: [.LFB5(index: 12)] 

raw : INT<4>: [4,4] 0 cx[26](0+ca(.text+64)-ca(.text+2e)) 
fmt : INT<4> [4,4]: cx[38](0+ca(.text+64)-ca(.text+2e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 213 
fmt : INT<4> [4,4]: 531 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : INT<4>: [4,4] 0 [.LASF13(index: c2)] 
fmt : INT<4> [4,4]: [.LASF13(index: 194)] 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000056 
fmt : INT<1> [1,1]: 86 

raw : INT<4>: [4,4] 213 
fmt : INT<4> [4,4]: 531 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [4,4] 3677261 {0} 
fmt : STR<1> [4,4]: 97 114 103 0 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000056 
fmt : INT<1> [1,1]: 86 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000004 
fmt : SLEB128 [1,1]: 4 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000058 
fmt : INT<1> [1,1]: 88 

raw : INT<4>: [4,4] 21e 
fmt : INT<4> [4,4]: 542 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 1000050 
fmt : INT<1> [1,1]: 80 

raw : ULEB128: [1,1] 1000016 
fmt : ULEB128 [1,1]: 22 

raw : INT<4>: [4,4] 0 [.LASF26(index: d4)] 
fmt : INT<4> [4,4]: [.LASF26(index: 212)] 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 1000059 
fmt : INT<1> [1,1]: 89 

raw : INT<4>: [4,4] 21e 
fmt : INT<4> [4,4]: 542 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 1000051 
fmt : INT<1> [1,1]: 81 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 219 
fmt : INT<4> [4,4]: 537 

raw : ULEB128: [1,1] 100000f 
fmt : ULEB128 [1,1]: 15 

raw : INT<4>: [4,4] 7f 
fmt : INT<4> [4,4]: 127 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 224 
fmt : INT<4> [4,4]: 548 

raw : ULEB128: [1,1] 1000017 
fmt : ULEB128 [1,1]: 23 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<4>: [4,4] 0 [.LASF34(index: d5)] 
fmt : INT<4> [4,4]: [.LASF34(index: 213)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008c 
fmt : INT<1> [1,1]: 140 

raw : INT<4>: [4,4] 0 [.LFB7(index: 13)] 
fmt : INT<4> [4,4]: [.LFB7(index: 19)] 

raw : INT<4>: [4,4] 0 cx[27](0+ca(.text+9e)-ca(.text+64)) 
fmt : INT<4> [4,4]: cx[39](0+ca(.text+9e)-ca(.text+64)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 247 
fmt : INT<4> [4,4]: 583 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008c 
fmt : INT<1> [1,1]: 140 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF27(index: d6)] 
fmt : INT<4> [4,4]: [.LASF27(index: 214)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : INT<4>: [4,4] 0 [.LFB8(index: 19)] 
fmt : INT<4> [4,4]: [.LFB8(index: 25)] 

raw : INT<4>: [4,4] 0 cx[28](0+ca(.text+bc)-ca(.text+9e)) 
fmt : INT<4> [4,4]: cx[40](0+ca(.text+bc)-ca(.text+9e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 26d 
fmt : INT<4> [4,4]: 621 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF28(index: d7)] 
fmt : INT<4> [4,4]: [.LASF28(index: 215)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008f 
fmt : INT<1> [1,1]: 143 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB9(index: 1c)] 
fmt : INT<4> [4,4]: [.LFB9(index: 28)] 

raw : INT<4>: [4,4] 0 cx[29](0+ca(.text+d4)-ca(.text+bc)) 
fmt : INT<4> [4,4]: cx[41](0+ca(.text+d4)-ca(.text+bc)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 293 
fmt : INT<4> [4,4]: 659 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100008f 
fmt : INT<1> [1,1]: 143 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF29(index: d8)] 
fmt : INT<4> [4,4]: [.LASF29(index: 216)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000090 
fmt : INT<1> [1,1]: 144 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB10(index: 1f)] 
fmt : INT<4> [4,4]: [.LFB10(index: 31)] 

raw : INT<4>: [4,4] 0 cx[2a](0+ca(.text+f8)-ca(.text+d4)) 
fmt : INT<4> [4,4]: cx[42](0+ca(.text+f8)-ca(.text+d4)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 2b9 
fmt : INT<4> [4,4]: 697 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000090 
fmt : INT<1> [1,1]: 144 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF30(index: d9)] 
fmt : INT<4> [4,4]: [.LASF30(index: 217)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : INT<4>: [4,4] 0 [.LFB11(index: 22)] 
fmt : INT<4> [4,4]: [.LFB11(index: 34)] 

raw : INT<4>: [4,4] 0 cx[2b](0+ca(.text+116)-ca(.text+f8)) 
fmt : INT<4> [4,4]: cx[43](0+ca(.text+116)-ca(.text+f8)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 2df 
fmt : INT<4> [4,4]: 735 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF31(index: da)] 
fmt : INT<4> [4,4]: [.LASF31(index: 218)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000092 
fmt : INT<1> [1,1]: 146 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB12(index: 25)] 
fmt : INT<4> [4,4]: [.LFB12(index: 37)] 

raw : INT<4>: [4,4] 0 cx[2c](0+ca(.text+148)-ca(.text+116)) 
fmt : INT<4> [4,4]: cx[44](0+ca(.text+148)-ca(.text+116)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 311 
fmt : INT<4> [4,4]: 785 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000092 
fmt : INT<1> [1,1]: 146 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 200006e 
fmt : STR<1> [2,2]: 110 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000092 
fmt : INT<1> [1,1]: 146 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF32(index: db)] 
fmt : INT<4> [4,4]: [.LASF32(index: 219)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000094 
fmt : INT<1> [1,1]: 148 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB13(index: 28)] 
fmt : INT<4> [4,4]: [.LFB13(index: 40)] 

raw : INT<4>: [4,4] 0 cx[2d](0+ca(.text+160)-ca(.text+148)) 
fmt : INT<4> [4,4]: cx[45](0+ca(.text+160)-ca(.text+148)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 337 
fmt : INT<4> [4,4]: 823 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000094 
fmt : INT<1> [1,1]: 148 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF33(index: dc)] 
fmt : INT<4> [4,4]: [.LASF33(index: 220)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000095 
fmt : INT<1> [1,1]: 149 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB14(index: 2b)] 
fmt : INT<4> [4,4]: [.LFB14(index: 43)] 

raw : INT<4>: [4,4] 0 cx[2e](0+ca(.text+188)-ca(.text+160)) 
fmt : INT<4> [4,4]: cx[46](0+ca(.text+188)-ca(.text+160)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 369 
fmt : INT<4> [4,4]: 873 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000095 
fmt : INT<1> [1,1]: 149 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 200006e 
fmt : STR<1> [2,2]: 110 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000095 
fmt : INT<1> [1,1]: 149 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF35(index: dd)] 
fmt : INT<4> [4,4]: [.LASF35(index: 221)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000097 
fmt : INT<1> [1,1]: 151 

raw : INT<4>: [4,4] 0 [.LFB15(index: 2e)] 
fmt : INT<4> [4,4]: [.LFB15(index: 46)] 

raw : INT<4>: [4,4] 0 cx[2f](0+ca(.text+1a2)-ca(.text+188)) 
fmt : INT<4> [4,4]: cx[47](0+ca(.text+1a2)-ca(.text+188)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 38b 
fmt : INT<4> [4,4]: 907 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000097 
fmt : INT<1> [1,1]: 151 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF36(index: de)] 
fmt : INT<4> [4,4]: [.LASF36(index: 222)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000098 
fmt : INT<1> [1,1]: 152 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : INT<4>: [4,4] 0 [.LFB16(index: 31)] 
fmt : INT<4> [4,4]: [.LFB16(index: 49)] 

raw : INT<4>: [4,4] 0 cx[30](0+ca(.text+1be)-ca(.text+1a2)) 
fmt : INT<4> [4,4]: cx[48](0+ca(.text+1be)-ca(.text+1a2)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 3b1 
fmt : INT<4> [4,4]: 945 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000098 
fmt : INT<1> [1,1]: 152 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF37(index: df)] 
fmt : INT<4> [4,4]: [.LASF37(index: 223)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000099 
fmt : INT<1> [1,1]: 153 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : INT<4>: [4,4] 0 [.LFB17(index: 34)] 
fmt : INT<4> [4,4]: [.LFB17(index: 52)] 

raw : INT<4>: [4,4] 0 cx[31](0+ca(.text+1d8)-ca(.text+1be)) 
fmt : INT<4> [4,4]: cx[49](0+ca(.text+1d8)-ca(.text+1be)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 3d7 
fmt : INT<4> [4,4]: 983 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000099 
fmt : INT<1> [1,1]: 153 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF38(index: e0)] 
fmt : INT<4> [4,4]: [.LASF38(index: 224)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009a 
fmt : INT<1> [1,1]: 154 

raw : INT<4>: [4,4] 0 [.LFB18(index: 37)] 
fmt : INT<4> [4,4]: [.LFB18(index: 55)] 

raw : INT<4>: [4,4] 0 cx[32](0+ca(.text+202)-ca(.text+1d8)) 
fmt : INT<4> [4,4]: cx[50](0+ca(.text+202)-ca(.text+1d8)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 405 
fmt : INT<4> [4,4]: 1029 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009a 
fmt : INT<1> [1,1]: 154 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000069 
fmt : STR<1> [2,2]: 105 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009a 
fmt : INT<1> [1,1]: 154 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF39(index: e1)] 
fmt : INT<4> [4,4]: [.LASF39(index: 225)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009b 
fmt : INT<1> [1,1]: 155 

raw : INT<4>: [4,4] 0 [.LFB19(index: 3a)] 
fmt : INT<4> [4,4]: [.LFB19(index: 58)] 

raw : INT<4>: [4,4] 0 cx[33](0+ca(.text+228)-ca(.text+202)) 
fmt : INT<4> [4,4]: cx[51](0+ca(.text+228)-ca(.text+202)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 433 
fmt : INT<4> [4,4]: 1075 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009b 
fmt : INT<1> [1,1]: 155 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000069 
fmt : STR<1> [2,2]: 105 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009b 
fmt : INT<1> [1,1]: 155 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<4>: [4,4] 0 [.LASF40(index: e2)] 
fmt : INT<4> [4,4]: [.LASF40(index: 226)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 0 [.LFB20(index: 3d)] 
fmt : INT<4> [4,4]: [.LFB20(index: 61)] 

raw : INT<4>: [4,4] 0 cx[34](0+ca(.text+26a)-ca(.text+228)) 
fmt : INT<4> [4,4]: cx[52](0+ca(.text+26a)-ca(.text+228)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 461 
fmt : INT<4> [4,4]: 1121 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000069 
fmt : STR<1> [2,2]: 105 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007e 
fmt : SLEB128 [1,1]: 126 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF41(index: e3)] 
fmt : INT<4> [4,4]: [.LASF41(index: 227)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a0 
fmt : INT<1> [1,1]: 160 

raw : INT<4>: [4,4] 0 [.LFB21(index: 40)] 
fmt : INT<4> [4,4]: [.LFB21(index: 64)] 

raw : INT<4>: [4,4] 0 cx[35](0+ca(.text+2a2)-ca(.text+26a)) 
fmt : INT<4> [4,4]: cx[53](0+ca(.text+2a2)-ca(.text+26a)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 4a6 
fmt : INT<4> [4,4]: 1190 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a0 
fmt : INT<1> [1,1]: 160 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a0 
fmt : INT<1> [1,1]: 160 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB2(index: 41)] 
fmt : INT<4> [4,4]: [.LBB2(index: 65)] 

raw : INT<4>: [4,4] 0 cx[36](0+ca(.text+29c)-ca(.text+276)) 
fmt : INT<4> [4,4]: cx[54](0+ca(.text+29c)-ca(.text+276)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a0 
fmt : INT<1> [1,1]: 160 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF42(index: e4)] 
fmt : INT<4> [4,4]: [.LASF42(index: 228)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a1 
fmt : INT<1> [1,1]: 161 

raw : INT<4>: [4,4] 0 [.LFB22(index: 45)] 
fmt : INT<4> [4,4]: [.LFB22(index: 69)] 

raw : INT<4>: [4,4] 0 cx[37](0+ca(.text+2dc)-ca(.text+2a2)) 
fmt : INT<4> [4,4]: cx[55](0+ca(.text+2dc)-ca(.text+2a2)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 4eb 
fmt : INT<4> [4,4]: 1259 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a1 
fmt : INT<1> [1,1]: 161 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a1 
fmt : INT<1> [1,1]: 161 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB3(index: 46)] 
fmt : INT<4> [4,4]: [.LBB3(index: 70)] 

raw : INT<4>: [4,4] 0 cx[38](0+ca(.text+2d6)-ca(.text+2ae)) 
fmt : INT<4> [4,4]: cx[56](0+ca(.text+2d6)-ca(.text+2ae)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a1 
fmt : INT<1> [1,1]: 161 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF43(index: e5)] 
fmt : INT<4> [4,4]: [.LASF43(index: 229)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a2 
fmt : INT<1> [1,1]: 162 

raw : INT<4>: [4,4] 0 [.LFB23(index: 4a)] 
fmt : INT<4> [4,4]: [.LFB23(index: 74)] 

raw : INT<4>: [4,4] 0 cx[39](0+ca(.text+30e)-ca(.text+2dc)) 
fmt : INT<4> [4,4]: cx[57](0+ca(.text+30e)-ca(.text+2dc)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 530 
fmt : INT<4> [4,4]: 1328 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a2 
fmt : INT<1> [1,1]: 162 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a2 
fmt : INT<1> [1,1]: 162 

raw : INT<4>: [4,4] 25 
fmt : INT<4> [4,4]: 37 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000004 
fmt : SLEB128 [1,1]: 4 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB4(index: 4b)] 
fmt : INT<4> [4,4]: [.LBB4(index: 75)] 

raw : INT<4>: [4,4] 0 cx[3a](0+ca(.text+308)-ca(.text+2e0)) 
fmt : INT<4> [4,4]: cx[58](0+ca(.text+308)-ca(.text+2e0)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a2 
fmt : INT<1> [1,1]: 162 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF44(index: e6)] 
fmt : INT<4> [4,4]: [.LASF44(index: 230)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a4 
fmt : INT<1> [1,1]: 164 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : INT<4>: [4,4] 0 [.LFB24(index: 4f)] 
fmt : INT<4> [4,4]: [.LFB24(index: 79)] 

raw : INT<4>: [4,4] 0 cx[3b](0+ca(.text+346)-ca(.text+30e)) 
fmt : INT<4> [4,4]: cx[59](0+ca(.text+346)-ca(.text+30e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 579 
fmt : INT<4> [4,4]: 1401 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a4 
fmt : INT<1> [1,1]: 164 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB5(index: 50)] 
fmt : INT<4> [4,4]: [.LBB5(index: 80)] 

raw : INT<4>: [4,4] 0 cx[3c](0+ca(.text+342)-ca(.text+312)) 
fmt : INT<4> [4,4]: cx[60](0+ca(.text+342)-ca(.text+312)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a5 
fmt : INT<1> [1,1]: 165 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a5 
fmt : INT<1> [1,1]: 165 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007b 
fmt : SLEB128 [1,1]: 123 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF45(index: e7)] 
fmt : INT<4> [4,4]: [.LASF45(index: 231)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a6 
fmt : INT<1> [1,1]: 166 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : INT<4>: [4,4] 0 [.LFB25(index: 54)] 
fmt : INT<4> [4,4]: [.LFB25(index: 84)] 

raw : INT<4>: [4,4] 0 cx[3d](0+ca(.text+380)-ca(.text+346)) 
fmt : INT<4> [4,4]: cx[61](0+ca(.text+380)-ca(.text+346)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 5c2 
fmt : INT<4> [4,4]: 1474 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a6 
fmt : INT<1> [1,1]: 166 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB6(index: 55)] 
fmt : INT<4> [4,4]: [.LBB6(index: 85)] 

raw : INT<4>: [4,4] 0 cx[3e](0+ca(.text+37c)-ca(.text+34a)) 
fmt : INT<4> [4,4]: cx[62](0+ca(.text+37c)-ca(.text+34a)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a7 
fmt : INT<1> [1,1]: 167 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a7 
fmt : INT<1> [1,1]: 167 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF46(index: e8)] 
fmt : INT<4> [4,4]: [.LASF46(index: 232)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a8 
fmt : INT<1> [1,1]: 168 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : INT<4>: [4,4] 0 [.LFB26(index: 59)] 
fmt : INT<4> [4,4]: [.LFB26(index: 89)] 

raw : INT<4>: [4,4] 0 cx[3f](0+ca(.text+3ba)-ca(.text+380)) 
fmt : INT<4> [4,4]: cx[63](0+ca(.text+3ba)-ca(.text+380)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a8 
fmt : INT<1> [1,1]: 168 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB7(index: 5a)] 
fmt : INT<4> [4,4]: [.LBB7(index: 90)] 

raw : INT<4>: [4,4] 0 cx[40](0+ca(.text+3b6)-ca(.text+384)) 
fmt : INT<4> [4,4]: cx[64](0+ca(.text+3b6)-ca(.text+384)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a9 
fmt : INT<1> [1,1]: 169 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000a9 
fmt : INT<1> [1,1]: 169 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 1000078 
fmt : SLEB128 [1,1]: 120 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<4>: [4,4] 0 [.LASF47(index: e9)] 
fmt : INT<4> [4,4]: [.LASF47(index: 233)] 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF48(index: ea)] 
fmt : INT<4> [4,4]: [.LASF48(index: 234)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ab 
fmt : INT<1> [1,1]: 171 

raw : INT<4>: [4,4] 0 [.LFB27(index: 5e)] 
fmt : INT<4> [4,4]: [.LFB27(index: 94)] 

raw : INT<4>: [4,4] 0 cx[41](0+ca(.text+3fa)-ca(.text+3ba)) 
fmt : INT<4> [4,4]: cx[65](0+ca(.text+3fa)-ca(.text+3ba)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 657 
fmt : INT<4> [4,4]: 1623 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ab 
fmt : INT<1> [1,1]: 171 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ab 
fmt : INT<1> [1,1]: 171 

raw : INT<4>: [4,4] 62 
fmt : INT<4> [4,4]: 98 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB8(index: 5f)] 
fmt : INT<4> [4,4]: [.LBB8(index: 95)] 

raw : INT<4>: [4,4] 0 cx[42](0+ca(.text+3f4)-ca(.text+3c6)) 
fmt : INT<4> [4,4]: cx[66](0+ca(.text+3f4)-ca(.text+3c6)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ab 
fmt : INT<1> [1,1]: 171 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF49(index: eb)] 
fmt : INT<4> [4,4]: [.LASF49(index: 235)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ac 
fmt : INT<1> [1,1]: 172 

raw : INT<4>: [4,4] 0 [.LFB28(index: 63)] 
fmt : INT<4> [4,4]: [.LFB28(index: 99)] 

raw : INT<4>: [4,4] 0 cx[43](0+ca(.text+43a)-ca(.text+3fa)) 
fmt : INT<4> [4,4]: cx[67](0+ca(.text+43a)-ca(.text+3fa)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 69c 
fmt : INT<4> [4,4]: 1692 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ac 
fmt : INT<1> [1,1]: 172 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ac 
fmt : INT<1> [1,1]: 172 

raw : INT<4>: [4,4] 155 
fmt : INT<4> [4,4]: 341 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB9(index: 64)] 
fmt : INT<4> [4,4]: [.LBB9(index: 100)] 

raw : INT<4>: [4,4] 0 cx[44](0+ca(.text+434)-ca(.text+406)) 
fmt : INT<4> [4,4]: cx[68](0+ca(.text+434)-ca(.text+406)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ac 
fmt : INT<1> [1,1]: 172 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : INT<4>: [4,4] 0 [.LASF50(index: ec)] 
fmt : INT<4> [4,4]: [.LASF50(index: 236)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ad 
fmt : INT<1> [1,1]: 173 

raw : INT<4>: [4,4] 0 [.LFB29(index: 68)] 
fmt : INT<4> [4,4]: [.LFB29(index: 104)] 

raw : INT<4>: [4,4] 0 cx[45](0+ca(.text+472)-ca(.text+43a)) 
fmt : INT<4> [4,4]: cx[69](0+ca(.text+472)-ca(.text+43a)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 6e1 
fmt : INT<4> [4,4]: 1761 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ad 
fmt : INT<1> [1,1]: 173 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ad 
fmt : INT<1> [1,1]: 173 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000004 
fmt : SLEB128 [1,1]: 4 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB10(index: 69)] 
fmt : INT<4> [4,4]: [.LBB10(index: 105)] 

raw : INT<4>: [4,4] 0 cx[46](0+ca(.text+46c)-ca(.text+43e)) 
fmt : INT<4> [4,4]: cx[70](0+ca(.text+46c)-ca(.text+43e)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000ad 
fmt : INT<1> [1,1]: 173 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF51(index: ed)] 
fmt : INT<4> [4,4]: [.LASF51(index: 237)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000af 
fmt : INT<1> [1,1]: 175 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : INT<4>: [4,4] 0 [.LFB30(index: 6d)] 
fmt : INT<4> [4,4]: [.LFB30(index: 109)] 

raw : INT<4>: [4,4] 0 cx[47](0+ca(.text+4aa)-ca(.text+472)) 
fmt : INT<4> [4,4]: cx[71](0+ca(.text+4aa)-ca(.text+472)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 72a 
fmt : INT<4> [4,4]: 1834 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000af 
fmt : INT<1> [1,1]: 175 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB11(index: 6e)] 
fmt : INT<4> [4,4]: [.LBB11(index: 110)] 

raw : INT<4>: [4,4] 0 cx[48](0+ca(.text+4a6)-ca(.text+476)) 
fmt : INT<4> [4,4]: cx[72](0+ca(.text+4a6)-ca(.text+476)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b0 
fmt : INT<1> [1,1]: 176 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b0 
fmt : INT<1> [1,1]: 176 

raw : INT<4>: [4,4] 49 
fmt : INT<4> [4,4]: 73 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007b 
fmt : SLEB128 [1,1]: 123 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF52(index: ee)] 
fmt : INT<4> [4,4]: [.LASF52(index: 238)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b1 
fmt : INT<1> [1,1]: 177 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : INT<4>: [4,4] 0 [.LFB31(index: 72)] 
fmt : INT<4> [4,4]: [.LFB31(index: 114)] 

raw : INT<4>: [4,4] 0 cx[49](0+ca(.text+4e4)-ca(.text+4aa)) 
fmt : INT<4> [4,4]: cx[73](0+ca(.text+4e4)-ca(.text+4aa)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 773 
fmt : INT<4> [4,4]: 1907 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b1 
fmt : INT<1> [1,1]: 177 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB12(index: 73)] 
fmt : INT<4> [4,4]: [.LBB12(index: 115)] 

raw : INT<4>: [4,4] 0 cx[4a](0+ca(.text+4e0)-ca(.text+4ae)) 
fmt : INT<4> [4,4]: cx[74](0+ca(.text+4e0)-ca(.text+4ae)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b2 
fmt : INT<1> [1,1]: 178 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b2 
fmt : INT<1> [1,1]: 178 

raw : INT<4>: [4,4] 5b 
fmt : INT<4> [4,4]: 91 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007a 
fmt : SLEB128 [1,1]: 122 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<4>: [4,4] 0 [.LASF53(index: ef)] 
fmt : INT<4> [4,4]: [.LASF53(index: 239)] 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b3 
fmt : INT<1> [1,1]: 179 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : INT<4>: [4,4] 0 [.LFB32(index: 77)] 
fmt : INT<4> [4,4]: [.LFB32(index: 119)] 

raw : INT<4>: [4,4] 0 cx[4b](0+ca(.text+51e)-ca(.text+4e4)) 
fmt : INT<4> [4,4]: cx[75](0+ca(.text+51e)-ca(.text+4e4)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 7bc 
fmt : INT<4> [4,4]: 1980 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b3 
fmt : INT<1> [1,1]: 179 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB13(index: 78)] 
fmt : INT<4> [4,4]: [.LBB13(index: 120)] 

raw : INT<4>: [4,4] 0 cx[4c](0+ca(.text+51a)-ca(.text+4e8)) 
fmt : INT<4> [4,4]: cx[76](0+ca(.text+51a)-ca(.text+4e8)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300705f 
fmt : STR<1> [3,3]: 95 112 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b4 
fmt : INT<1> [1,1]: 180 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 10000b4 
fmt : INT<1> [1,1]: 180 

raw : INT<4>: [4,4] 60b 
fmt : INT<4> [4,4]: 1547 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 1000078 
fmt : SLEB128 [1,1]: 120 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<4>: [4,4] 0 [.LASF54(index: f0)] 
fmt : INT<4> [4,4]: [.LASF54(index: 240)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 0 [.LFB33(index: 7c)] 
fmt : INT<4> [4,4]: [.LFB33(index: 124)] 

raw : INT<4>: [4,4] 0 cx[4d](0+ca(.text+540)-ca(.text+51e)) 
fmt : INT<4> [4,4]: cx[77](0+ca(.text+540)-ca(.text+51e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 7ec 
fmt : INT<4> [4,4]: 2028 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 213 
fmt : INT<4> [4,4]: 531 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [4,4] 3677261 {0} 
fmt : STR<1> [4,4]: 97 114 103 0 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000004 
fmt : SLEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001c 
fmt : ULEB128 [1,1]: 28 

raw : INT<4>: [4,4] 0 [.LASF55(index: f1)] 
fmt : INT<4> [4,4]: [.LASF55(index: 241)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000021 
fmt : INT<1> [1,1]: 33 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 0 [.LFB34(index: 80)] 
fmt : INT<4> [4,4]: [.LFB34(index: 128)] 

raw : INT<4>: [4,4] 0 cx[4e](0+ca(.text+57e)-ca(.text+540)) 
fmt : INT<4> [4,4]: cx[78](0+ca(.text+57e)-ca(.text+540)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 853 
fmt : INT<4> [4,4]: 2131 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000063 
fmt : STR<1> [2,2]: 99 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000021 
fmt : INT<1> [1,1]: 33 

raw : INT<4>: [4,4] 2c 
fmt : INT<4> [4,4]: 44 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001d 
fmt : ULEB128 [1,1]: 29 

raw : STR<1>: [3,3] 3006970 
fmt : STR<1> [3,3]: 112 105 0 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 82f 
fmt : INT<4> [4,4]: 2095 

raw : ULEB128: [1,1] 100001e 
fmt : ULEB128 [1,1]: 30 

raw : STR<1>: [2,2] 2000069 
fmt : STR<1> [2,2]: 105 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : ULEB128: [1,1] 100001e 
fmt : ULEB128 [1,1]: 30 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000076 
fmt : STR<1> [2,2]: 118 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000023 
fmt : INT<1> [1,1]: 35 

raw : INT<4>: [4,4] 811 
fmt : INT<4> [4,4]: 2065 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB14(index: 84)] 
fmt : INT<4> [4,4]: [.LBB14(index: 132)] 

raw : INT<4>: [4,4] 0 cx[4f](0+ca(.text+578)-ca(.text+56c)) 
fmt : INT<4> [4,4]: cx[79](0+ca(.text+578)-ca(.text+56c)) 

raw : ULEB128: [1,1] 100001f 
fmt : ULEB128 [1,1]: 31 

raw : INT<4>: [4,4] 0 [.LASF58(index: f2)] 
fmt : INT<4> [4,4]: [.LASF58(index: 242)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000029 
fmt : INT<1> [1,1]: 41 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<4>: [4,4] 0 [.LASF56(index: f3)] 
fmt : INT<4> [4,4]: [.LASF56(index: 243)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100002d 
fmt : INT<1> [1,1]: 45 

raw : INT<4>: [4,4] 0 [.LFB35(index: 89)] 
fmt : INT<4> [4,4]: [.LFB35(index: 137)] 

raw : INT<4>: [4,4] 0 cx[50](0+ca(.text+5e8)-ca(.text+57e)) 
fmt : INT<4> [4,4]: cx[80](0+ca(.text+5e8)-ca(.text+57e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 88c 
fmt : INT<4> [4,4]: 2188 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100002d 
fmt : INT<1> [1,1]: 45 

raw : INT<4>: [4,4] 88c 
fmt : INT<4> [4,4]: 2188 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB15(index: 8b)] 
fmt : INT<4> [4,4]: [.LBB15(index: 139)] 

raw : INT<4>: [4,4] 0 cx[51](0+ca(.text+5bc)-ca(.text+58c)) 
fmt : INT<4> [4,4]: cx[81](0+ca(.text+5bc)-ca(.text+58c)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [3,3] 300626d 
fmt : STR<1> [3,3]: 109 98 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000030 
fmt : INT<1> [1,1]: 48 

raw : INT<4>: [4,4] 15c 
fmt : INT<4> [4,4]: 348 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 62 
fmt : INT<4> [4,4]: 98 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<4>: [4,4] 0 [.LASF57(index: f4)] 
fmt : INT<4> [4,4]: [.LASF57(index: 244)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100003b 
fmt : INT<1> [1,1]: 59 

raw : INT<4>: [4,4] 0 [.LFB36(index: 97)] 
fmt : INT<4> [4,4]: [.LFB36(index: 151)] 

raw : INT<4>: [4,4] 0 cx[52](0+ca(.text+63e)-ca(.text+5e8)) 
fmt : INT<4> [4,4]: cx[82](0+ca(.text+63e)-ca(.text+5e8)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 8c0 
fmt : INT<4> [4,4]: 2240 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : STR<1>: [2,2] 2000070 
fmt : STR<1> [2,2]: 112 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100003b 
fmt : INT<1> [1,1]: 59 

raw : INT<4>: [4,4] 88c 
fmt : INT<4> [4,4]: 2188 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 1000091 
fmt : INT<1> [1,1]: 145 

raw : SLEB128: [1,1] 1000000 
fmt : SLEB128 [1,1]: 0 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000071 
fmt : STR<1> [2,2]: 113 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100003d 
fmt : INT<1> [1,1]: 61 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000020 
fmt : ULEB128 [1,1]: 32 

raw : INT<4>: [4,4] 0 [.LASF72(index: f5)] 
fmt : INT<4> [4,4]: [.LASF72(index: 245)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100004b 
fmt : INT<1> [1,1]: 75 

raw : INT<4>: [4,4] 0 [.LFB37(index: 9b)] 
fmt : INT<4> [4,4]: [.LFB37(index: 155)] 

raw : INT<4>: [4,4] 0 cx[53](0+ca(.text+6fe)-ca(.text+63e)) 
fmt : INT<4> [4,4]: cx[83](0+ca(.text+6fe)-ca(.text+63e)) 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 100009c 
fmt : INT<1> [1,1]: 156 

raw : INT<4>: [4,4] 93a 
fmt : INT<4> [4,4]: 2362 

raw : ULEB128: [1,1] 1000021 
fmt : ULEB128 [1,1]: 33 

raw : INT<4>: [4,4] 0 [.LASF73(index: f6)] 
fmt : INT<4> [4,4]: [.LASF73(index: 246)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100004d 
fmt : INT<1> [1,1]: 77 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : INT<4>: [4,4] 8e6 
fmt : INT<4> [4,4]: 2278 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : INT<4>: [4,4] 0 [.LBB16(index: 9e)] 
fmt : INT<4> [4,4]: [.LBB16(index: 158)] 

raw : INT<4>: [4,4] 0 cx[54](0+ca(.text+6f6)-ca(.text+654)) 
fmt : INT<4> [4,4]: cx[84](0+ca(.text+6f6)-ca(.text+654)) 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [2,2] 2000069 
fmt : STR<1> [2,2]: 105 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100004f 
fmt : INT<1> [1,1]: 79 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000022 
fmt : ULEB128 [1,1]: 34 

raw : INT<4>: [4,4] 0 [.LBB17(index: a1)] 
fmt : INT<4> [4,4]: [.LBB17(index: 161)] 

raw : INT<4>: [4,4] 0 cx[55](0+ca(.text+6b0)-ca(.text+656)) 
fmt : INT<4> [4,4]: cx[85](0+ca(.text+6b0)-ca(.text+656)) 

raw : INT<4>: [4,4] 925 
fmt : INT<4> [4,4]: 2341 

raw : ULEB128: [1,1] 1000016 
fmt : ULEB128 [1,1]: 22 

raw : INT<4>: [4,4] 0 [.LASF13(index: c2)] 
fmt : INT<4> [4,4]: [.LASF13(index: 194)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000054 
fmt : INT<1> [1,1]: 84 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 1000078 
fmt : SLEB128 [1,1]: 120 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : STR<1>: [4,4] 3677261 {0} 
fmt : STR<1> [4,4]: 97 114 103 0 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000055 
fmt : INT<1> [1,1]: 85 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : INT<1>: [1,1] 100007e 
fmt : INT<1> [1,1]: 126 

raw : SLEB128: [1,1] 1000074 
fmt : SLEB128 [1,1]: 116 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000023 
fmt : ULEB128 [1,1]: 35 

raw : INT<4>: [4,4] 0 cx[56](0+[ident f6:.Ldebug_ranges0]) 
fmt : INT<4> [4,4]: cx[86](0+[ident 246:.Ldebug_ranges0]) 

raw : ULEB128: [1,1] 100001f 
fmt : ULEB128 [1,1]: 31 

raw : INT<4>: [4,4] 0 [.LASF59(index: f8)] 
fmt : INT<4> [4,4]: [.LASF59(index: 248)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100005e 
fmt : INT<1> [1,1]: 94 

raw : INT<4>: [4,4] 76 
fmt : INT<4> [4,4]: 118 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000024 
fmt : ULEB128 [1,1]: 36 

raw : INT<4>: [4,4] 0 [.LASF74(index: f9)] 
fmt : INT<4> [4,4]: [.LASF74(index: 249)] 

raw : ULEB128: [1,1] 1000016 
fmt : ULEB128 [1,1]: 22 

raw : INT<4>: [4,4] 0 [.LASF60(index: fa)] 
fmt : INT<4> [4,4]: [.LASF60(index: 250)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 100001f 
fmt : INT<1> [1,1]: 31 

raw : INT<4>: [4,4] 3e 
fmt : INT<4> [4,4]: 62 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<4>: [4,4] 0 [in_panic(index: 7e)] 
fmt : INT<4> [4,4]: [in_panic(index: 126)] 

raw : ULEB128: [1,1] 1000025 
fmt : ULEB128 [1,1]: 37 

raw : INT<4>: [4,4] 0 [.LASF61(index: fb)] 
fmt : INT<4> [4,4]: [.LASF61(index: 251)] 

raw : INT<1>: [1,1] 1000005 
fmt : INT<1> [1,1]: 5 

raw : INT<1>: [1,1] 1000038 
fmt : INT<1> [1,1]: 56 

raw : INT<4>: [4,4] 88c 
fmt : INT<4> [4,4]: 2188 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<4>: [4,4] 0 [panicstr(index: 92)] 
fmt : INT<4> [4,4]: [panicstr(index: 146)] 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF62(index: fc)] 
fmt : INT<4> [4,4]: [.LASF62(index: 252)] 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<1>: [1,1] 100004b 
fmt : INT<1> [1,1]: 75 

raw : INT<4>: [4,4] 96c 
fmt : INT<4> [4,4]: 2412 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 7f 
fmt : INT<4> [4,4]: 127 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF63(index: fd)] 
fmt : INT<4> [4,4]: [.LASF63(index: 253)] 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<1>: [1,1] 100006d 
fmt : INT<1> [1,1]: 109 

raw : INT<4>: [4,4] 37 
fmt : INT<4> [4,4]: 55 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF64(index: fe)] 
fmt : INT<4> [4,4]: [.LASF64(index: 254)] 

raw : INT<1>: [1,1] 1000007 
fmt : INT<1> [1,1]: 7 

raw : INT<1>: [1,1] 1000074 
fmt : INT<1> [1,1]: 116 

raw : INT<4>: [4,4] 93a 
fmt : INT<4> [4,4]: 2362 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF65(index: ff)] 
fmt : INT<4> [4,4]: [.LASF65(index: 255)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000026 
fmt : INT<1> [1,1]: 38 

raw : INT<4>: [4,4] 993 
fmt : INT<4> [4,4]: 2451 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF66(index: 100)] 
fmt : INT<4> [4,4]: [.LASF66(index: 256)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000026 
fmt : INT<1> [1,1]: 38 

raw : INT<4>: [4,4] 993 
fmt : INT<4> [4,4]: 2451 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : INT<4>: [4,4] 7d 
fmt : INT<4> [4,4]: 125 

raw : INT<4>: [4,4] 9af 
fmt : INT<4> [4,4]: 2479 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<4>: [4,4] 0 [.LASF67(index: 101)] 
fmt : INT<4> [4,4]: [.LASF67(index: 257)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000027 
fmt : INT<1> [1,1]: 39 

raw : INT<4>: [4,4] 9a4 
fmt : INT<4> [4,4]: 2468 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : SEG: [0,0] 5 
fmt : SEG [0,0]: 5 .debug_abbrev:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000025 
fmt : ULEB128 [1,1]: 37 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000010 
fmt : ULEB128 [1,1]: 16 

raw : ULEB128: [1,1] 1000017 
fmt : ULEB128 [1,1]: 23 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000024 
fmt : ULEB128 [1,1]: 36 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003e 
fmt : ULEB128 [1,1]: 62 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000016 
fmt : ULEB128 [1,1]: 22 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000004 
fmt : ULEB128 [1,1]: 4 

raw : ULEB128: [1,1] 100000f 
fmt : ULEB128 [1,1]: 15 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000007 
fmt : ULEB128 [1,1]: 7 

raw : ULEB128: [1,1] 1000024 
fmt : ULEB128 [1,1]: 36 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003e 
fmt : ULEB128 [1,1]: 62 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100000f 
fmt : ULEB128 [1,1]: 15 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000009 
fmt : ULEB128 [1,1]: 9 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000a 
fmt : ULEB128 [1,1]: 10 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000038 
fmt : ULEB128 [1,1]: 56 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000038 
fmt : ULEB128 [1,1]: 56 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000c 
fmt : ULEB128 [1,1]: 12 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 1000021 
fmt : ULEB128 [1,1]: 33 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100002f 
fmt : ULEB128 [1,1]: 47 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100000f 
fmt : ULEB128 [1,1]: 15 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000010 
fmt : ULEB128 [1,1]: 16 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004297 
fmt : ULEB128 [2,2]: 151 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [2,2] 2000187 
fmt : ULEB128 [2,2]: 135 1 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004296 
fmt : ULEB128 [2,2]: 150 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004296 
fmt : ULEB128 [2,2]: 150 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000014 
fmt : ULEB128 [1,1]: 20 

raw : ULEB128: [1,1] 1000005 
fmt : ULEB128 [1,1]: 5 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000015 
fmt : ULEB128 [1,1]: 21 

raw : ULEB128: [1,1] 1000034 
fmt : ULEB128 [1,1]: 52 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000016 
fmt : ULEB128 [1,1]: 22 

raw : ULEB128: [1,1] 1000034 
fmt : ULEB128 [1,1]: 52 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000017 
fmt : ULEB128 [1,1]: 23 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004296 
fmt : ULEB128 [2,2]: 150 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004297 
fmt : ULEB128 [2,2]: 151 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001a 
fmt : ULEB128 [1,1]: 26 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004297 
fmt : ULEB128 [2,2]: 151 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001b 
fmt : ULEB128 [1,1]: 27 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001c 
fmt : ULEB128 [1,1]: 28 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004296 
fmt : ULEB128 [2,2]: 150 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001d 
fmt : ULEB128 [1,1]: 29 

raw : ULEB128: [1,1] 1000017 
fmt : ULEB128 [1,1]: 23 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001e 
fmt : ULEB128 [1,1]: 30 

raw : ULEB128: [1,1] 100000d 
fmt : ULEB128 [1,1]: 13 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 1000008 
fmt : ULEB128 [1,1]: 8 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 100001f 
fmt : ULEB128 [1,1]: 31 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100003c 
fmt : ULEB128 [1,1]: 60 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000020 
fmt : ULEB128 [1,1]: 32 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000040 
fmt : ULEB128 [1,1]: 64 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : ULEB128: [2,2] 2004296 
fmt : ULEB128 [2,2]: 150 66 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000021 
fmt : ULEB128 [1,1]: 33 

raw : ULEB128: [1,1] 100002e 
fmt : ULEB128 [1,1]: 46 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100003c 
fmt : ULEB128 [1,1]: 60 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000022 
fmt : ULEB128 [1,1]: 34 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000011 
fmt : ULEB128 [1,1]: 17 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000012 
fmt : ULEB128 [1,1]: 18 

raw : ULEB128: [1,1] 1000006 
fmt : ULEB128 [1,1]: 6 

raw : ULEB128: [1,1] 1000001 
fmt : ULEB128 [1,1]: 1 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000023 
fmt : ULEB128 [1,1]: 35 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ULEB128: [1,1] 1000055 
fmt : ULEB128 [1,1]: 85 

raw : ULEB128: [1,1] 1000017 
fmt : ULEB128 [1,1]: 23 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000024 
fmt : ULEB128 [1,1]: 36 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003c 
fmt : ULEB128 [1,1]: 60 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000025 
fmt : ULEB128 [1,1]: 37 

raw : ULEB128: [1,1] 1000034 
fmt : ULEB128 [1,1]: 52 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000026 
fmt : ULEB128 [1,1]: 38 

raw : ULEB128: [1,1] 1000034 
fmt : ULEB128 [1,1]: 52 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000003 
fmt : ULEB128 [1,1]: 3 

raw : ULEB128: [1,1] 100000e 
fmt : ULEB128 [1,1]: 14 

raw : ULEB128: [1,1] 100003a 
fmt : ULEB128 [1,1]: 58 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 100003b 
fmt : ULEB128 [1,1]: 59 

raw : ULEB128: [1,1] 100000b 
fmt : ULEB128 [1,1]: 11 

raw : ULEB128: [1,1] 1000049 
fmt : ULEB128 [1,1]: 73 

raw : ULEB128: [1,1] 1000013 
fmt : ULEB128 [1,1]: 19 

raw : ULEB128: [1,1] 100003f 
fmt : ULEB128 [1,1]: 63 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : ULEB128: [1,1] 100003c 
fmt : ULEB128 [1,1]: 60 

raw : ULEB128: [1,1] 1000019 
fmt : ULEB128 [1,1]: 25 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000027 
fmt : ULEB128 [1,1]: 39 

raw : ULEB128: [1,1] 1000021 
fmt : ULEB128 [1,1]: 33 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : SEG: [0,0] 6 
fmt : SEG [0,0]: 6 .debug_aranges:0

raw : INT<4>: [4,4] 1c 
fmt : INT<4> [4,4]: 28 

raw : INT<2>: [2,2] 10002 
fmt : INT<2> [2,2]: 2 

raw : INT<4>: [4,4] 0 [.Ldebug_info0(index: b3)] 
fmt : INT<4> [4,4]: [.Ldebug_info0(index: 179)] 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : INT<2>: [2,2] 10000 
fmt : INT<2> [2,2]: 0 

raw : INT<2>: [2,2] 10000 
fmt : INT<2> [2,2]: 0 

raw : INT<4>: [4,4] 0 [.Ltext0(index: 2)] 
fmt : INT<4> [4,4]: [.Ltext0(index: 2)] 

raw : INT<4>: [4,4] 0 cx[57](0+ca(.text+6fe)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[87](0+ca(.text+6fe)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 {0} 
fmt : INT<4> [4,4]: 0 

raw : INT<4>: [4,4] 0 {0} 
fmt : INT<4> [4,4]: 0 

raw : SEG: [0,0] 7 
fmt : SEG [0,0]: 7 .debug_ranges:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[58](0+ca(.text+6ca)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[88](0+ca(.text+6ca)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 cx[59](0+ca(.text+6e2)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[89](0+ca(.text+6e2)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 cx[5a](0+ca(.text+6f4)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[90](0+ca(.text+6f4)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 cx[5b](0+ca(.text+6f6)-ca(.text+0)) 
fmt : INT<4> [4,4]: cx[91](0+ca(.text+6f6)-ca(.text+0)) 

raw : INT<4>: [4,4] 0 {0} 
fmt : INT<4> [4,4]: 0 

raw : INT<4>: [4,4] 0 {0} 
fmt : INT<4> [4,4]: 0 

raw : SEG: [0,0] 8 
fmt : SEG [0,0]: 8 .debug_line:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : SEG: [0,0] 9 
fmt : SEG [0,0]: 9 .debug_str:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 696d696c {74, 0} 
fmt : STR<1> [6,6]: 108 105 109 105 116 0 

raw : LABEL: [0,0] 60006 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 6675626d {5f, 68, 64, 72, 0} 
fmt : STR<1> [9,9]: 109 98 117 102 95 104 100 114 0 

raw : LABEL: [0,0] f000f 
fmt : LABEL [0,0]: 

raw : STR<1>: [12,12] 736e6f63 {6f, 6c, 65, 5f, 6f, 75, 74, 0} 
fmt : STR<1> [12,12]: 99 111 110 115 111 108 101 95 111 117 116 0 

raw : LABEL: [0,0] 1b001b 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 725f626d {6f, 6f, 6d, 0} 
fmt : STR<1> [8,8]: 109 98 95 114 111 111 109 0 

raw : LABEL: [0,0] 230023 
fmt : LABEL [0,0]: 

raw : STR<1>: [10,10] 726f6873 {74, 20, 69, 6e, 74, 0} 
fmt : STR<1> [10,10]: 115 104 111 114 116 32 105 110 116 0 

raw : LABEL: [0,0] 2d002d 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 657a6973 {74, 79, 70, 65, 0} 
fmt : STR<1> [9,9]: 115 105 122 101 116 121 112 101 0 

raw : LABEL: [0,0] 360036 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 63747570 {68, 61, 72, 0} 
fmt : STR<1> [8,8]: 112 117 116 99 104 97 114 0 

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 696e6170 {63, 73, 74, 72, 0} 
fmt : STR<1> [9,9]: 112 97 110 105 99 115 116 114 0 

raw : LABEL: [0,0] 470047 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {75, 74, 63, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 117 116 99 0 

raw : LABEL: [0,0] 4f004f 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 696e6170 {63, 0} 
fmt : STR<1> [6,6]: 112 97 110 105 99 0 

raw : LABEL: [0,0] 550055 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 68735f75 {6f, 72, 74, 0} 
fmt : STR<1> [8,8]: 117 95 115 104 111 114 116 0 

raw : LABEL: [0,0] 5d005d 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {75, 74, 6c, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 117 116 108 0 

raw : LABEL: [0,0] 650065 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 735f626d {6b, 69, 70, 0} 
fmt : STR<1> [8,8]: 109 98 95 115 107 105 112 0 

raw : LABEL: [0,0] 6d006d 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 6675626d {0} 
fmt : STR<1> [5,5]: 109 98 117 102 0 

raw : LABEL: [0,0] 720072 
fmt : LABEL [0,0]: 

raw : STR<1>: [7,7] 745f626d {6f, 70, 0} 
fmt : STR<1> [7,7]: 109 98 95 116 111 112 0 

raw : LABEL: [0,0] 790079 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 64616568 {0} 
fmt : STR<1> [5,5]: 104 101 97 100 0 

raw : LABEL: [0,0] 7e007e 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 74696e75 {0} 
fmt : STR<1> [5,5]: 117 110 105 116 0 

raw : LABEL: [0,0] 830083 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 73747570 {0} 
fmt : STR<1> [5,5]: 112 117 116 115 0 

raw : LABEL: [0,0] 880088 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 434f5250 {0} 
fmt : STR<1> [5,5]: 80 82 79 67 0 

raw : LABEL: [0,0] 8d008d 
fmt : LABEL [0,0]: 

raw : STR<1>: [13,13] 675f626d {65, 74, 5f, 6c, 69, 6e, 6b, 73} {0} 
fmt : STR<1> [13,13]: 109 98 95 103 101 116 95 108 105 110 107 115 0 

raw : LABEL: [0,0] 9a009a 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 655f626d {6d, 70, 74, 79, 0} 
fmt : STR<1> [9,9]: 109 98 95 101 109 112 116 121 0 

raw : LABEL: [0,0] a300a3 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 6c5f626d {65, 66, 74, 0} 
fmt : STR<1> [8,8]: 109 98 95 108 101 102 116 0 

raw : LABEL: [0,0] ab00ab 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 745f626d {61, 64, 76, 0} 
fmt : STR<1> [8,8]: 109 98 95 116 97 100 118 0 

raw : LABEL: [0,0] b300b3 
fmt : LABEL [0,0]: 

raw : STR<1>: [7,7] 68635f75 {61, 72, 0} 
fmt : STR<1> [7,7]: 117 95 99 104 97 114 0 

raw : LABEL: [0,0] ba00ba 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 5f787461 {69, 64, 6c, 65, 0} 
fmt : STR<1> [9,9]: 97 116 120 95 105 100 108 101 0 

raw : LABEL: [0,0] c300c3 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 63657865 {0} 
fmt : STR<1> [5,5]: 101 120 101 99 0 

raw : LABEL: [0,0] c800c8 
fmt : LABEL [0,0]: 

raw : STR<1>: [51,51] 6573552f {72, 73, 2f, 6b, 65, 6e, 74, 2f} {44, 65, 73, 6b, 74, 6f, 70, 2f} {74, 66, 64, 2f, 74, 6f, 6c, 6c} {2e, 73, 72, 63, 2f, 73, 6d, 6e} {2f, 73, 72, 63, 2e, 6d, 36, 38} {6b, 2f, 63, 61, 6f, 73, 0} 
fmt : STR<1> [51,51]: 47 85 115 101 114 115 47 107 101 110 116 47 68 101 115 107 116 111 112 47 116 102 100 47 116 111 108 108 46 115 114 99 47 115 109 110 47 115 114 99 46 109 54 56 107 47 99 97 111 115 0 

raw : LABEL: [0,0] fb00fb 
fmt : LABEL [0,0]: 

raw : STR<1>: [23,23] 69645f5f {73, 70, 6c, 61, 79, 5f, 63, 75} {72, 72, 65, 6e, 74, 5f, 70, 72} {6f, 63, 0} 
fmt : STR<1> [23,23]: 95 95 100 105 115 112 108 97 121 95 99 117 114 114 101 110 116 95 112 114 111 99 0 

raw : LABEL: [0,0] 1120112 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {75, 74, 77, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 117 116 119 0 

raw : LABEL: [0,0] 11a011a 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 676e6f6c {20, 69, 6e, 74, 0} 
fmt : STR<1> [9,9]: 108 111 110 103 32 105 110 116 0 

raw : LABEL: [0,0] 1230123 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 685f626d {72, 6f, 6f, 6d, 0} 
fmt : STR<1> [9,9]: 109 98 95 104 114 111 111 109 0 

raw : LABEL: [0,0] 12c012c 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 6d617266 {65, 0} 
fmt : STR<1> [6,6]: 102 114 97 109 101 0 

raw : LABEL: [0,0] 1320132 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 6b6e696c {73, 0} 
fmt : STR<1> [6,6]: 108 105 110 107 115 0 

raw : LABEL: [0,0] 1380138 
fmt : LABEL [0,0]: 

raw : STR<1>: [29,29] 20554e47 {43, 31, 31, 20, 35, 2e, 34, 2e} {30, 20, 2d, 6d, 63, 70, 75, 3d} {36, 38, 30, 32, 30, 20, 2d, 67} {0} 
fmt : STR<1> [29,29]: 71 78 85 32 67 49 49 32 53 46 52 46 48 32 45 109 99 112 117 61 54 56 48 50 48 32 45 103 0 

raw : LABEL: [0,0] 1550155 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 75657571 {65, 0} 
fmt : STR<1> [6,6]: 113 117 101 117 101 0 

raw : LABEL: [0,0] 15b015b 
fmt : LABEL [0,0]: 

raw : STR<1>: [7,7] 6c5f626d {65, 6e, 0} 
fmt : STR<1> [7,7]: 109 98 95 108 101 110 0 

raw : LABEL: [0,0] 1620162 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 6c696174 {0} 
fmt : STR<1> [5,5]: 116 97 105 108 0 

raw : LABEL: [0,0] 1670167 
fmt : LABEL [0,0]: 

raw : STR<1>: [14,14] 69736e75 {67, 6e, 65, 64, 20, 63, 68, 61} {72, 0} 
fmt : STR<1> [14,14]: 117 110 115 105 103 110 101 100 32 99 104 97 114 0 

raw : LABEL: [0,0] 1750175 
fmt : LABEL [0,0]: 

raw : STR<1>: [19,19] 736e6f63 {6f, 6c, 65, 5f, 64, 62, 75, 67} {5f, 66, 6c, 61, 67, 73, 0} 
fmt : STR<1> [19,19]: 99 111 110 115 111 108 101 95 100 98 117 103 95 102 108 97 103 115 0 

raw : LABEL: [0,0] 1880188 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 726f6261 {74, 0} 
fmt : STR<1> [6,6]: 97 98 111 114 116 0 

raw : LABEL: [0,0] 18e018e 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 636f7270 {0} 
fmt : STR<1> [5,5]: 112 114 111 99 0 

raw : LABEL: [0,0] 1930193 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 65707974 {0} 
fmt : STR<1> [5,5]: 116 121 112 101 0 

raw : LABEL: [0,0] 1980198 
fmt : LABEL [0,0]: 

raw : STR<1>: [13,13] 69736e75 {67, 6e, 65, 64, 20, 69, 6e, 74} {0} 
fmt : STR<1> [13,13]: 117 110 115 105 103 110 101 100 32 105 110 116 0 

raw : LABEL: [0,0] 1a501a5 
fmt : LABEL [0,0]: 

raw : STR<1>: [15,15] 5f737973 {71, 75, 65, 75, 65, 5f, 74, 61} {69, 6c, 0} 
fmt : STR<1> [15,15]: 115 121 115 95 113 117 101 117 101 95 116 97 105 108 0 

raw : LABEL: [0,0] 1b401b4 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 665f626d {6c, 75, 73, 68, 0} 
fmt : STR<1> [9,9]: 109 98 95 102 108 117 115 104 0 

raw : LABEL: [0,0] 1bd01bd 
fmt : LABEL [0,0]: 

raw : STR<1>: [15,15] 43747570 {6f, 6e, 73, 6f, 6c, 65, 43, 68} {61, 72, 0} 
fmt : STR<1> [15,15]: 112 117 116 67 111 110 115 111 108 101 67 104 97 114 0 

raw : LABEL: [0,0] 1cc01cc 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 705f626d {75, 73, 68, 63, 0} 
fmt : STR<1> [9,9]: 109 98 95 112 117 115 104 99 0 

raw : LABEL: [0,0] 1d501d5 
fmt : LABEL [0,0]: 

raw : STR<1>: [19,19] 726f6873 {74, 20, 75, 6e, 73, 69, 67, 6e} {65, 64, 20, 69, 6e, 74, 0} 
fmt : STR<1> [19,19]: 115 104 111 114 116 32 117 110 115 105 103 110 101 100 32 105 110 116 0 

raw : LABEL: [0,0] 1e801e8 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 705f626d {75, 73, 68, 6c, 0} 
fmt : STR<1> [9,9]: 109 98 95 112 117 115 104 108 0 

raw : LABEL: [0,0] 1f101f1 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 72616863 {0} 
fmt : STR<1> [5,5]: 99 104 97 114 0 

raw : LABEL: [0,0] 1f601f6 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 675f626d {65, 74, 63, 0} 
fmt : STR<1> [8,8]: 109 98 95 103 101 116 99 0 

raw : LABEL: [0,0] 1fe01fe 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 705f626d {75, 73, 68, 77, 0} 
fmt : STR<1> [9,9]: 109 98 95 112 117 115 104 119 0 

raw : LABEL: [0,0] 2070207 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 675f626d {65, 74, 6c, 0} 
fmt : STR<1> [8,8]: 109 98 95 103 101 116 108 0 

raw : LABEL: [0,0] 20f020f 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 685f626d {70, 74, 72, 0} 
fmt : STR<1> [8,8]: 109 98 95 104 112 116 114 0 

raw : LABEL: [0,0] 2170217 
fmt : LABEL [0,0]: 

raw : STR<1>: [10,10] 63747570 {68, 61, 72, 2e, 63, 0} 
fmt : STR<1> [10,10]: 112 117 116 99 104 97 114 46 99 0 

raw : LABEL: [0,0] 2210221 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 61746164 {0} 
fmt : STR<1> [5,5]: 100 97 116 97 0 

raw : LABEL: [0,0] 2260226 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 675f626d {65, 74, 77, 0} 
fmt : STR<1> [8,8]: 109 98 95 103 101 116 119 0 

raw : LABEL: [0,0] 22e022e 
fmt : LABEL [0,0]: 

raw : STR<1>: [18,18] 676e6f6c {20, 75, 6e, 73, 69, 67, 6e, 65} {64, 20, 69, 6e, 74, 0} 
fmt : STR<1> [18,18]: 108 111 110 103 32 117 110 115 105 103 110 101 100 32 105 110 116 0 

raw : LABEL: [0,0] 2400240 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 636f6c63 {6b, 0} 
fmt : STR<1> [6,6]: 99 108 111 99 107 0 

raw : LABEL: [0,0] 2460246 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {6f, 70, 63, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 111 112 99 0 

raw : LABEL: [0,0] 24e024e 
fmt : LABEL [0,0]: 

raw : STR<1>: [9,9] 705f6e69 {61, 6e, 69, 63, 0} 
fmt : STR<1> [9,9]: 105 110 95 112 97 110 105 99 0 

raw : LABEL: [0,0] 2570257 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {6f, 70, 6c, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 111 112 108 0 

raw : LABEL: [0,0] 25f025f 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 745f626d {70, 74, 72, 0} 
fmt : STR<1> [8,8]: 109 98 95 116 112 116 114 0 

raw : LABEL: [0,0] 2670267 
fmt : LABEL [0,0]: 

raw : STR<1>: [15,15] 5f737973 {71, 75, 65, 75, 65, 5f, 68, 65} {61, 64, 0} 
fmt : STR<1> [15,15]: 115 121 115 95 113 117 101 117 101 95 104 101 97 100 0 

raw : LABEL: [0,0] 2760276 
fmt : LABEL [0,0]: 

raw : STR<1>: [16,16] 5f737973 {71, 75, 65, 75, 65, 5f, 74, 61} {62, 6c, 65, 0} 
fmt : STR<1> [16,16]: 115 121 115 95 113 117 101 117 101 95 116 97 98 108 101 0 

raw : LABEL: [0,0] 2860286 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 705f626d {6f, 70, 77, 0} 
fmt : STR<1> [8,8]: 109 98 95 112 111 112 119 0 

raw : LABEL: [0,0] 28e028e 
fmt : LABEL [0,0]: 

raw : STR<1>: [11,11] 726f6261 {74, 5f, 73, 75, 70, 76, 0} 
fmt : STR<1> [11,11]: 97 98 111 114 116 95 115 117 112 118 0 

raw : LABEL: [0,0] 2990299 
fmt : LABEL [0,0]: 

raw : STR<1>: [6,6] 6e695f75 {74, 0} 
fmt : STR<1> [6,6]: 117 95 105 110 116 0 

raw : LABEL: [0,0] 29f029f 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 665f626d {72, 65, 65, 0} 
fmt : STR<1> [8,8]: 109 98 95 102 114 101 101 0 

raw : LABEL: [0,0] 2a702a7 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 6772615f {0} 
fmt : STR<1> [5,5]: 95 97 114 103 0 

raw : LABEL: [0,0] 2ac02ac 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 6c5f626d {69, 6e, 6b, 0} 
fmt : STR<1> [8,8]: 109 98 95 108 105 110 107 0 

raw : LABEL: [0,0] 2b402b4 
fmt : LABEL [0,0]: 

raw : STR<1>: [8,8] 745f7075 {69, 6d, 65, 0} 
fmt : STR<1> [8,8]: 117 112 95 116 105 109 101 0 

raw : LABEL: [0,0] 2bc02bc 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 4655424d {0} 
fmt : STR<1> [5,5]: 77 66 85 70 0 

raw : LABEL: [0,0] 2c102c1 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 7478656e {0} 
fmt : STR<1> [5,5]: 110 101 120 116 0 

raw : LABEL: [0,0] 2c602c6 
fmt : LABEL [0,0]: 

raw : STR<1>: [5,5] 63736564 {0} 
fmt : STR<1> [5,5]: 100 101 115 99 0 

raw : IDENT: [0,0] 0 "GCC: (GNU) 5.4.0" 
fmt : IDENT [0,0]: 

raw : SEG: [0,0] a 
fmt : SEG [0,0]: 10 ".comment":0

raw : STR<0>: [9,9] 6d6f6320 {6d, 65, 6e, 74, 20} 
fmt : STR<0> [9,9]: 32 99 111 109 109 101 110 116 32 

raw : SEG: [0,0] 9 
fmt : SEG [0,0]: 9 .debug_str:0

raw : SEG: [0,0] 2 
fmt : SEG [0,0]: 2 .bss:0

raw : LABEL: [1,1] 0 
fmt : LABEL [1,1]: 

raw : SEG: [0,0] b 
fmt : SEG [0,0]: 11 .debug_frame:0

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[5c](fffffffc+ca(.debug_frame+14)-ca(.debug_frame+0)) 
fmt : INT<4> [4,4]: cx[92](-4+ca(.debug_frame+14)-ca(.debug_frame+0)) 

raw : INT<4>: [4,4] ffffffff 
fmt : INT<4> [4,4]: 4294967295 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : STR<1>: [1,1] 1000000 
fmt : STR<1> [1,1]: 0 

raw : INT<1>: [1,1] 0 4 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000000 
fmt : INT<1> [1,1]: 0 

raw : ULEB128: [1,1] 1000002 
fmt : ULEB128 [1,1]: 2 

raw : SLEB128: [1,1] 100007c 
fmt : SLEB128 [1,1]: 124 

raw : ULEB128: [1,1] 1000018 
fmt : ULEB128 [1,1]: 24 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000f 
fmt : INT<1> [1,1]: 15 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : INT<1>: [1,1] 1000098 
fmt : INT<1> [1,1]: 152 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[5d](0+ca(.debug_frame+2c)-ca(.debug_frame+18)) 
fmt : INT<4> [4,4]: cx[93](0+ca(.debug_frame+2c)-ca(.debug_frame+18)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+0) 
fmt : INT<4> [4,4]: ca(.text+0) 

raw : INT<4>: [4,4] 22 
fmt : INT<4> [4,4]: 34 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[5e](0+ca(.debug_frame+44)-ca(.debug_frame+30)) 
fmt : INT<4> [4,4]: cx[94](0+ca(.debug_frame+44)-ca(.debug_frame+30)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+22) 
fmt : INT<4> [4,4]: ca(.text+22) 

raw : INT<4>: [4,4] c 
fmt : INT<4> [4,4]: 12 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[5f](0+ca(.debug_frame+60)-ca(.debug_frame+48)) 
fmt : INT<4> [4,4]: cx[95](0+ca(.debug_frame+60)-ca(.debug_frame+48)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+2e) 
fmt : INT<4> [4,4]: ca(.text+2e) 

raw : INT<4>: [4,4] 36 
fmt : INT<4> [4,4]: 54 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 1000083 
fmt : INT<1> [1,1]: 131 

raw : INT<1>: [1,1] 1000003 
fmt : INT<1> [1,1]: 3 

raw : INT<1>: [1,1] 1000082 
fmt : INT<1> [1,1]: 130 

raw : INT<1>: [1,1] 1000004 
fmt : INT<1> [1,1]: 4 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[60](0+ca(.debug_frame+78)-ca(.debug_frame+64)) 
fmt : INT<4> [4,4]: cx[96](0+ca(.debug_frame+78)-ca(.debug_frame+64)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+64) 
fmt : INT<4> [4,4]: ca(.text+64) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[61](0+ca(.debug_frame+90)-ca(.debug_frame+7c)) 
fmt : INT<4> [4,4]: cx[97](0+ca(.debug_frame+90)-ca(.debug_frame+7c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+9e) 
fmt : INT<4> [4,4]: ca(.text+9e) 

raw : INT<4>: [4,4] 1e 
fmt : INT<4> [4,4]: 30 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[62](0+ca(.debug_frame+a8)-ca(.debug_frame+94)) 
fmt : INT<4> [4,4]: cx[98](0+ca(.debug_frame+a8)-ca(.debug_frame+94)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+bc) 
fmt : INT<4> [4,4]: ca(.text+bc) 

raw : INT<4>: [4,4] 18 
fmt : INT<4> [4,4]: 24 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[63](0+ca(.debug_frame+c0)-ca(.debug_frame+ac)) 
fmt : INT<4> [4,4]: cx[99](0+ca(.debug_frame+c0)-ca(.debug_frame+ac)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+d4) 
fmt : INT<4> [4,4]: ca(.text+d4) 

raw : INT<4>: [4,4] 24 
fmt : INT<4> [4,4]: 36 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[64](0+ca(.debug_frame+d8)-ca(.debug_frame+c4)) 
fmt : INT<4> [4,4]: cx[100](0+ca(.debug_frame+d8)-ca(.debug_frame+c4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+f8) 
fmt : INT<4> [4,4]: ca(.text+f8) 

raw : INT<4>: [4,4] 1e 
fmt : INT<4> [4,4]: 30 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[65](0+ca(.debug_frame+f0)-ca(.debug_frame+dc)) 
fmt : INT<4> [4,4]: cx[101](0+ca(.debug_frame+f0)-ca(.debug_frame+dc)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+116) 
fmt : INT<4> [4,4]: ca(.text+116) 

raw : INT<4>: [4,4] 32 
fmt : INT<4> [4,4]: 50 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[66](0+ca(.debug_frame+108)-ca(.debug_frame+f4)) 
fmt : INT<4> [4,4]: cx[102](0+ca(.debug_frame+108)-ca(.debug_frame+f4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+148) 
fmt : INT<4> [4,4]: ca(.text+148) 

raw : INT<4>: [4,4] 18 
fmt : INT<4> [4,4]: 24 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[67](0+ca(.debug_frame+120)-ca(.debug_frame+10c)) 
fmt : INT<4> [4,4]: cx[103](0+ca(.debug_frame+120)-ca(.debug_frame+10c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+160) 
fmt : INT<4> [4,4]: ca(.text+160) 

raw : INT<4>: [4,4] 28 
fmt : INT<4> [4,4]: 40 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[68](0+ca(.debug_frame+138)-ca(.debug_frame+124)) 
fmt : INT<4> [4,4]: cx[104](0+ca(.debug_frame+138)-ca(.debug_frame+124)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+188) 
fmt : INT<4> [4,4]: ca(.text+188) 

raw : INT<4>: [4,4] 1a 
fmt : INT<4> [4,4]: 26 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[69](0+ca(.debug_frame+150)-ca(.debug_frame+13c)) 
fmt : INT<4> [4,4]: cx[105](0+ca(.debug_frame+150)-ca(.debug_frame+13c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+1a2) 
fmt : INT<4> [4,4]: ca(.text+1a2) 

raw : INT<4>: [4,4] 1c 
fmt : INT<4> [4,4]: 28 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6a](0+ca(.debug_frame+168)-ca(.debug_frame+154)) 
fmt : INT<4> [4,4]: cx[106](0+ca(.debug_frame+168)-ca(.debug_frame+154)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+1be) 
fmt : INT<4> [4,4]: ca(.text+1be) 

raw : INT<4>: [4,4] 1a 
fmt : INT<4> [4,4]: 26 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6b](0+ca(.debug_frame+180)-ca(.debug_frame+16c)) 
fmt : INT<4> [4,4]: cx[107](0+ca(.debug_frame+180)-ca(.debug_frame+16c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+1d8) 
fmt : INT<4> [4,4]: ca(.text+1d8) 

raw : INT<4>: [4,4] 2a 
fmt : INT<4> [4,4]: 42 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6c](0+ca(.debug_frame+198)-ca(.debug_frame+184)) 
fmt : INT<4> [4,4]: cx[108](0+ca(.debug_frame+198)-ca(.debug_frame+184)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+202) 
fmt : INT<4> [4,4]: ca(.text+202) 

raw : INT<4>: [4,4] 26 
fmt : INT<4> [4,4]: 38 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6d](0+ca(.debug_frame+1b0)-ca(.debug_frame+19c)) 
fmt : INT<4> [4,4]: cx[109](0+ca(.debug_frame+1b0)-ca(.debug_frame+19c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+228) 
fmt : INT<4> [4,4]: ca(.text+228) 

raw : INT<4>: [4,4] 42 
fmt : INT<4> [4,4]: 66 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6e](0+ca(.debug_frame+1c8)-ca(.debug_frame+1b4)) 
fmt : INT<4> [4,4]: cx[110](0+ca(.debug_frame+1c8)-ca(.debug_frame+1b4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+26a) 
fmt : INT<4> [4,4]: ca(.text+26a) 

raw : INT<4>: [4,4] 38 
fmt : INT<4> [4,4]: 56 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[6f](0+ca(.debug_frame+1e0)-ca(.debug_frame+1cc)) 
fmt : INT<4> [4,4]: cx[111](0+ca(.debug_frame+1e0)-ca(.debug_frame+1cc)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+2a2) 
fmt : INT<4> [4,4]: ca(.text+2a2) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[70](0+ca(.debug_frame+1f8)-ca(.debug_frame+1e4)) 
fmt : INT<4> [4,4]: cx[112](0+ca(.debug_frame+1f8)-ca(.debug_frame+1e4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+2dc) 
fmt : INT<4> [4,4]: ca(.text+2dc) 

raw : INT<4>: [4,4] 32 
fmt : INT<4> [4,4]: 50 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[71](0+ca(.debug_frame+210)-ca(.debug_frame+1fc)) 
fmt : INT<4> [4,4]: cx[113](0+ca(.debug_frame+210)-ca(.debug_frame+1fc)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+30e) 
fmt : INT<4> [4,4]: ca(.text+30e) 

raw : INT<4>: [4,4] 38 
fmt : INT<4> [4,4]: 56 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[72](0+ca(.debug_frame+228)-ca(.debug_frame+214)) 
fmt : INT<4> [4,4]: cx[114](0+ca(.debug_frame+228)-ca(.debug_frame+214)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+346) 
fmt : INT<4> [4,4]: ca(.text+346) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[73](0+ca(.debug_frame+240)-ca(.debug_frame+22c)) 
fmt : INT<4> [4,4]: cx[115](0+ca(.debug_frame+240)-ca(.debug_frame+22c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+380) 
fmt : INT<4> [4,4]: ca(.text+380) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[74](0+ca(.debug_frame+258)-ca(.debug_frame+244)) 
fmt : INT<4> [4,4]: cx[116](0+ca(.debug_frame+258)-ca(.debug_frame+244)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+3ba) 
fmt : INT<4> [4,4]: ca(.text+3ba) 

raw : INT<4>: [4,4] 40 
fmt : INT<4> [4,4]: 64 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[75](0+ca(.debug_frame+270)-ca(.debug_frame+25c)) 
fmt : INT<4> [4,4]: cx[117](0+ca(.debug_frame+270)-ca(.debug_frame+25c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+3fa) 
fmt : INT<4> [4,4]: ca(.text+3fa) 

raw : INT<4>: [4,4] 40 
fmt : INT<4> [4,4]: 64 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[76](0+ca(.debug_frame+288)-ca(.debug_frame+274)) 
fmt : INT<4> [4,4]: cx[118](0+ca(.debug_frame+288)-ca(.debug_frame+274)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+43a) 
fmt : INT<4> [4,4]: ca(.text+43a) 

raw : INT<4>: [4,4] 38 
fmt : INT<4> [4,4]: 56 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[77](0+ca(.debug_frame+2a0)-ca(.debug_frame+28c)) 
fmt : INT<4> [4,4]: cx[119](0+ca(.debug_frame+2a0)-ca(.debug_frame+28c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+472) 
fmt : INT<4> [4,4]: ca(.text+472) 

raw : INT<4>: [4,4] 38 
fmt : INT<4> [4,4]: 56 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[78](0+ca(.debug_frame+2b8)-ca(.debug_frame+2a4)) 
fmt : INT<4> [4,4]: cx[120](0+ca(.debug_frame+2b8)-ca(.debug_frame+2a4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+4aa) 
fmt : INT<4> [4,4]: ca(.text+4aa) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[79](0+ca(.debug_frame+2d0)-ca(.debug_frame+2bc)) 
fmt : INT<4> [4,4]: cx[121](0+ca(.debug_frame+2d0)-ca(.debug_frame+2bc)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+4e4) 
fmt : INT<4> [4,4]: ca(.text+4e4) 

raw : INT<4>: [4,4] 3a 
fmt : INT<4> [4,4]: 58 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[7a](0+ca(.debug_frame+2e8)-ca(.debug_frame+2d4)) 
fmt : INT<4> [4,4]: cx[122](0+ca(.debug_frame+2e8)-ca(.debug_frame+2d4)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+51e) 
fmt : INT<4> [4,4]: ca(.text+51e) 

raw : INT<4>: [4,4] 22 
fmt : INT<4> [4,4]: 34 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[7b](0+ca(.debug_frame+300)-ca(.debug_frame+2ec)) 
fmt : INT<4> [4,4]: cx[123](0+ca(.debug_frame+300)-ca(.debug_frame+2ec)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+540) 
fmt : INT<4> [4,4]: ca(.text+540) 

raw : INT<4>: [4,4] 3e 
fmt : INT<4> [4,4]: 62 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[7c](0+ca(.debug_frame+318)-ca(.debug_frame+304)) 
fmt : INT<4> [4,4]: cx[124](0+ca(.debug_frame+318)-ca(.debug_frame+304)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+57e) 
fmt : INT<4> [4,4]: ca(.text+57e) 

raw : INT<4>: [4,4] 6a 
fmt : INT<4> [4,4]: 106 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[7d](0+ca(.debug_frame+330)-ca(.debug_frame+31c)) 
fmt : INT<4> [4,4]: cx[125](0+ca(.debug_frame+330)-ca(.debug_frame+31c)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+5e8) 
fmt : INT<4> [4,4]: ca(.text+5e8) 

raw : INT<4>: [4,4] 56 
fmt : INT<4> [4,4]: 86 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 cx[7e](0+ca(.debug_frame+348)-ca(.debug_frame+334)) 
fmt : INT<4> [4,4]: cx[126](0+ca(.debug_frame+348)-ca(.debug_frame+334)) 

raw : LABEL: [0,0] 40004 
fmt : LABEL [0,0]: 

raw : INT<4>: [4,4] 0 ca(.debug_frame+0) 
fmt : INT<4> [4,4]: ca(.debug_frame+0) 

raw : INT<4>: [4,4] 0 ca(.text+63e) 
fmt : INT<4> [4,4]: ca(.text+63e) 

raw : INT<4>: [4,4] c0 
fmt : INT<4> [4,4]: 192 

raw : INT<1>: [1,1] 1000042 
fmt : INT<1> [1,1]: 66 

raw : INT<1>: [1,1] 100008e 
fmt : INT<1> [1,1]: 142 

raw : INT<1>: [1,1] 1000002 
fmt : INT<1> [1,1]: 2 

raw : INT<1>: [1,1] 100000c 
fmt : INT<1> [1,1]: 12 

raw : INT<1>: [1,1] 100000e 
fmt : INT<1> [1,1]: 14 

raw : INT<1>: [1,1] 1000008 
fmt : INT<1> [1,1]: 8 

raw : ALIGN: [0,0] 4 
fmt : ALIGN [0,0]: 4

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

0000_0000'                             .file   "putchar.c"
0000_0000'                             .text
0000_0000'                         .Ltext0:
0000_0000'                             .cfi_sections   .debug_frame
0000_0000'                             .align  2
0000_0000'                             .type   chk, @function
0000_0000'                         chk:
0000_0000'                         .LFB0:
0000_0000'                             .file 1 "chk.h"
0000_0000'                             .loc 1 32 0
0000_0000'                             .cfi_startproc
0000_0000'  4e56 fffc                  link.w %fp,#-4
0000_0004'                             .cfi_offset 14, -8
0000_0004'                             .cfi_def_cfa 14, 8
0000_0004'  222e 0008                  move.l 8(%fp),%d1
0000_0008'  202e 000c                  move.l 12(%fp),%d0
0000_000c'  3d41 fffe                  move.w %d1,-2(%fp)
0000_0010'  3d40 fffc                  move.w %d0,-4(%fp)
0000_0014'                             .loc 1 33 0
0000_0014'  302e fffe                  move.w -2(%fp),%d0
                                   ;| 33 "chk.h" 1
0000_0018'  41ae fffc                  chkw -4(%fp), %d0
                                   ;| 0 "" 2
0000_001c'                             .loc 1 34 0
0000_001c'  4e71                       nop
0000_001e'  4e5e                       unlk %fp
0000_0020'  4e75                       rts
0000_0022'                             .cfi_endproc
0000_0022'                         .LFE0:
            = 0000_0022                .size   chk, .-chk
0000_0022'                             .align  2
0000_0022'                             .type   abort, @function
0000_0022'                         abort:
0000_0022'                         .LFB2:
0000_0022'                             .file 2 "traps.h"
0000_0022'                             .loc 2 55 0
0000_0022'                             .cfi_startproc
0000_0022'  4e56 0000                  link.w %fp,#0
0000_0026'                             .cfi_offset 14, -8
0000_0026'                             .cfi_def_cfa 14, 8
0000_0026'                             .loc 2 56 0
0000_0026'                         | 56 "traps.h" 1
                                    <<-- Here
dummy_path:42:Error: Expecting: Opcode or Label
0000_0026'  4afc                       illegal
0000_0028'                         | 0 "" 2
                                    <<-- Here
dummy_path:44:Error: Expecting: Opcode or Label
0000_0028'                             .loc 2 57 0
0000_0028'  4eb9 0000_0000*            jsr __no_return
0000_002e'                             .cfi_endproc
0000_002e'                         .LFE2:
            = 0000_000c                .size   abort, .-abort
0000_002e'                             .align  2
0000_002e'                             .type   queue, @function
0000_002e'                         queue:
0000_002e'                         .LFB5:
0000_002e'                             .loc 2 87 0
0000_002e'                             .cfi_startproc
0000_002e'  4e56 0000                  link.w %fp,#0
0000_0032'                             .cfi_offset 14, -8
0000_0032'                             .cfi_def_cfa 14, 8
0000_0032'  2f03                       move.l %d3,-(%sp)
0000_0034'  2f02                       move.l %d2,-(%sp)
0000_0036'                             .cfi_offset 3, -12
0000_0036'                             .cfi_offset 2, -16
0000_0036'                             .loc 2 91 0
0000_0036'  202e 0008                  move.l 8(%fp),%d0
0000_003a'                             .loc 2 92 0
0000_003a'  222e 000c                  move.l 12(%fp),%d1
0000_003e'                             .loc 2 94 0
0000_003e'  2040                       move.l %d0,%a0
0000_0040'  4a88                       tst.l %a0
0000_0042'  67 0c                      jeq .L4
0000_0044'                             .loc 2 94 0 is_stmt 0 discriminator 1
0000_0044'  2040                       move.l %d0,%a0
0000_0046'  2408                       move.l %a0,%d2
0000_0048'  7601                       moveq #1,%d3
0000_004a'  c483                       and.l %d3,%d2
0000_004c'  4a82                       tst.l %d2
0000_004e'  67 04                      jeq .L5
0000_0050'                         .L4:
0000_0050'                             .loc 2 95 0 is_stmt 1
0000_0050'  4eba ffd0                  jsr abort
0000_0054'                         .L5:
0000_0054'                             .loc 2 97 0
0000_0054'                         | 97 "traps.h" 1
                                    <<-- Here
dummy_path:83:Error: Expecting: Opcode or Label
0000_0054'  4e42                       trap #2
0000_0056'                         | 0 "" 2
                                    <<-- Here
dummy_path:85:Error: Expecting: Opcode or Label
0000_0056'                             .loc 2 99 0
0000_0056'  4e71                       nop
0000_0058'  242e fff8                  move.l -8(%fp),%d2
0000_005c'  262e fffc                  move.l -4(%fp),%d3
0000_0060'  4e5e                       unlk %fp
0000_0062'  4e75                       rts
0000_0064'                             .cfi_endproc
0000_0064'                         .LFE5:
            = 0000_0036                .size   queue, .-queue
0000_0064'                             .align  2
0000_0064'                             .globl  mb_free
0000_0064'                             .type   mb_free, @function
0000_0064'                         mb_free:
0000_0064'                         .LFB7:
0000_0064'                             .file 3 "mbuf.h"
0000_0064'                             .loc 3 140 0
0000_0064'                             .cfi_startproc
0000_0064'  4e56 0000                  link.w %fp,#0
0000_0068'                             .cfi_offset 14, -8
0000_0068'                             .cfi_def_cfa 14, 8
0000_0068'                             .loc 3 140 0
0000_0068'  4aae 0008                  tst.l 8(%fp)
0000_006c'  67 1e                      jeq .L7
0000_006e'                             .loc 3 140 0 is_stmt 0 discriminator 1
0000_006e'  206e 0008                  move.l 8(%fp),%a0
0000_0072'  1028 0007                  move.b 7(%a0),%d0
0000_0076'  5300                       subq.b #1,%d0
0000_0078'  206e 0008                  move.l 8(%fp),%a0
0000_007c'  1140 0007                  move.b %d0,7(%a0)
0000_0080'  206e 0008                  move.l 8(%fp),%a0
0000_0084'  1028 0007                  move.b 7(%a0),%d0
0000_0088'  4a00                       tst.b %d0
0000_008a'  66 0c                      jne .L9
0000_008c'                         .L7:
0000_008c'                             .loc 3 141 0 is_stmt 1
0000_008c'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_0090'  4eb9 0000_0000*            jsr _mb_unlink
0000_0096'  588f                       addq.l #4,%sp
0000_0098'                         .L9:
0000_0098'                             .loc 3 140 0
0000_0098'  4e71                       nop
0000_009a'  4e5e                       unlk %fp
0000_009c'  4e75                       rts
0000_009e'                             .cfi_endproc
0000_009e'                         .LFE7:
            = 0000_003a                .size   mb_free, .-mb_free
0000_009e'                             .align  2
0000_009e'                             .globl  mb_link
0000_009e'                             .type   mb_link, @function
0000_009e'                         mb_link:
0000_009e'                         .LFB8:
0000_009e'                             .loc 3 142 0
0000_009e'                             .cfi_startproc
0000_009e'  4e56 0000                  link.w %fp,#0
0000_00a2'                             .cfi_offset 14, -8
0000_00a2'                             .cfi_def_cfa 14, 8
0000_00a2'                             .loc 3 142 0
0000_00a2'  206e 0008                  move.l 8(%fp),%a0
0000_00a6'  1028 0007                  move.b 7(%a0),%d0
0000_00aa'  5200                       addq.b #1,%d0
0000_00ac'  206e 0008                  move.l 8(%fp),%a0
0000_00b0'  1140 0007                  move.b %d0,7(%a0)
0000_00b4'  202e 0008                  move.l 8(%fp),%d0
0000_00b8'  4e5e                       unlk %fp
0000_00ba'  4e75                       rts
0000_00bc'                             .cfi_endproc
0000_00bc'                         .LFE8:
            = 0000_001e                .size   mb_link, .-mb_link
0000_00bc'                             .align  2
0000_00bc'                             .globl  mb_get_links
0000_00bc'                             .type   mb_get_links, @function
0000_00bc'                         mb_get_links:
0000_00bc'                         .LFB9:
0000_00bc'                             .loc 3 143 0
0000_00bc'                             .cfi_startproc
0000_00bc'  4e56 0000                  link.w %fp,#0
0000_00c0'                             .cfi_offset 14, -8
0000_00c0'                             .cfi_def_cfa 14, 8
0000_00c0'                             .loc 3 143 0
0000_00c0'  206e 0008                  move.l 8(%fp),%a0
0000_00c4'  1028 0007                  move.b 7(%a0),%d0
0000_00c8'  1000                       move.b %d0,%d0
0000_00ca'  0280 0000_00ff             and.l #255,%d0
0000_00d0'  4e5e                       unlk %fp
0000_00d2'  4e75                       rts
0000_00d4'                             .cfi_endproc
0000_00d4'                         .LFE9:
            = 0000_0018                .size   mb_get_links, .-mb_get_links
0000_00d4'                             .align  2
0000_00d4'                             .globl  mb_empty
0000_00d4'                             .type   mb_empty, @function
0000_00d4'                         mb_empty:
0000_00d4'                         .LFB10:
0000_00d4'                             .loc 3 144 0
0000_00d4'                             .cfi_startproc
0000_00d4'  4e56 0000                  link.w %fp,#0
0000_00d8'                             .cfi_offset 14, -8
0000_00d8'                             .cfi_def_cfa 14, 8
0000_00d8'                             .loc 3 144 0
0000_00d8'  206e 0008                  move.l 8(%fp),%a0
0000_00dc'  3210                       move.w (%a0),%d1
0000_00de'  206e 0008                  move.l 8(%fp),%a0
0000_00e2'  3028 0002                  move.w 2(%a0),%d0
0000_00e6'  b041                       cmp.w %d1,%d0
0000_00e8'  57c0                       seq %d0
0000_00ea'  4400                       neg.b %d0
0000_00ec'  1000                       move.b %d0,%d0
0000_00ee'  0280 0000_00ff             and.l #255,%d0
0000_00f4'  4e5e                       unlk %fp
0000_00f6'  4e75                       rts
0000_00f8'                             .cfi_endproc
0000_00f8'                         .LFE10:
            = 0000_0024                .size   mb_empty, .-mb_empty
0000_00f8'                             .align  2
0000_00f8'                             .globl  mb_len
0000_00f8'                             .type   mb_len, @function
0000_00f8'                         mb_len:
0000_00f8'                         .LFB11:
0000_00f8'                             .loc 3 145 0
0000_00f8'                             .cfi_startproc
0000_00f8'  4e56 0000                  link.w %fp,#0
0000_00fc'                             .cfi_offset 14, -8
0000_00fc'                             .cfi_def_cfa 14, 8
0000_00fc'                             .loc 3 145 0
0000_00fc'  206e 0008                  move.l 8(%fp),%a0
0000_0100'  3010                       move.w (%a0),%d0
0000_0102'  3200                       move.w %d0,%d1
0000_0104'  206e 0008                  move.l 8(%fp),%a0
0000_0108'  3028 0002                  move.w 2(%a0),%d0
0000_010c'  3041                       move.w %d1,%a0
0000_010e'  90c0                       sub.w %d0,%a0
0000_0110'  3008                       move.w %a0,%d0
0000_0112'  4e5e                       unlk %fp
0000_0114'  4e75                       rts
0000_0116'                             .cfi_endproc
0000_0116'                         .LFE11:
            = 0000_001e                .size   mb_len, .-mb_len
0000_0116'                             .align  2
0000_0116'                             .globl  mb_room
0000_0116'                             .type   mb_room, @function
0000_0116'                         mb_room:
0000_0116'                         .LFB12:
0000_0116'                             .loc 3 147 0
0000_0116'                             .cfi_startproc
0000_0116'  4e56 fffc                  link.w %fp,#-4
0000_011a'                             .cfi_offset 14, -8
0000_011a'                             .cfi_def_cfa 14, 8
0000_011a'  202e 000c                  move.l 12(%fp),%d0
0000_011e'  3d40 fffe                  move.w %d0,-2(%fp)
0000_0122'                             .loc 3 147 0
0000_0122'  326e fffe                  move.w -2(%fp),%a1
0000_0126'  206e 0008                  move.l 8(%fp),%a0
0000_012a'  3010                       move.w (%a0),%d0
0000_012c'  3040                       move.w %d0,%a0
0000_012e'  2009                       move.l %a1,%d0
0000_0130'  d088                       add.l %a0,%d0
0000_0132'  0c80 0000_02ef             cmp.l #751,%d0
0000_0138'  53c0                       sls %d0
0000_013a'  4400                       neg.b %d0
0000_013c'  1000                       move.b %d0,%d0
0000_013e'  0280 0000_00ff             and.l #255,%d0
0000_0144'  4e5e                       unlk %fp
0000_0146'  4e75                       rts
0000_0148'                             .cfi_endproc
0000_0148'                         .LFE12:
            = 0000_0032                .size   mb_room, .-mb_room
0000_0148'                             .align  2
0000_0148'                             .globl  mb_left
0000_0148'                             .type   mb_left, @function
0000_0148'                         mb_left:
0000_0148'                         .LFB13:
0000_0148'                             .loc 3 148 0
0000_0148'                             .cfi_startproc
0000_0148'  4e56 0000                  link.w %fp,#0
0000_014c'                             .cfi_offset 14, -8
0000_014c'                             .cfi_def_cfa 14, 8
0000_014c'                             .loc 3 148 0
0000_014c'  206e 0008                  move.l 8(%fp),%a0
0000_0150'  3010                       move.w (%a0),%d0
0000_0152'  3040                       move.w %d0,%a0
0000_0154'  203c 0000_02ef             move.l #751,%d0
0000_015a'  9088                       sub.l %a0,%d0
0000_015c'  4e5e                       unlk %fp
0000_015e'  4e75                       rts
0000_0160'                             .cfi_endproc
0000_0160'                         .LFE13:
            = 0000_0018                .size   mb_left, .-mb_left
0000_0160'                             .align  2
0000_0160'                             .globl  mb_hroom
0000_0160'                             .type   mb_hroom, @function
0000_0160'                         mb_hroom:
0000_0160'                         .LFB14:
0000_0160'                             .loc 3 150 0
0000_0160'                             .cfi_startproc
0000_0160'  4e56 fffc                  link.w %fp,#-4
0000_0164'                             .cfi_offset 14, -8
0000_0164'                             .cfi_def_cfa 14, 8
0000_0164'  202e 000c                  move.l 12(%fp),%d0
0000_0168'  3d40 fffe                  move.w %d0,-2(%fp)
0000_016c'                             .loc 3 150 0
0000_016c'  206e 0008                  move.l 8(%fp),%a0
0000_0170'  3028 0002                  move.w 2(%a0),%d0
0000_0174'  b06e fffe                  cmp.w -2(%fp),%d0
0000_0178'  5cc0                       sge %d0
0000_017a'  4400                       neg.b %d0
0000_017c'  1000                       move.b %d0,%d0
0000_017e'  0280 0000_00ff             and.l #255,%d0
0000_0184'  4e5e                       unlk %fp
0000_0186'  4e75                       rts
0000_0188'                             .cfi_endproc
0000_0188'                         .LFE14:
            = 0000_0028                .size   mb_hroom, .-mb_hroom
0000_0188'                             .align  2
0000_0188'                             .globl  mb_top
0000_0188'                             .type   mb_top, @function
0000_0188'                         mb_top:
0000_0188'                         .LFB15:
0000_0188'                             .loc 3 151 0
0000_0188'                             .cfi_startproc
0000_0188'  4e56 0000                  link.w %fp,#0
0000_018c'                             .cfi_offset 14, -8
0000_018c'                             .cfi_def_cfa 14, 8
0000_018c'                             .loc 3 151 0
0000_018c'  206e 0008                  move.l 8(%fp),%a0
0000_0190'  3028 0002                  move.w 2(%a0),%d0
0000_0194'  206e 0008                  move.l 8(%fp),%a0
0000_0198'  3140 0004                  move.w %d0,4(%a0)
0000_019c'  4e71                       nop
0000_019e'  4e5e                       unlk %fp
0000_01a0'  4e75                       rts
0000_01a2'                             .cfi_endproc
0000_01a2'                         .LFE15:
            = 0000_001a                .size   mb_top, .-mb_top
0000_01a2'                             .align  2
0000_01a2'                             .globl  mb_hptr
0000_01a2'                             .type   mb_hptr, @function
0000_01a2'                         mb_hptr:
0000_01a2'                         .LFB16:
0000_01a2'                             .loc 3 152 0
0000_01a2'                             .cfi_startproc
0000_01a2'  4e56 0000                  link.w %fp,#0
0000_01a6'                             .cfi_offset 14, -8
0000_01a6'                             .cfi_def_cfa 14, 8
0000_01a6'                             .loc 3 152 0
0000_01a6'  206e 0008                  move.l 8(%fp),%a0
0000_01aa'  3028 0002                  move.w 2(%a0),%d0
0000_01ae'  3040                       move.w %d0,%a0
0000_01b0'  41e8 0010                  lea (16,%a0),%a0
0000_01b4'  202e 0008                  move.l 8(%fp),%d0
0000_01b8'  d088                       add.l %a0,%d0
0000_01ba'  4e5e                       unlk %fp
0000_01bc'  4e75                       rts
0000_01be'                             .cfi_endproc
0000_01be'                         .LFE16:
            = 0000_001c                .size   mb_hptr, .-mb_hptr
0000_01be'                             .align  2
0000_01be'                             .globl  mb_tptr
0000_01be'                             .type   mb_tptr, @function
0000_01be'                         mb_tptr:
0000_01be'                         .LFB17:
0000_01be'                             .loc 3 153 0
0000_01be'                             .cfi_startproc
0000_01be'  4e56 0000                  link.w %fp,#0
0000_01c2'                             .cfi_offset 14, -8
0000_01c2'                             .cfi_def_cfa 14, 8
0000_01c2'                             .loc 3 153 0
0000_01c2'  206e 0008                  move.l 8(%fp),%a0
0000_01c6'  3010                       move.w (%a0),%d0
0000_01c8'  3040                       move.w %d0,%a0
0000_01ca'  41e8 0010                  lea (16,%a0),%a0
0000_01ce'  202e 0008                  move.l 8(%fp),%d0
0000_01d2'  d088                       add.l %a0,%d0
0000_01d4'  4e5e                       unlk %fp
0000_01d6'  4e75                       rts
0000_01d8'                             .cfi_endproc
0000_01d8'                         .LFE17:
            = 0000_001a                .size   mb_tptr, .-mb_tptr
0000_01d8'                             .align  2
0000_01d8'                             .globl  mb_skip
0000_01d8'                             .type   mb_skip, @function
0000_01d8'                         mb_skip:
0000_01d8'                         .LFB18:
0000_01d8'                             .loc 3 154 0
0000_01d8'                             .cfi_startproc
0000_01d8'  4e56 fffc                  link.w %fp,#-4
0000_01dc'                             .cfi_offset 14, -8
0000_01dc'                             .cfi_def_cfa 14, 8
0000_01dc'  202e 000c                  move.l 12(%fp),%d0
0000_01e0'  3d40 fffe                  move.w %d0,-2(%fp)
0000_01e4'                             .loc 3 154 0
0000_01e4'  206e 0008                  move.l 8(%fp),%a0
0000_01e8'  3028 0002                  move.w 2(%a0),%d0
0000_01ec'  3200                       move.w %d0,%d1
0000_01ee'  302e fffe                  move.w -2(%fp),%d0
0000_01f2'  d041                       add.w %d1,%d0
0000_01f4'  206e 0008                  move.l 8(%fp),%a0
0000_01f8'  3140 0002                  move.w %d0,2(%a0)
0000_01fc'  4e71                       nop
0000_01fe'  4e5e                       unlk %fp
0000_0200'  4e75                       rts
0000_0202'                             .cfi_endproc
0000_0202'                         .LFE18:
            = 0000_002a                .size   mb_skip, .-mb_skip
0000_0202'                             .align  2
0000_0202'                             .globl  mb_tadv
0000_0202'                             .type   mb_tadv, @function
0000_0202'                         mb_tadv:
0000_0202'                         .LFB19:
0000_0202'                             .loc 3 155 0
0000_0202'                             .cfi_startproc
0000_0202'  4e56 fffc                  link.w %fp,#-4
0000_0206'                             .cfi_offset 14, -8
0000_0206'                             .cfi_def_cfa 14, 8
0000_0206'  202e 000c                  move.l 12(%fp),%d0
0000_020a'  3d40 fffe                  move.w %d0,-2(%fp)
0000_020e'                             .loc 3 155 0
0000_020e'  206e 0008                  move.l 8(%fp),%a0
0000_0212'  3010                       move.w (%a0),%d0
0000_0214'  3200                       move.w %d0,%d1
0000_0216'  302e fffe                  move.w -2(%fp),%d0
0000_021a'  d041                       add.w %d1,%d0
0000_021c'  206e 0008                  move.l 8(%fp),%a0
0000_0220'  3080                       move.w %d0,(%a0)
0000_0222'  4e71                       nop
0000_0224'  4e5e                       unlk %fp
0000_0226'  4e75                       rts
0000_0228'                             .cfi_endproc
0000_0228'                         .LFE19:
            = 0000_0026                .size   mb_tadv, .-mb_tadv
0000_0228'                             .align  2
0000_0228'                             .globl  mb_flush
0000_0228'                             .type   mb_flush, @function
0000_0228'                         mb_flush:
0000_0228'                         .LFB20:
0000_0228'                             .loc 3 157 0
0000_0228'                             .cfi_startproc
0000_0228'  4e56 fffc                  link.w %fp,#-4
0000_022c'                             .cfi_offset 14, -8
0000_022c'                             .cfi_def_cfa 14, 8
0000_022c'  202e 000c                  move.l 12(%fp),%d0
0000_0230'  3d40 fffe                  move.w %d0,-2(%fp)
0000_0234'                             .loc 3 157 0
0000_0234'  302e fffe                  move.w -2(%fp),%d0
0000_0238'  3000                       move.w %d0,%d0
0000_023a'  0280 0000_ffff             and.l #65535,%d0
0000_0240'  4878 02ef                  pea 751 ;.w
0000_0244'  2f00                       move.l %d0,-(%sp)
0000_0246'  4eba fdb8                  jsr chk
0000_024a'  508f                       addq.l #8,%sp
0000_024c'                             .loc 3 158 0
0000_024c'  206e 0008                  move.l 8(%fp),%a0
0000_0250'  316e fffe 0002             move.w -2(%fp),2(%a0)
0000_0256'  206e 0008                  move.l 8(%fp),%a0
0000_025a'  3028 0002                  move.w 2(%a0),%d0
0000_025e'  206e 0008                  move.l 8(%fp),%a0
0000_0262'  3080                       move.w %d0,(%a0)
0000_0264'  4e71                       nop
0000_0266'  4e5e                       unlk %fp
0000_0268'  4e75                       rts
0000_026a'                             .cfi_endproc
0000_026a'                         .LFE20:
            = 0000_0042                .size   mb_flush, .-mb_flush
0000_026a'                             .align  2
0000_026a'                             .globl  mb_putc
0000_026a'                             .type   mb_putc, @function
0000_026a'                         mb_putc:
0000_026a'                         .LFB21:
0000_026a'                             .loc 3 160 0
0000_026a'                             .cfi_startproc
0000_026a'  4e56 fff8                  link.w %fp,#-8
0000_026e'                             .cfi_offset 14, -8
0000_026e'                             .cfi_def_cfa 14, 8
0000_026e'  202e 000c                  move.l 12(%fp),%d0
0000_0272'  1d40 fffa                  move.b %d0,-6(%fp)
0000_0276'                         .LBB2:
0000_0276'                             .loc 3 160 0
0000_0276'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_027c'  206e fffc                  move.l -4(%fp),%a0
0000_0280'  3010                       move.w (%a0),%d0
0000_0282'  3040                       move.w %d0,%a0
0000_0284'  226e fffc                  move.l -4(%fp),%a1
0000_0288'  13ae fffa 8810             move.b -6(%fp),16(%a1,%a0.l)
0000_028e'  206e fffc                  move.l -4(%fp),%a0
0000_0292'  3010                       move.w (%a0),%d0
0000_0294'  5240                       addq.w #1,%d0
0000_0296'  206e fffc                  move.l -4(%fp),%a0
0000_029a'  3080                       move.w %d0,(%a0)
0000_029c'                         .LBE2:
0000_029c'  4e71                       nop
0000_029e'  4e5e                       unlk %fp
0000_02a0'  4e75                       rts
0000_02a2'                             .cfi_endproc
0000_02a2'                         .LFE21:
            = 0000_0038                .size   mb_putc, .-mb_putc
0000_02a2'                             .align  2
0000_02a2'                             .globl  mb_putw
0000_02a2'                             .type   mb_putw, @function
0000_02a2'                         mb_putw:
0000_02a2'                         .LFB22:
0000_02a2'                             .loc 3 161 0
0000_02a2'                             .cfi_startproc
0000_02a2'  4e56 fff8                  link.w %fp,#-8
0000_02a6'                             .cfi_offset 14, -8
0000_02a6'                             .cfi_def_cfa 14, 8
0000_02a6'  202e 000c                  move.l 12(%fp),%d0
0000_02aa'  3d40 fffa                  move.w %d0,-6(%fp)
0000_02ae'                         .LBB3:
0000_02ae'                             .loc 3 161 0
0000_02ae'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_02b4'  206e fffc                  move.l -4(%fp),%a0
0000_02b8'  3010                       move.w (%a0),%d0
0000_02ba'  3040                       move.w %d0,%a0
0000_02bc'  41e8 0010                  lea (16,%a0),%a0
0000_02c0'  d1ee fffc                  add.l -4(%fp),%a0
0000_02c4'  30ae fffa                  move.w -6(%fp),(%a0)
0000_02c8'  206e fffc                  move.l -4(%fp),%a0
0000_02cc'  3010                       move.w (%a0),%d0
0000_02ce'  5440                       addq.w #2,%d0
0000_02d0'  206e fffc                  move.l -4(%fp),%a0
0000_02d4'  3080                       move.w %d0,(%a0)
0000_02d6'                         .LBE3:
0000_02d6'  4e71                       nop
0000_02d8'  4e5e                       unlk %fp
0000_02da'  4e75                       rts
0000_02dc'                             .cfi_endproc
0000_02dc'                         .LFE22:
            = 0000_003a                .size   mb_putw, .-mb_putw
0000_02dc'                             .align  2
0000_02dc'                             .globl  mb_putl
0000_02dc'                             .type   mb_putl, @function
0000_02dc'                         mb_putl:
0000_02dc'                         .LFB23:
0000_02dc'                             .loc 3 162 0
0000_02dc'                             .cfi_startproc
0000_02dc'  4e56 fffc                  link.w %fp,#-4
0000_02e0'                             .cfi_offset 14, -8
0000_02e0'                             .cfi_def_cfa 14, 8
0000_02e0'                         .LBB4:
0000_02e0'                             .loc 3 162 0
0000_02e0'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_02e6'  206e fffc                  move.l -4(%fp),%a0
0000_02ea'  3010                       move.w (%a0),%d0
0000_02ec'  3040                       move.w %d0,%a0
0000_02ee'  41e8 0010                  lea (16,%a0),%a0
0000_02f2'  d1ee fffc                  add.l -4(%fp),%a0
0000_02f6'  20ae 000c                  move.l 12(%fp),(%a0)
0000_02fa'  206e fffc                  move.l -4(%fp),%a0
0000_02fe'  3010                       move.w (%a0),%d0
0000_0300'  5840                       addq.w #4,%d0
0000_0302'  206e fffc                  move.l -4(%fp),%a0
0000_0306'  3080                       move.w %d0,(%a0)
0000_0308'                         .LBE4:
0000_0308'  4e71                       nop
0000_030a'  4e5e                       unlk %fp
0000_030c'  4e75                       rts
0000_030e'                             .cfi_endproc
0000_030e'                         .LFE23:
            = 0000_0032                .size   mb_putl, .-mb_putl
0000_030e'                             .align  2
0000_030e'                             .globl  mb_getc
0000_030e'                             .type   mb_getc, @function
0000_030e'                         mb_getc:
0000_030e'                         .LFB24:
0000_030e'                             .loc 3 165 0
0000_030e'                             .cfi_startproc
0000_030e'  4e56 fff8                  link.w %fp,#-8
0000_0312'                             .cfi_offset 14, -8
0000_0312'                             .cfi_def_cfa 14, 8
0000_0312'                         .LBB5:
0000_0312'                             .loc 3 165 0
0000_0312'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_0318'  206e fffc                  move.l -4(%fp),%a0
0000_031c'  3028 0004                  move.w 4(%a0),%d0
0000_0320'  3040                       move.w %d0,%a0
0000_0322'  226e fffc                  move.l -4(%fp),%a1
0000_0326'  1d71 8810 fffb             move.b 16(%a1,%a0.l),-5(%fp)
0000_032c'  206e fffc                  move.l -4(%fp),%a0
0000_0330'  3028 0004                  move.w 4(%a0),%d0
0000_0334'  5240                       addq.w #1,%d0
0000_0336'  206e fffc                  move.l -4(%fp),%a0
0000_033a'  3140 0004                  move.w %d0,4(%a0)
0000_033e'  102e fffb                  move.b -5(%fp),%d0
0000_0342'                         .LBE5:
0000_0342'                             .loc 3 164 0
0000_0342'  4e5e                       unlk %fp
0000_0344'  4e75                       rts
0000_0346'                             .cfi_endproc
0000_0346'                         .LFE24:
            = 0000_0038                .size   mb_getc, .-mb_getc
0000_0346'                             .align  2
0000_0346'                             .globl  mb_getw
0000_0346'                             .type   mb_getw, @function
0000_0346'                         mb_getw:
0000_0346'                         .LFB25:
0000_0346'                             .loc 3 167 0
0000_0346'                             .cfi_startproc
0000_0346'  4e56 fff8                  link.w %fp,#-8
0000_034a'                             .cfi_offset 14, -8
0000_034a'                             .cfi_def_cfa 14, 8
0000_034a'                         .LBB6:
0000_034a'                             .loc 3 167 0
0000_034a'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_0350'  206e fffc                  move.l -4(%fp),%a0
0000_0354'  3028 0004                  move.w 4(%a0),%d0
0000_0358'  3040                       move.w %d0,%a0
0000_035a'  41e8 0010                  lea (16,%a0),%a0
0000_035e'  d1ee fffc                  add.l -4(%fp),%a0
0000_0362'  3d50 fffa                  move.w (%a0),-6(%fp)
0000_0366'  206e fffc                  move.l -4(%fp),%a0
0000_036a'  3028 0004                  move.w 4(%a0),%d0
0000_036e'  5440                       addq.w #2,%d0
0000_0370'  206e fffc                  move.l -4(%fp),%a0
0000_0374'  3140 0004                  move.w %d0,4(%a0)
0000_0378'  302e fffa                  move.w -6(%fp),%d0
0000_037c'                         .LBE6:
0000_037c'                             .loc 3 166 0
0000_037c'  4e5e                       unlk %fp
0000_037e'  4e75                       rts
0000_0380'                             .cfi_endproc
0000_0380'                         .LFE25:
            = 0000_003a                .size   mb_getw, .-mb_getw
0000_0380'                             .align  2
0000_0380'                             .globl  mb_getl
0000_0380'                             .type   mb_getl, @function
0000_0380'                         mb_getl:
0000_0380'                         .LFB26:
0000_0380'                             .loc 3 169 0
0000_0380'                             .cfi_startproc
0000_0380'  4e56 fff8                  link.w %fp,#-8
0000_0384'                             .cfi_offset 14, -8
0000_0384'                             .cfi_def_cfa 14, 8
0000_0384'                         .LBB7:
0000_0384'                             .loc 3 169 0
0000_0384'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_038a'  206e fffc                  move.l -4(%fp),%a0
0000_038e'  3028 0004                  move.w 4(%a0),%d0
0000_0392'  3040                       move.w %d0,%a0
0000_0394'  41e8 0010                  lea (16,%a0),%a0
0000_0398'  d1ee fffc                  add.l -4(%fp),%a0
0000_039c'  2d50 fff8                  move.l (%a0),-8(%fp)
0000_03a0'  206e fffc                  move.l -4(%fp),%a0
0000_03a4'  3028 0004                  move.w 4(%a0),%d0
0000_03a8'  5840                       addq.w #4,%d0
0000_03aa'  206e fffc                  move.l -4(%fp),%a0
0000_03ae'  3140 0004                  move.w %d0,4(%a0)
0000_03b2'  202e fff8                  move.l -8(%fp),%d0
0000_03b6'                         .LBE7:
0000_03b6'                             .loc 3 168 0
0000_03b6'  4e5e                       unlk %fp
0000_03b8'  4e75                       rts
0000_03ba'                             .cfi_endproc
0000_03ba'                         .LFE26:
            = 0000_003a                .size   mb_getl, .-mb_getl
0000_03ba'                             .align  2
0000_03ba'                             .globl  mb_pushc
0000_03ba'                             .type   mb_pushc, @function
0000_03ba'                         mb_pushc:
0000_03ba'                         .LFB27:
0000_03ba'                             .loc 3 171 0
0000_03ba'                             .cfi_startproc
0000_03ba'  4e56 fff8                  link.w %fp,#-8
0000_03be'                             .cfi_offset 14, -8
0000_03be'                             .cfi_def_cfa 14, 8
0000_03be'  202e 000c                  move.l 12(%fp),%d0
0000_03c2'  1d40 fffa                  move.b %d0,-6(%fp)
0000_03c6'                         .LBB8:
0000_03c6'                             .loc 3 171 0
0000_03c6'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_03cc'  206e fffc                  move.l -4(%fp),%a0
0000_03d0'  3028 0002                  move.w 2(%a0),%d0
0000_03d4'  5340                       subq.w #1,%d0
0000_03d6'  206e fffc                  move.l -4(%fp),%a0
0000_03da'  3140 0002                  move.w %d0,2(%a0)
0000_03de'  206e fffc                  move.l -4(%fp),%a0
0000_03e2'  3028 0002                  move.w 2(%a0),%d0
0000_03e6'  3040                       move.w %d0,%a0
0000_03e8'  41e8 0010                  lea (16,%a0),%a0
0000_03ec'  d1ee fffc                  add.l -4(%fp),%a0
0000_03f0'  10ae fffa                  move.b -6(%fp),(%a0)
0000_03f4'                         .LBE8:
0000_03f4'  4e71                       nop
0000_03f6'  4e5e                       unlk %fp
0000_03f8'  4e75                       rts
0000_03fa'                             .cfi_endproc
0000_03fa'                         .LFE27:
            = 0000_0040                .size   mb_pushc, .-mb_pushc
0000_03fa'                             .align  2
0000_03fa'                             .globl  mb_pushw
0000_03fa'                             .type   mb_pushw, @function
0000_03fa'                         mb_pushw:
0000_03fa'                         .LFB28:
0000_03fa'                             .loc 3 172 0
0000_03fa'                             .cfi_startproc
0000_03fa'  4e56 fff8                  link.w %fp,#-8
0000_03fe'                             .cfi_offset 14, -8
0000_03fe'                             .cfi_def_cfa 14, 8
0000_03fe'  202e 000c                  move.l 12(%fp),%d0
0000_0402'  3d40 fffa                  move.w %d0,-6(%fp)
0000_0406'                         .LBB9:
0000_0406'                             .loc 3 172 0
0000_0406'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_040c'  206e fffc                  move.l -4(%fp),%a0
0000_0410'  3028 0002                  move.w 2(%a0),%d0
0000_0414'  5540                       subq.w #2,%d0
0000_0416'  206e fffc                  move.l -4(%fp),%a0
0000_041a'  3140 0002                  move.w %d0,2(%a0)
0000_041e'  206e fffc                  move.l -4(%fp),%a0
0000_0422'  3028 0002                  move.w 2(%a0),%d0
0000_0426'  3040                       move.w %d0,%a0
0000_0428'  41e8 0010                  lea (16,%a0),%a0
0000_042c'  d1ee fffc                  add.l -4(%fp),%a0
0000_0430'  30ae fffa                  move.w -6(%fp),(%a0)
0000_0434'                         .LBE9:
0000_0434'  4e71                       nop
0000_0436'  4e5e                       unlk %fp
0000_0438'  4e75                       rts
0000_043a'                             .cfi_endproc
0000_043a'                         .LFE28:
            = 0000_0040                .size   mb_pushw, .-mb_pushw
0000_043a'                             .align  2
0000_043a'                             .globl  mb_pushl
0000_043a'                             .type   mb_pushl, @function
0000_043a'                         mb_pushl:
0000_043a'                         .LFB29:
0000_043a'                             .loc 3 173 0
0000_043a'                             .cfi_startproc
0000_043a'  4e56 fffc                  link.w %fp,#-4
0000_043e'                             .cfi_offset 14, -8
0000_043e'                             .cfi_def_cfa 14, 8
0000_043e'                         .LBB10:
0000_043e'                             .loc 3 173 0
0000_043e'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_0444'  206e fffc                  move.l -4(%fp),%a0
0000_0448'  3028 0002                  move.w 2(%a0),%d0
0000_044c'  5940                       subq.w #4,%d0
0000_044e'  206e fffc                  move.l -4(%fp),%a0
0000_0452'  3140 0002                  move.w %d0,2(%a0)
0000_0456'  206e fffc                  move.l -4(%fp),%a0
0000_045a'  3028 0002                  move.w 2(%a0),%d0
0000_045e'  3040                       move.w %d0,%a0
0000_0460'  41e8 0010                  lea (16,%a0),%a0
0000_0464'  d1ee fffc                  add.l -4(%fp),%a0
0000_0468'  20ae 000c                  move.l 12(%fp),(%a0)
0000_046c'                         .LBE10:
0000_046c'  4e71                       nop
0000_046e'  4e5e                       unlk %fp
0000_0470'  4e75                       rts
0000_0472'                             .cfi_endproc
0000_0472'                         .LFE29:
            = 0000_0038                .size   mb_pushl, .-mb_pushl
0000_0472'                             .align  2
0000_0472'                             .globl  mb_popc
0000_0472'                             .type   mb_popc, @function
0000_0472'                         mb_popc:
0000_0472'                         .LFB30:
0000_0472'                             .loc 3 176 0
0000_0472'                             .cfi_startproc
0000_0472'  4e56 fff8                  link.w %fp,#-8
0000_0476'                             .cfi_offset 14, -8
0000_0476'                             .cfi_def_cfa 14, 8
0000_0476'                         .LBB11:
0000_0476'                             .loc 3 176 0
0000_0476'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_047c'  206e fffc                  move.l -4(%fp),%a0
0000_0480'  3028 0002                  move.w 2(%a0),%d0
0000_0484'  3040                       move.w %d0,%a0
0000_0486'  226e fffc                  move.l -4(%fp),%a1
0000_048a'  1d71 8810 fffb             move.b 16(%a1,%a0.l),-5(%fp)
0000_0490'  206e fffc                  move.l -4(%fp),%a0
0000_0494'  3028 0002                  move.w 2(%a0),%d0
0000_0498'  5240                       addq.w #1,%d0
0000_049a'  206e fffc                  move.l -4(%fp),%a0
0000_049e'  3140 0002                  move.w %d0,2(%a0)
0000_04a2'  102e fffb                  move.b -5(%fp),%d0
0000_04a6'                         .LBE11:
0000_04a6'                             .loc 3 175 0
0000_04a6'  4e5e                       unlk %fp
0000_04a8'  4e75                       rts
0000_04aa'                             .cfi_endproc
0000_04aa'                         .LFE30:
            = 0000_0038                .size   mb_popc, .-mb_popc
0000_04aa'                             .align  2
0000_04aa'                             .globl  mb_popw
0000_04aa'                             .type   mb_popw, @function
0000_04aa'                         mb_popw:
0000_04aa'                         .LFB31:
0000_04aa'                             .loc 3 178 0
0000_04aa'                             .cfi_startproc
0000_04aa'  4e56 fff8                  link.w %fp,#-8
0000_04ae'                             .cfi_offset 14, -8
0000_04ae'                             .cfi_def_cfa 14, 8
0000_04ae'                         .LBB12:
0000_04ae'                             .loc 3 178 0
0000_04ae'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_04b4'  206e fffc                  move.l -4(%fp),%a0
0000_04b8'  3028 0002                  move.w 2(%a0),%d0
0000_04bc'  3040                       move.w %d0,%a0
0000_04be'  41e8 0010                  lea (16,%a0),%a0
0000_04c2'  d1ee fffc                  add.l -4(%fp),%a0
0000_04c6'  3d50 fffa                  move.w (%a0),-6(%fp)
0000_04ca'  206e fffc                  move.l -4(%fp),%a0
0000_04ce'  3028 0002                  move.w 2(%a0),%d0
0000_04d2'  5440                       addq.w #2,%d0
0000_04d4'  206e fffc                  move.l -4(%fp),%a0
0000_04d8'  3140 0002                  move.w %d0,2(%a0)
0000_04dc'  302e fffa                  move.w -6(%fp),%d0
0000_04e0'                         .LBE12:
0000_04e0'                             .loc 3 177 0
0000_04e0'  4e5e                       unlk %fp
0000_04e2'  4e75                       rts
0000_04e4'                             .cfi_endproc
0000_04e4'                         .LFE31:
            = 0000_003a                .size   mb_popw, .-mb_popw
0000_04e4'                             .align  2
0000_04e4'                             .globl  mb_popl
0000_04e4'                             .type   mb_popl, @function
0000_04e4'                         mb_popl:
0000_04e4'                         .LFB32:
0000_04e4'                             .loc 3 180 0
0000_04e4'                             .cfi_startproc
0000_04e4'  4e56 fff8                  link.w %fp,#-8
0000_04e8'                             .cfi_offset 14, -8
0000_04e8'                             .cfi_def_cfa 14, 8
0000_04e8'                         .LBB13:
0000_04e8'                             .loc 3 180 0
0000_04e8'  2d6e 0008 fffc             move.l 8(%fp),-4(%fp)
0000_04ee'  206e fffc                  move.l -4(%fp),%a0
0000_04f2'  3028 0002                  move.w 2(%a0),%d0
0000_04f6'  3040                       move.w %d0,%a0
0000_04f8'  41e8 0010                  lea (16,%a0),%a0
0000_04fc'  d1ee fffc                  add.l -4(%fp),%a0
0000_0500'  2d50 fff8                  move.l (%a0),-8(%fp)
0000_0504'  206e fffc                  move.l -4(%fp),%a0
0000_0508'  3028 0002                  move.w 2(%a0),%d0
0000_050c'  5840                       addq.w #4,%d0
0000_050e'  206e fffc                  move.l -4(%fp),%a0
0000_0512'  3140 0002                  move.w %d0,2(%a0)
0000_0516'  202e fff8                  move.l -8(%fp),%d0
0000_051a'                         .LBE13:
0000_051a'                             .loc 3 179 0
0000_051a'  4e5e                       unlk %fp
0000_051c'  4e75                       rts
0000_051e'                             .cfi_endproc
0000_051e'                         .LFE32:
            = 0000_003a                .size   mb_popl, .-mb_popl
0000_051e'                             .align  2
0000_051e'                             .type   exec, @function
0000_051e'                         exec:
0000_051e'                         .LFB33:
0000_051e'                             .file 4 "proc.h"
0000_051e'                             .loc 4 35 0
0000_051e'                             .cfi_startproc
0000_051e'  4e56 0000                  link.w %fp,#0
0000_0522'                             .cfi_offset 14, -8
0000_0522'                             .cfi_def_cfa 14, 8
0000_0522'                             .loc 4 35 0
0000_0522'  206e 0008                  move.l 8(%fp),%a0
0000_0526'  2050                       move.l (%a0),%a0
0000_0528'  226e 0008                  move.l 8(%fp),%a1
0000_052c'  2029 0004                  move.l 4(%a1),%d0
0000_0530'  2f2e 000c                  move.l 12(%fp),-(%sp)
0000_0534'  2f00                       move.l %d0,-(%sp)
0000_0536'  4e90                       jsr (%a0)
0000_0538'  508f                       addq.l #8,%sp
0000_053a'  4e71                       nop
0000_053c'  4e5e                       unlk %fp
0000_053e'  4e75                       rts
0000_0540'                             .cfi_endproc
0000_0540'                         .LFE33:
            = 0000_0022                .size   exec, .-exec
0000_0540'                             .local  in_panic
0000_0540'                             .comm   in_panic,1,1
0000_0540'                             .align  2
0000_0540'                             .globl  putchar
0000_0540'                             .type   putchar, @function
0000_0540'                         putchar:
0000_0540'                         .LFB34:
0000_0540'                             .file 5 "putchar.c"
0000_0540'                             .loc 5 34 0
0000_0540'                             .cfi_startproc
0000_0540'  4e56 fffc                  link.w %fp,#-4
0000_0544'                             .cfi_offset 14, -8
0000_0544'                             .cfi_def_cfa 14, 8
0000_0544'                             .loc 5 36 0
0000_0544'  202e 0008                  move.l 8(%fp),%d0
0000_0548'  2d40 fffc                  move.l %d0,-4(%fp)
0000_054c'                             .loc 5 38 0
0000_054c'  2039 0000_0000*            move.l console_out,%d0
0000_0552'  4a80                       tst.l %d0
0000_0554'  67 16                      jeq .L52
0000_0556'                             .loc 5 39 0
0000_0556'  222e fffc                  move.l -4(%fp),%d1
0000_055a'  2039 0000_0000*            move.l console_out,%d0
0000_0560'  2f01                       move.l %d1,-(%sp)
0000_0562'  2f00                       move.l %d0,-(%sp)
0000_0564'  4eba fac8                  jsr queue
0000_0568'  508f                       addq.l #8,%sp
0000_056a'  60 0c                      jra .L53
0000_056c'                         .L52:
0000_056c'                         .LBB14:
0000_056c'                             .loc 5 41 0
0000_056c'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_0570'  4eb9 0000_0000*            jsr putConsoleChar
0000_0576'  588f                       addq.l #4,%sp
0000_0578'                         .L53:
0000_0578'                         .LBE14:
0000_0578'                             .loc 5 42 0
0000_0578'  4e71                       nop
0000_057a'  4e5e                       unlk %fp
0000_057c'  4e75                       rts
0000_057e'                             .cfi_endproc
0000_057e'                         .LFE34:
            = 0000_003e                .size   putchar, .-putchar
0000_057e'                             .align  2
0000_057e'                             .globl  puts
0000_057e'                             .type   puts, @function
0000_057e'                         puts:
0000_057e'                         .LFB35:
0000_057e'                             .loc 5 46 0
0000_057e'                             .cfi_startproc
0000_057e'  4e56 fffc                  link.w %fp,#-4
0000_0582'                             .cfi_offset 14, -8
0000_0582'                             .cfi_def_cfa 14, 8
0000_0582'                             .loc 5 47 0
0000_0582'  2039 0000_0000*            move.l console_out,%d0
0000_0588'  4a80                       tst.l %d0
0000_058a'  67 4c                      jeq .L57
0000_058c'                         .LBB15:
0000_058c'                             .loc 5 48 0
0000_058c'  42a7                       clr.l -(%sp)
0000_058e'  4eb9 0000_0000*            jsr mb_alloc
0000_0594'  588f                       addq.l #4,%sp
0000_0596'  2d40 fffc                  move.l %d0,-4(%fp)
0000_059a'                             .loc 5 49 0
0000_059a'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_059e'  2f2e fffc                  move.l -4(%fp),-(%sp)
0000_05a2'  4eb9 0000_0000*            jsr mb_stradd
0000_05a8'  508f                       addq.l #8,%sp
0000_05aa'                             .loc 5 50 0
0000_05aa'  2039 0000_0000*            move.l console_out,%d0
0000_05b0'  2f2e fffc                  move.l -4(%fp),-(%sp)
0000_05b4'  2f00                       move.l %d0,-(%sp)
0000_05b6'  4eba fa76                  jsr queue
0000_05ba'  508f                       addq.l #8,%sp
0000_05bc'                         .LBE15:
0000_05bc'                             .loc 5 54 0
0000_05bc'  60 24                      jra .L59
0000_05be'                         .L58:
0000_05be'                             .loc 5 53 0
0000_05be'  202e 0008                  move.l 8(%fp),%d0
0000_05c2'  2200                       move.l %d0,%d1
0000_05c4'  5281                       addq.l #1,%d1
0000_05c6'  2d41 0008                  move.l %d1,8(%fp)
0000_05ca'  2040                       move.l %d0,%a0
0000_05cc'  1010                       move.b (%a0),%d0
0000_05ce'  49c0                       extb.l %d0
0000_05d0'  2f00                       move.l %d0,-(%sp)
0000_05d2'  4eba ff6c                  jsr putchar
0000_05d6'  588f                       addq.l #4,%sp
0000_05d8'                         .L57:
0000_05d8'                             .loc 5 52 0
0000_05d8'  206e 0008                  move.l 8(%fp),%a0
0000_05dc'  1010                       move.b (%a0),%d0
0000_05de'  4a00                       tst.b %d0
0000_05e0'  66 dc                      jne .L58
0000_05e2'                         .L59:
0000_05e2'                             .loc 5 54 0
0000_05e2'  4e71                       nop
0000_05e4'  4e5e                       unlk %fp
0000_05e6'  4e75                       rts
0000_05e8'                             .cfi_endproc
0000_05e8'                         .LFE35:
            = 0000_006a                .size   puts, .-puts
0000_05e8'                             .comm   panicstr,4,2
0000_0000x                             .section    .rodata
0000_0000x                         .LC0:
0000_0000x  69 6e 20 70 61 6e 69       .string "in panic"
            63 00                  
0000_0009x                         .LC1:
0000_0009x  0a 50 61 6e 69 63 3a       .string "\nPanic: "
            20 00                  
0000_05e8'                             .text
0000_05e8'                             .align  2
0000_05e8'                             .globl  panic
0000_05e8'                             .type   panic, @function
0000_05e8'                         panic:
0000_05e8'                         .LFB36:
0000_05e8'                             .loc 5 60 0
0000_05e8'                             .cfi_startproc
0000_05e8'  4e56 fffc                  link.w %fp,#-4
0000_05ec'                             .cfi_offset 14, -8
0000_05ec'                             .cfi_def_cfa 14, 8
0000_05ec'                             .loc 5 62 0
0000_05ec'  2039 0000_0000*            move.l panicstr,%d0
0000_05f2'  4a80                       tst.l %d0
0000_05f4'  66 42                      jne .L64
0000_05f6'                             .loc 5 63 0
0000_05f6'  2d79 0000_0000* fffc       move.l console_out,-4(%fp)
0000_05fe'                             .loc 5 64 0
0000_05fe'  42b9 0000_0000*            clr.l console_out
0000_0604'                             .loc 5 65 0
0000_0604'  23fc 0000_0000x            move.l #.LC0,panicstr
            0000_0000*             
0000_060e'                             .loc 5 66 0
0000_060e'  4879 0000_0012x            pea .LC1
0000_0614'  4eba ff68                  jsr puts
0000_0618'  588f                       addq.l #4,%sp
0000_061a'                             .loc 5 67 0
0000_061a'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_061e'  4eba ff5e                  jsr puts
0000_0622'  588f                       addq.l #4,%sp
0000_0624'                             .loc 5 68 0
0000_0624'  23ee fffc 0000_0000*       move.l -4(%fp),console_out
0000_062c'                             .loc 5 70 0
0000_062c'  23ee 0008 0000_0000*       move.l 8(%fp),panicstr
0000_0634'                             .loc 5 71 0
0000_0634'  4eba f9ec                  jsr abort
0000_0638'                         .L64:
0000_0638'                             .loc 5 62 0
0000_0638'  4e71                       nop
0000_063a'                             .loc 5 72 0
0000_063a'  4e5e                       unlk %fp
0000_063c'  4e75                       rts
0000_063e'                             .cfi_endproc
0000_063e'                         .LFE36:
            = 0000_0056                .size   panic, .-panic
0000_063e'                             .align  2
0000_063e'                             .globl  abort_supv
0000_063e'                             .type   abort_supv, @function
0000_063e'                         abort_supv:
0000_063e'                         .LFB37:
0000_063e'                             .loc 5 76 0
0000_063e'                             .cfi_startproc
0000_063e'  4e56 fff4                  link.w %fp,#-12
0000_0642'                             .cfi_offset 14, -8
0000_0642'                             .cfi_def_cfa 14, 8
0000_0642'                             .loc 5 77 0
0000_0642'  4eb9 0000_0000*            jsr __display_current_proc
0000_0648'                             .loc 5 78 0
0000_0648'  2039 0000_0000*            move.l console_out,%d0
0000_064e'  4a80                       tst.l %d0
0000_0650'  6700 00a4                  jeq .L66
0000_0654'                         .LBB16:
0000_0654'                             .loc 5 83 0
0000_0654'  60 5a                      jra .L67
0000_0656'                         .L69:
0000_0656'                         .LBB17:
0000_0656'                             .loc 5 84 0
0000_0656'  2079 0000_0000*            move.l sys_queue_head,%a0
0000_065c'  2008                       move.l %a0,%d0
0000_065e'  5880                       addq.l #4,%d0
0000_0660'  23c0 0000_0000*            move.l %d0,sys_queue_head
0000_0666'  2d50 fff8                  move.l (%a0),-8(%fp)
0000_066a'                             .loc 5 85 0
0000_066a'  2079 0000_0000*            move.l sys_queue_head,%a0
0000_0670'  2008                       move.l %a0,%d0
0000_0672'  5880                       addq.l #4,%d0
0000_0674'  23c0 0000_0000*            move.l %d0,sys_queue_head
0000_067a'  2d50 fff4                  move.l (%a0),-12(%fp)
0000_067e'                             .loc 5 86 0
0000_067e'  2039 0000_0000*            move.l console_out,%d0
0000_0684'  b0ae fff8                  cmp.l -8(%fp),%d0
0000_0688'  66 0e                      jne .L68
0000_068a'                             .loc 5 87 0
0000_068a'  2f2e fff4                  move.l -12(%fp),-(%sp)
0000_068e'  2f2e fff8                  move.l -8(%fp),-(%sp)
0000_0692'  4eba fe8a                  jsr exec
0000_0696'  508f                       addq.l #8,%sp
0000_0698'                         .L68:
0000_0698'                             .loc 5 88 0
0000_0698'  2039 0000_0000*            move.l sys_queue_head,%d0
0000_069e'  0c80 0000_0000*            cmp.l #sys_queue_tail,%d0
0000_06a4'  66 0a                      jne .L67
0000_06a6'                             .loc 5 89 0
0000_06a6'  23fc 0000_0000*            move.l #sys_queue_table,sys_queue_head
            0000_0000*             
0000_06b0'                         .L67:
0000_06b0'                         .LBE17:
0000_06b0'                             .loc 5 83 0
0000_06b0'  2239 0000_0000*            move.l sys_queue_head,%d1
0000_06b6'  2039 0000_0000*            move.l sys_queue_tail,%d0
0000_06bc'  b081                       cmp.l %d1,%d0
0000_06be'  66 96                      jne .L69
0000_06c0'                             .loc 5 92 0
0000_06c0'  2d7c 0000_2710 fffc        move.l #10000,-4(%fp)
0000_06c8'                             .loc 5 93 0
0000_06c8'  60 18                      jra .L70
0000_06ca'                         .L71:
0000_06ca'                         .LBB18:
0000_06ca'                             .loc 5 94 0
0000_06ca'  2079 0000_0000*            move.l console_out,%a0
0000_06d0'  2028 0004                  move.l 4(%a0),%d0
0000_06d4'  2f00                       move.l %d0,-(%sp)
0000_06d6'  4eb9 0000_0000*            jsr atx_idle
0000_06dc'  588f                       addq.l #4,%sp
0000_06de'  4a80                       tst.l %d0
0000_06e0'  66 12                      jne .L72
0000_06e2'                         .L70:
0000_06e2'                         .LBE18:
0000_06e2'                             .loc 5 93 0
0000_06e2'  202e fffc                  move.l -4(%fp),%d0
0000_06e6'  2200                       move.l %d0,%d1
0000_06e8'  5381                       subq.l #1,%d1
0000_06ea'  2d41 fffc                  move.l %d1,-4(%fp)
0000_06ee'  4a80                       tst.l %d0
0000_06f0'  66 d8                      jne .L71
0000_06f2'  60 02                      jra .L66
0000_06f4'                         .L72:
0000_06f4'                         .LBB19:
0000_06f4'                             .loc 5 95 0
0000_06f4'  4e71                       nop
0000_06f6'                         .L66:
0000_06f6'                         .LBE19:
0000_06f6'                         .LBE16:
0000_06f6'                             .loc 5 98 0
0000_06f6'                         | 98 "putchar.c" 1
                                    <<-- Here
dummy_path:1097:Error: Expecting: Opcode or Label
0000_06f6'  4afc                       illegal
0000_06f8'                         | 0 "" 2
                                    <<-- Here
dummy_path:1099:Error: Expecting: Opcode or Label
0000_06f8'                             .loc 5 99 0
0000_06f8'  4e71                       nop
0000_06fa'  4e5e                       unlk %fp
0000_06fc'  4e75                       rts
0000_06fe'                             .cfi_endproc
0000_06fe'                         .LFE37:
            = 0000_00c0                .size   abort_supv, .-abort_supv
0000_06fe'                         .Letext0:
0000_06fe'                             .file 6 "types.h"
0000_06fe'                             .file 7 "caos.h"
0000_0000y                             .section    .debug_info,"",@progbits
0000_0000y                         .Ldebug_info0:
0000_0000y  0000_09b7                  .long   0x9b7
0000_0004y  0004                       .word   0x4
0000_0006y  0000_0000z                 .long   .Ldebug_abbrev0
0000_000ay  04                         .byte   0x4
0000_000by  01                         .uleb128 0x1
0000_000cy  0000_0270+                 .long   .LASF68
0000_0010y  0c                         .byte   0xc
0000_0011y  0000_042e+                 .long   .LASF69
0000_0015y  0000_0190+                 .long   .LASF70
0000_0019y  0000_0000'                 .long   .Ltext0
0000_001dy  0000_06fe                  .long   .Letext0-.Ltext0
0000_0021y  0000_0000+                 .long   .Ldebug_line0
0000_0025y  02                         .uleb128 0x2
0000_0026y  04                         .byte   0x4
0000_0027y  07                         .byte   0x7
0000_0028y  0000_045c+                 .long   .LASF0
0000_002cy  03                         .uleb128 0x3
0000_002dy  0000_0532+                 .long   .LASF2
0000_0031y  06                         .byte   0x6
0000_0032y  21                         .byte   0x21
0000_0033y  0000_0037                  .long   0x37
0000_0037y  02                         .uleb128 0x2
0000_0038y  04                         .byte   0x4
0000_0039y  07                         .byte   0x7
0000_003ay  0000_0330+                 .long   .LASF1
0000_003ey  03                         .uleb128 0x3
0000_003fy  0000_0166+                 .long   .LASF3
0000_0043y  06                         .byte   0x6
0000_0044y  23                         .byte   0x23
0000_0045y  0000_0049                  .long   0x49
0000_0049y  02                         .uleb128 0x2
0000_004ay  01                         .byte   0x1
0000_004by  08                         .byte   0x8
0000_004cy  0000_02ce+                 .long   .LASF4
0000_0050y  03                         .uleb128 0x3
0000_0051y  0000_00aa+                 .long   .LASF5
0000_0055y  06                         .byte   0x6
0000_0056y  24                         .byte   0x24
0000_0057y  0000_005b                  .long   0x5b
0000_005by  02                         .uleb128 0x2
0000_005cy  02                         .byte   0x2
0000_005dy  07                         .byte   0x7
0000_005ey  0000_03aa+                 .long   .LASF6
0000_0062y  02                         .uleb128 0x2
0000_0063y  01                         .byte   0x1
0000_0064y  06                         .byte   0x6
0000_0065y  0000_03e2+                 .long   .LASF7
0000_0069y  04                         .uleb128 0x4
0000_006ay  04                         .byte   0x4
0000_006by  0000_006f                  .long   0x6f
0000_006fy  05                         .uleb128 0x5
0000_0070y  0000_0076                  .long   0x76
0000_0074y  06                         .uleb128 0x6
0000_0075y  00                         .byte   0
0000_0076y  07                         .uleb128 0x7
0000_0077y  04                         .byte   0x4
0000_0078y  05                         .byte   0x5
0000_0079y  69 6e 74 00                .string "int"
0000_007dy  08                         .uleb128 0x8
0000_007ey  04                         .byte   0x4
0000_007fy  03                         .uleb128 0x3
0000_0080y  0000_0110+                 .long   .LASF8
0000_0084y  06                         .byte   0x6
0000_0085y  2d                         .byte   0x2d
0000_0086y  0000_008a                  .long   0x8a
0000_008ay  09                         .uleb128 0x9
0000_008by  0000_031c+                 .long   .LASF13
0000_008fy  10                         .byte   0x10
0000_0090y  04                         .byte   0x4
0000_0091y  1c                         .byte   0x1c
0000_0092y  0000_00c6                  .long   0xc6
0000_0096y  0a                         .uleb128 0xa
0000_0097y  66 6e 00                   .string "fn"
0000_009ay  04                         .byte   0x4
0000_009by  1d                         .byte   0x1d
0000_009cy  0000_0069                  .long   0x69
0000_00a0y  00                         .byte   0
0000_00a1y  0b                         .uleb128 0xb
0000_00a2y  0000_0258+                 .long   .LASF9
0000_00a6y  04                         .byte   0x4
0000_00a7y  1e                         .byte   0x1e
0000_00a8y  0000_007d                  .long   0x7d
0000_00acy  04                         .byte   0x4
0000_00ady  0b                         .uleb128 0xb
0000_00aey  0000_058c+                 .long   .LASF10
0000_00b2y  04                         .byte   0x4
0000_00b3y  1f                         .byte   0x1f
0000_00b4y  0000_017a                  .long   0x17a
0000_00b8y  08                         .byte   0x8
0000_00b9y  0b                         .uleb128 0xb
0000_00bay  0000_00fc+                 .long   .LASF11
0000_00bey  04                         .byte   0x4
0000_00bfy  1f                         .byte   0x1f
0000_00c0y  0000_017a                  .long   0x17a
0000_00c4y  0c                         .byte   0xc
0000_00c5y  00                         .byte   0
0000_00c6y  03                         .uleb128 0x3
0000_00c7y  0000_0578+                 .long   .LASF12
0000_00cby  03                         .byte   0x3
0000_00ccy  29                         .byte   0x29
0000_00cdy  0000_00d1                  .long   0xd1
0000_00d1y  0c                         .uleb128 0xc
0000_00d2y  0000_00da+                 .long   .LASF14
0000_00d6y  0300                       .word   0x300
0000_00d8y  03                         .byte   0x3
0000_00d9y  34                         .byte   0x34
0000_00day  0000_00f5                  .long   0xf5
0000_00dey  0a                         .uleb128 0xa
0000_00dfy  68 00                      .string "h"
0000_00e1y  03                         .byte   0x3
0000_00e2y  35                         .byte   0x35
0000_00e3y  0000_00f5                  .long   0xf5
0000_00e7y  00                         .byte   0
0000_00e8y  0b                         .uleb128 0xb
0000_00e9y  0000_0442+                 .long   .LASF15
0000_00edy  03                         .byte   0x3
0000_00eey  36                         .byte   0x36
0000_00efy  0000_0162                  .long   0x162
0000_00f3y  10                         .byte   0x10
0000_00f4y  00                         .byte   0
0000_00f5y  09                         .uleb128 0x9
0000_00f6y  0000_000c+                 .long   .LASF16
0000_00fay  10                         .byte   0x10
0000_00fby  03                         .byte   0x3
0000_00fcy  2e                         .byte   0x2e
0000_00fdy  0000_0155                  .long   0x155
0000_0101y  0b                         .uleb128 0xb
0000_0102y  0000_02c4+                 .long   .LASF17
0000_0106y  03                         .byte   0x3
0000_0107y  2f                         .byte   0x2f
0000_0108y  0000_0155                  .long   0x155
0000_010cy  00                         .byte   0
0000_010dy  0b                         .uleb128 0xb
0000_010ey  0000_00f2+                 .long   .LASF18
0000_0112y  03                         .byte   0x3
0000_0113y  2f                         .byte   0x2f
0000_0114y  0000_0155                  .long   0x155
0000_0118y  02                         .byte   0x2
0000_0119y  0a                         .uleb128 0xa
0000_011ay  72 77 00                   .string "rw"
0000_011dy  03                         .byte   0x3
0000_011ey  2f                         .byte   0x2f
0000_011fy  0000_0155                  .long   0x155
0000_0123y  04                         .byte   0x4
0000_0124y  0b                         .uleb128 0xb
0000_0125y  0000_0326+                 .long   .LASF19
0000_0129y  03                         .byte   0x3
0000_012ay  30                         .byte   0x30
0000_012by  0000_003e                  .long   0x3e
0000_012fy  06                         .byte   0x6
0000_0130y  0b                         .uleb128 0xb
0000_0131y  0000_0264+                 .long   .LASF20
0000_0135y  03                         .byte   0x3
0000_0136y  30                         .byte   0x30
0000_0137y  0000_003e                  .long   0x3e
0000_013by  07                         .byte   0x7
0000_013cy  0b                         .uleb128 0xb
0000_013dy  0000_0582+                 .long   .LASF21
0000_0141y  03                         .byte   0x3
0000_0142y  31                         .byte   0x31
0000_0143y  0000_015c                  .long   0x15c
0000_0147y  08                         .byte   0x8
0000_0148y  0b                         .uleb128 0xb
0000_0149y  0000_02aa+                 .long   .LASF22
0000_014dy  03                         .byte   0x3
0000_014ey  31                         .byte   0x31
0000_014fy  0000_015c                  .long   0x15c
0000_0153y  0c                         .byte   0xc
0000_0154y  00                         .byte   0
0000_0155y  02                         .uleb128 0x2
0000_0156y  02                         .byte   0x2
0000_0157y  05                         .byte   0x5
0000_0158y  0000_0046+                 .long   .LASF23
0000_015cy  04                         .uleb128 0x4
0000_015dy  04                         .byte   0x4
0000_015ey  0000_00c6                  .long   0xc6
0000_0162y  0d                         .uleb128 0xd
0000_0163y  0000_0049                  .long   0x49
0000_0167y  0000_0173                  .long   0x173
0000_016by  0e                         .uleb128 0xe
0000_016cy  0000_0173                  .long   0x173
0000_0170y  02ef                       .word   0x2ef
0000_0172y  00                         .byte   0
0000_0173y  02                         .uleb128 0x2
0000_0174y  04                         .byte   0x4
0000_0175y  07                         .byte   0x7
0000_0176y  0000_005a+                 .long   .LASF24
0000_017ay  04                         .uleb128 0x4
0000_017by  04                         .byte   0x4
0000_017cy  0000_0180                  .long   0x180
0000_0180y  0f                         .uleb128 0xf
0000_0181y  0000_0062                  .long   0x62
0000_0185y  10                         .uleb128 0x10
0000_0186y  63 68 6b 00                .string "chk"
0000_018ay  01                         .byte   0x1
0000_018by  1f                         .byte   0x1f
0000_018cy  0000_0000'                 .long   .LFB0
0000_0190y  0000_0022                  .long   .LFE0-.LFB0
0000_0194y  01                         .uleb128 0x1
0000_0195y  9c                         .byte   0x9c
0000_0196y  0000_01b7                  .long   0x1b7
0000_019ay  11                         .uleb128 0x11
0000_019by  0000_0442+                 .long   .LASF15
0000_019fy  01                         .byte   0x1
0000_01a0y  1f                         .byte   0x1f
0000_01a1y  0000_0050                  .long   0x50
0000_01a5y  02                         .uleb128 0x2
0000_01a6y  7e                         .byte   0x7e
0000_01a7y  7e                         .sleb128 -2
0000_01a8y  11                         .uleb128 0x11
0000_01a9y  0000_0000+                 .long   .LASF25
0000_01ady  01                         .byte   0x1
0000_01aey  1f                         .byte   0x1f
0000_01afy  0000_0050                  .long   0x50
0000_01b3y  02                         .uleb128 0x2
0000_01b4y  7e                         .byte   0x7e
0000_01b5y  7c                         .sleb128 -4
0000_01b6y  00                         .byte   0
0000_01b7y  12                         .uleb128 0x12
0000_01b8y  0000_0310+                 .long   .LASF71
0000_01bcy  07                         .byte   0x7
0000_01bdy  42                         .byte   0x42
0000_01bey  0000_0044'                 .long   .LFB2
0000_01c2y  0000_000c                  .long   .LFE2-.LFB2
0000_01c6y  01                         .uleb128 0x1
0000_01c7y  9c                         .byte   0x9c
0000_01c8y  13                         .uleb128 0x13
0000_01c9y  0000_02aa+                 .long   .LASF22
0000_01cdy  02                         .byte   0x2
0000_01cey  56                         .byte   0x56
0000_01cfy  0000_005c'                 .long   .LFB5
0000_01d3y  0000_0036                  .long   .LFE5-.LFB5
0000_01d7y  01                         .uleb128 0x1
0000_01d8y  9c                         .byte   0x9c
0000_01d9y  0000_0213                  .long   0x213
0000_01ddy  11                         .uleb128 0x11
0000_01dey  0000_031c+                 .long   .LASF13
0000_01e2y  02                         .byte   0x2
0000_01e3y  56                         .byte   0x56
0000_01e4y  0000_0213                  .long   0x213
0000_01e8y  02                         .uleb128 0x2
0000_01e9y  91                         .byte   0x91
0000_01eay  00                         .sleb128 0
0000_01eby  14                         .uleb128 0x14
0000_01ecy  61 72 67 00                .string "arg"
0000_01f0y  02                         .byte   0x2
0000_01f1y  56                         .byte   0x56
0000_01f2y  0000_007d                  .long   0x7d
0000_01f6y  02                         .uleb128 0x2
0000_01f7y  91                         .byte   0x91
0000_01f8y  04                         .sleb128 4
0000_01f9y  15                         .uleb128 0x15
0000_01fay  5f 70 00                   .string "_p"
0000_01fdy  02                         .byte   0x2
0000_01fey  58                         .byte   0x58
0000_01ffy  0000_021e                  .long   0x21e
0000_0203y  01                         .uleb128 0x1
0000_0204y  50                         .byte   0x50
0000_0205y  16                         .uleb128 0x16
0000_0206y  0000_054e+                 .long   .LASF26
0000_020ay  02                         .byte   0x2
0000_020by  59                         .byte   0x59
0000_020cy  0000_021e                  .long   0x21e
0000_0210y  01                         .uleb128 0x1
0000_0211y  51                         .byte   0x51
0000_0212y  00                         .byte   0
0000_0213y  04                         .uleb128 0x4
0000_0214y  04                         .byte   0x4
0000_0215y  0000_0219                  .long   0x219
0000_0219y  0f                         .uleb128 0xf
0000_021ay  0000_007f                  .long   0x7f
0000_021ey  04                         .uleb128 0x4
0000_021fy  04                         .byte   0x4
0000_0220y  0000_0224                  .long   0x224
0000_0224y  17                         .uleb128 0x17
0000_0225y  18                         .uleb128 0x18
0000_0226y  0000_053e+                 .long   .LASF34
0000_022ay  03                         .byte   0x3
0000_022by  8c                         .byte   0x8c
0000_022cy  0000_00c8'                 .long   .LFB7
0000_0230y  0000_003a                  .long   .LFE7-.LFB7
0000_0234y  01                         .uleb128 0x1
0000_0235y  9c                         .byte   0x9c
0000_0236y  0000_0247                  .long   0x247
0000_023ay  14                         .uleb128 0x14
0000_023by  70 00                      .string "p"
0000_023dy  03                         .byte   0x3
0000_023ey  8c                         .byte   0x8c
0000_023fy  0000_015c                  .long   0x15c
0000_0243y  02                         .uleb128 0x2
0000_0244y  91                         .byte   0x91
0000_0245y  00                         .sleb128 0
0000_0246y  00                         .byte   0
0000_0247y  19                         .uleb128 0x19
0000_0248y  0000_0558+                 .long   .LASF27
0000_024cy  03                         .byte   0x3
0000_024dy  8e                         .byte   0x8e
0000_024ey  0000_015c                  .long   0x15c
0000_0252y  0000_013c'                 .long   .LFB8
0000_0256y  0000_001e                  .long   .LFE8-.LFB8
0000_025ay  01                         .uleb128 0x1
0000_025by  9c                         .byte   0x9c
0000_025cy  0000_026d                  .long   0x26d
0000_0260y  14                         .uleb128 0x14
0000_0261y  70 00                      .string "p"
0000_0263y  03                         .byte   0x3
0000_0264y  8e                         .byte   0x8e
0000_0265y  0000_015c                  .long   0x15c
0000_0269y  02                         .uleb128 0x2
0000_026ay  91                         .byte   0x91
0000_026by  00                         .sleb128 0
0000_026cy  00                         .byte   0
0000_026dy  19                         .uleb128 0x19
0000_026ey  0000_011a+                 .long   .LASF28
0000_0272y  03                         .byte   0x3
0000_0273y  8f                         .byte   0x8f
0000_0274y  0000_0076                  .long   0x76
0000_0278y  0000_0178'                 .long   .LFB9
0000_027cy  0000_0018                  .long   .LFE9-.LFB9
0000_0280y  01                         .uleb128 0x1
0000_0281y  9c                         .byte   0x9c
0000_0282y  0000_0293                  .long   0x293
0000_0286y  14                         .uleb128 0x14
0000_0287y  70 00                      .string "p"
0000_0289y  03                         .byte   0x3
0000_028ay  8f                         .byte   0x8f
0000_028by  0000_015c                  .long   0x15c
0000_028fy  02                         .uleb128 0x2
0000_0290y  91                         .byte   0x91
0000_0291y  00                         .sleb128 0
0000_0292y  00                         .byte   0
0000_0293y  19                         .uleb128 0x19
0000_0294y  0000_0134+                 .long   .LASF29
0000_0298y  03                         .byte   0x3
0000_0299y  90                         .byte   0x90
0000_029ay  0000_0076                  .long   0x76
0000_029ey  0000_01a8'                 .long   .LFB10
0000_02a2y  0000_0024                  .long   .LFE10-.LFB10
0000_02a6y  01                         .uleb128 0x1
0000_02a7y  9c                         .byte   0x9c
0000_02a8y  0000_02b9                  .long   0x2b9
0000_02acy  14                         .uleb128 0x14
0000_02ady  70 00                      .string "p"
0000_02afy  03                         .byte   0x3
0000_02b0y  90                         .byte   0x90
0000_02b1y  0000_015c                  .long   0x15c
0000_02b5y  02                         .uleb128 0x2
0000_02b6y  91                         .byte   0x91
0000_02b7y  00                         .sleb128 0
0000_02b8y  00                         .byte   0
0000_02b9y  19                         .uleb128 0x19
0000_02bay  0000_02b6+                 .long   .LASF30
0000_02bey  03                         .byte   0x3
0000_02bfy  91                         .byte   0x91
0000_02c0y  0000_0155                  .long   0x155
0000_02c4y  0000_01f0'                 .long   .LFB11
0000_02c8y  0000_001e                  .long   .LFE11-.LFB11
0000_02ccy  01                         .uleb128 0x1
0000_02cdy  9c                         .byte   0x9c
0000_02cey  0000_02df                  .long   0x2df
0000_02d2y  14                         .uleb128 0x14
0000_02d3y  70 00                      .string "p"
0000_02d5y  03                         .byte   0x3
0000_02d6y  91                         .byte   0x91
0000_02d7y  0000_015c                  .long   0x15c
0000_02dby  02                         .uleb128 0x2
0000_02dcy  91                         .byte   0x91
0000_02ddy  00                         .sleb128 0
0000_02dey  00                         .byte   0
0000_02dfy  19                         .uleb128 0x19
0000_02e0y  0000_0036+                 .long   .LASF31
0000_02e4y  03                         .byte   0x3
0000_02e5y  92                         .byte   0x92
0000_02e6y  0000_0076                  .long   0x76
0000_02eay  0000_022c'                 .long   .LFB12
0000_02eey  0000_0032                  .long   .LFE12-.LFB12
0000_02f2y  01                         .uleb128 0x1
0000_02f3y  9c                         .byte   0x9c
0000_02f4y  0000_0311                  .long   0x311
0000_02f8y  14                         .uleb128 0x14
0000_02f9y  70 00                      .string "p"
0000_02fby  03                         .byte   0x3
0000_02fcy  92                         .byte   0x92
0000_02fdy  0000_015c                  .long   0x15c
0000_0301y  02                         .uleb128 0x2
0000_0302y  91                         .byte   0x91
0000_0303y  00                         .sleb128 0
0000_0304y  14                         .uleb128 0x14
0000_0305y  6e 00                      .string "n"
0000_0307y  03                         .byte   0x3
0000_0308y  92                         .byte   0x92
0000_0309y  0000_0155                  .long   0x155
0000_030dy  02                         .uleb128 0x2
0000_030ey  7e                         .byte   0x7e
0000_030fy  7e                         .sleb128 -2
0000_0310y  00                         .byte   0
0000_0311y  19                         .uleb128 0x19
0000_0312y  0000_0146+                 .long   .LASF32
0000_0316y  03                         .byte   0x3
0000_0317y  94                         .byte   0x94
0000_0318y  0000_0076                  .long   0x76
0000_031cy  0000_0290'                 .long   .LFB13
0000_0320y  0000_0018                  .long   .LFE13-.LFB13
0000_0324y  01                         .uleb128 0x1
0000_0325y  9c                         .byte   0x9c
0000_0326y  0000_0337                  .long   0x337
0000_032ay  14                         .uleb128 0x14
0000_032by  70 00                      .string "p"
0000_032dy  03                         .byte   0x3
0000_032ey  94                         .byte   0x94
0000_032fy  0000_015c                  .long   0x15c
0000_0333y  02                         .uleb128 0x2
0000_0334y  91                         .byte   0x91
0000_0335y  00                         .sleb128 0
0000_0336y  00                         .byte   0
0000_0337y  19                         .uleb128 0x19
0000_0338y  0000_0246+                 .long   .LASF33
0000_033cy  03                         .byte   0x3
0000_033dy  95                         .byte   0x95
0000_033ey  0000_0076                  .long   0x76
0000_0342y  0000_02c0'                 .long   .LFB14
0000_0346y  0000_0028                  .long   .LFE14-.LFB14
0000_034ay  01                         .uleb128 0x1
0000_034by  9c                         .byte   0x9c
0000_034cy  0000_0369                  .long   0x369
0000_0350y  14                         .uleb128 0x14
0000_0351y  70 00                      .string "p"
0000_0353y  03                         .byte   0x3
0000_0354y  95                         .byte   0x95
0000_0355y  0000_015c                  .long   0x15c
0000_0359y  02                         .uleb128 0x2
0000_035ay  91                         .byte   0x91
0000_035by  00                         .sleb128 0
0000_035cy  14                         .uleb128 0x14
0000_035dy  6e 00                      .string "n"
0000_035fy  03                         .byte   0x3
0000_0360y  95                         .byte   0x95
0000_0361y  0000_0155                  .long   0x155
0000_0365y  02                         .uleb128 0x2
0000_0366y  7e                         .byte   0x7e
0000_0367y  7e                         .sleb128 -2
0000_0368y  00                         .byte   0
0000_0369y  1a                         .uleb128 0x1a
0000_036ay  0000_00e4+                 .long   .LASF35
0000_036ey  03                         .byte   0x3
0000_036fy  97                         .byte   0x97
0000_0370y  0000_0310'                 .long   .LFB15
0000_0374y  0000_001a                  .long   .LFE15-.LFB15
0000_0378y  01                         .uleb128 0x1
0000_0379y  9c                         .byte   0x9c
0000_037ay  0000_038b                  .long   0x38b
0000_037ey  14                         .uleb128 0x14
0000_037fy  70 00                      .string "p"
0000_0381y  03                         .byte   0x3
0000_0382y  97                         .byte   0x97
0000_0383y  0000_015c                  .long   0x15c
0000_0387y  02                         .uleb128 0x2
0000_0388y  91                         .byte   0x91
0000_0389y  00                         .sleb128 0
0000_038ay  00                         .byte   0
0000_038by  19                         .uleb128 0x19
0000_038cy  0000_041e+                 .long   .LASF36
0000_0390y  03                         .byte   0x3
0000_0391y  98                         .byte   0x98
0000_0392y  0000_007d                  .long   0x7d
0000_0396y  0000_0344'                 .long   .LFB16
0000_039ay  0000_001c                  .long   .LFE16-.LFB16
0000_039ey  01                         .uleb128 0x1
0000_039fy  9c                         .byte   0x9c
0000_03a0y  0000_03b1                  .long   0x3b1
0000_03a4y  14                         .uleb128 0x14
0000_03a5y  70 00                      .string "p"
0000_03a7y  03                         .byte   0x3
0000_03a8y  98                         .byte   0x98
0000_03a9y  0000_015c                  .long   0x15c
0000_03ady  02                         .uleb128 0x2
0000_03aey  91                         .byte   0x91
0000_03afy  00                         .sleb128 0
0000_03b0y  00                         .byte   0
0000_03b1y  19                         .uleb128 0x19
0000_03b2y  0000_04be+                 .long   .LASF37
0000_03b6y  03                         .byte   0x3
0000_03b7y  99                         .byte   0x99
0000_03b8y  0000_007d                  .long   0x7d
0000_03bcy  0000_037c'                 .long   .LFB17
0000_03c0y  0000_001a                  .long   .LFE17-.LFB17
0000_03c4y  01                         .uleb128 0x1
0000_03c5y  9c                         .byte   0x9c
0000_03c6y  0000_03d7                  .long   0x3d7
0000_03cay  14                         .uleb128 0x14
0000_03cby  70 00                      .string "p"
0000_03cdy  03                         .byte   0x3
0000_03cey  99                         .byte   0x99
0000_03cfy  0000_015c                  .long   0x15c
0000_03d3y  02                         .uleb128 0x2
0000_03d4y  91                         .byte   0x91
0000_03d5y  00                         .sleb128 0
0000_03d6y  00                         .byte   0
0000_03d7y  1a                         .uleb128 0x1a
0000_03d8y  0000_00ca+                 .long   .LASF38
0000_03dcy  03                         .byte   0x3
0000_03ddy  9a                         .byte   0x9a
0000_03dey  0000_03b0'                 .long   .LFB18
0000_03e2y  0000_002a                  .long   .LFE18-.LFB18
0000_03e6y  01                         .uleb128 0x1
0000_03e7y  9c                         .byte   0x9c
0000_03e8y  0000_0405                  .long   0x405
0000_03ecy  14                         .uleb128 0x14
0000_03edy  70 00                      .string "p"
0000_03efy  03                         .byte   0x3
0000_03f0y  9a                         .byte   0x9a
0000_03f1y  0000_015c                  .long   0x15c
0000_03f5y  02                         .uleb128 0x2
0000_03f6y  91                         .byte   0x91
0000_03f7y  00                         .sleb128 0
0000_03f8y  14                         .uleb128 0x14
0000_03f9y  69 00                      .string "i"
0000_03fby  03                         .byte   0x3
0000_03fcy  9a                         .byte   0x9a
0000_03fdy  0000_0155                  .long   0x155
0000_0401y  02                         .uleb128 0x2
0000_0402y  7e                         .byte   0x7e
0000_0403y  7e                         .sleb128 -2
0000_0404y  00                         .byte   0
0000_0405y  1a                         .uleb128 0x1a
0000_0406y  0000_0156+                 .long   .LASF39
0000_040ay  03                         .byte   0x3
0000_040by  9b                         .byte   0x9b
0000_040cy  0000_0404'                 .long   .LFB19
0000_0410y  0000_0026                  .long   .LFE19-.LFB19
0000_0414y  01                         .uleb128 0x1
0000_0415y  9c                         .byte   0x9c
0000_0416y  0000_0433                  .long   0x433
0000_041ay  14                         .uleb128 0x14
0000_041by  70 00                      .string "p"
0000_041dy  03                         .byte   0x3
0000_041ey  9b                         .byte   0x9b
0000_041fy  0000_015c                  .long   0x15c
0000_0423y  02                         .uleb128 0x2
0000_0424y  91                         .byte   0x91
0000_0425y  00                         .sleb128 0
0000_0426y  14                         .uleb128 0x14
0000_0427y  69 00                      .string "i"
0000_0429y  03                         .byte   0x3
0000_042ay  9b                         .byte   0x9b
0000_042by  0000_0155                  .long   0x155
0000_042fy  02                         .uleb128 0x2
0000_0430y  7e                         .byte   0x7e
0000_0431y  7e                         .sleb128 -2
0000_0432y  00                         .byte   0
0000_0433y  18                         .uleb128 0x18
0000_0434y  0000_0368+                 .long   .LASF40
0000_0438y  03                         .byte   0x3
0000_0439y  9c                         .byte   0x9c
0000_043ay  0000_0450'                 .long   .LFB20
0000_043ey  0000_0042                  .long   .LFE20-.LFB20
0000_0442y  01                         .uleb128 0x1
0000_0443y  9c                         .byte   0x9c
0000_0444y  0000_0461                  .long   0x461
0000_0448y  14                         .uleb128 0x14
0000_0449y  70 00                      .string "p"
0000_044by  03                         .byte   0x3
0000_044cy  9c                         .byte   0x9c
0000_044dy  0000_015c                  .long   0x15c
0000_0451y  02                         .uleb128 0x2
0000_0452y  91                         .byte   0x91
0000_0453y  00                         .sleb128 0
0000_0454y  14                         .uleb128 0x14
0000_0455y  69 00                      .string "i"
0000_0457y  03                         .byte   0x3
0000_0458y  9c                         .byte   0x9c
0000_0459y  0000_0155                  .long   0x155
0000_045dy  02                         .uleb128 0x2
0000_045ey  7e                         .byte   0x7e
0000_045fy  7e                         .sleb128 -2
0000_0460y  00                         .byte   0
0000_0461y  1a                         .uleb128 0x1a
0000_0462y  0000_008e+                 .long   .LASF41
0000_0466y  03                         .byte   0x3
0000_0467y  a0                         .byte   0xa0
0000_0468y  0000_04d4'                 .long   .LFB21
0000_046cy  0000_0038                  .long   .LFE21-.LFB21
0000_0470y  01                         .uleb128 0x1
0000_0471y  9c                         .byte   0x9c
0000_0472y  0000_04a6                  .long   0x4a6
0000_0476y  14                         .uleb128 0x14
0000_0477y  70 00                      .string "p"
0000_0479y  03                         .byte   0x3
0000_047ay  a0                         .byte   0xa0
0000_047by  0000_015c                  .long   0x15c
0000_047fy  02                         .uleb128 0x2
0000_0480y  91                         .byte   0x91
0000_0481y  00                         .sleb128 0
0000_0482y  14                         .uleb128 0x14
0000_0483y  63 00                      .string "c"
0000_0485y  03                         .byte   0x3
0000_0486y  a0                         .byte   0xa0
0000_0487y  0000_0049                  .long   0x49
0000_048by  02                         .uleb128 0x2
0000_048cy  7e                         .byte   0x7e
0000_048dy  7a                         .sleb128 -6
0000_048ey  1b                         .uleb128 0x1b
0000_048fy  0000_04ec'                 .long   .LBB2
0000_0493y  0000_0026                  .long   .LBE2-.LBB2
0000_0497y  15                         .uleb128 0x15
0000_0498y  5f 70 00                   .string "_p"
0000_049by  03                         .byte   0x3
0000_049cy  a0                         .byte   0xa0
0000_049dy  0000_015c                  .long   0x15c
0000_04a1y  02                         .uleb128 0x2
0000_04a2y  7e                         .byte   0x7e
0000_04a3y  7c                         .sleb128 -4
0000_04a4y  00                         .byte   0
0000_04a5y  00                         .byte   0
0000_04a6y  1a                         .uleb128 0x1a
0000_04a7y  0000_0224+                 .long   .LASF42
0000_04aby  03                         .byte   0x3
0000_04acy  a1                         .byte   0xa1
0000_04ady  0000_0544'                 .long   .LFB22
0000_04b1y  0000_003a                  .long   .LFE22-.LFB22
0000_04b5y  01                         .uleb128 0x1
0000_04b6y  9c                         .byte   0x9c
0000_04b7y  0000_04eb                  .long   0x4eb
0000_04bby  14                         .uleb128 0x14
0000_04bcy  70 00                      .string "p"
0000_04bey  03                         .byte   0x3
0000_04bfy  a1                         .byte   0xa1
0000_04c0y  0000_015c                  .long   0x15c
0000_04c4y  02                         .uleb128 0x2
0000_04c5y  91                         .byte   0x91
0000_04c6y  00                         .sleb128 0
0000_04c7y  14                         .uleb128 0x14
0000_04c8y  63 00                      .string "c"
0000_04cay  03                         .byte   0x3
0000_04cby  a1                         .byte   0xa1
0000_04ccy  0000_005b                  .long   0x5b
0000_04d0y  02                         .uleb128 0x2
0000_04d1y  7e                         .byte   0x7e
0000_04d2y  7a                         .sleb128 -6
0000_04d3y  1b                         .uleb128 0x1b
0000_04d4y  0000_055c'                 .long   .LBB3
0000_04d8y  0000_0028                  .long   .LBE3-.LBB3
0000_04dcy  15                         .uleb128 0x15
0000_04ddy  5f 70 00                   .string "_p"
0000_04e0y  03                         .byte   0x3
0000_04e1y  a1                         .byte   0xa1
0000_04e2y  0000_015c                  .long   0x15c
0000_04e6y  02                         .uleb128 0x2
0000_04e7y  7e                         .byte   0x7e
0000_04e8y  7c                         .sleb128 -4
0000_04e9y  00                         .byte   0
0000_04eay  00                         .byte   0
0000_04eby  1a                         .uleb128 0x1a
0000_04ecy  0000_00ba+                 .long   .LASF43
0000_04f0y  03                         .byte   0x3
0000_04f1y  a2                         .byte   0xa2
0000_04f2y  0000_05b8'                 .long   .LFB23
0000_04f6y  0000_0032                  .long   .LFE23-.LFB23
0000_04fay  01                         .uleb128 0x1
0000_04fby  9c                         .byte   0x9c
0000_04fcy  0000_0530                  .long   0x530
0000_0500y  14                         .uleb128 0x14
0000_0501y  70 00                      .string "p"
0000_0503y  03                         .byte   0x3
0000_0504y  a2                         .byte   0xa2
0000_0505y  0000_015c                  .long   0x15c
0000_0509y  02                         .uleb128 0x2
0000_050ay  91                         .byte   0x91
0000_050by  00                         .sleb128 0
0000_050cy  14                         .uleb128 0x14
0000_050dy  63 00                      .string "c"
0000_050fy  03                         .byte   0x3
0000_0510y  a2                         .byte   0xa2
0000_0511y  0000_0025                  .long   0x25
0000_0515y  02                         .uleb128 0x2
0000_0516y  91                         .byte   0x91
0000_0517y  04                         .sleb128 4
0000_0518y  1b                         .uleb128 0x1b
0000_0519y  0000_05c0'                 .long   .LBB4
0000_051dy  0000_0028                  .long   .LBE4-.LBB4
0000_0521y  15                         .uleb128 0x15
0000_0522y  5f 70 00                   .string "_p"
0000_0525y  03                         .byte   0x3
0000_0526y  a2                         .byte   0xa2
0000_0527y  0000_015c                  .long   0x15c
0000_052by  02                         .uleb128 0x2
0000_052cy  7e                         .byte   0x7e
0000_052dy  7c                         .sleb128 -4
0000_052ey  00                         .byte   0
0000_052fy  00                         .byte   0
0000_0530y  19                         .uleb128 0x19
0000_0531y  0000_03ec+                 .long   .LASF44
0000_0535y  03                         .byte   0x3
0000_0536y  a4                         .byte   0xa4
0000_0537y  0000_0049                  .long   0x49
0000_053by  0000_061c'                 .long   .LFB24
0000_053fy  0000_0038                  .long   .LFE24-.LFB24
0000_0543y  01                         .uleb128 0x1
0000_0544y  9c                         .byte   0x9c
0000_0545y  0000_0579                  .long   0x579
0000_0549y  14                         .uleb128 0x14
0000_054ay  70 00                      .string "p"
0000_054cy  03                         .byte   0x3
0000_054dy  a4                         .byte   0xa4
0000_054ey  0000_015c                  .long   0x15c
0000_0552y  02                         .uleb128 0x2
0000_0553y  91                         .byte   0x91
0000_0554y  00                         .sleb128 0
0000_0555y  1b                         .uleb128 0x1b
0000_0556y  0000_0624'                 .long   .LBB5
0000_055ay  0000_0030                  .long   .LBE5-.LBB5
0000_055ey  15                         .uleb128 0x15
0000_055fy  5f 70 00                   .string "_p"
0000_0562y  03                         .byte   0x3
0000_0563y  a5                         .byte   0xa5
0000_0564y  0000_015c                  .long   0x15c
0000_0568y  02                         .uleb128 0x2
0000_0569y  7e                         .byte   0x7e
0000_056ay  7c                         .sleb128 -4
0000_056by  15                         .uleb128 0x15
0000_056cy  76 00                      .string "v"
0000_056ey  03                         .byte   0x3
0000_056fy  a5                         .byte   0xa5
0000_0570y  0000_0049                  .long   0x49
0000_0574y  02                         .uleb128 0x2
0000_0575y  7e                         .byte   0x7e
0000_0576y  7b                         .sleb128 -5
0000_0577y  00                         .byte   0
0000_0578y  00                         .byte   0
0000_0579y  19                         .uleb128 0x19
0000_057ay  0000_044c+                 .long   .LASF45
0000_057ey  03                         .byte   0x3
0000_057fy  a6                         .byte   0xa6
0000_0580y  0000_005b                  .long   0x5b
0000_0584y  0000_068c'                 .long   .LFB25
0000_0588y  0000_003a                  .long   .LFE25-.LFB25
0000_058cy  01                         .uleb128 0x1
0000_058dy  9c                         .byte   0x9c
0000_058ey  0000_05c2                  .long   0x5c2
0000_0592y  14                         .uleb128 0x14
0000_0593y  70 00                      .string "p"
0000_0595y  03                         .byte   0x3
0000_0596y  a6                         .byte   0xa6
0000_0597y  0000_015c                  .long   0x15c
0000_059by  02                         .uleb128 0x2
0000_059cy  91                         .byte   0x91
0000_059dy  00                         .sleb128 0
0000_059ey  1b                         .uleb128 0x1b
0000_059fy  0000_0694'                 .long   .LBB6
0000_05a3y  0000_0032                  .long   .LBE6-.LBB6
0000_05a7y  15                         .uleb128 0x15
0000_05a8y  5f 70 00                   .string "_p"
0000_05aby  03                         .byte   0x3
0000_05acy  a7                         .byte   0xa7
0000_05ady  0000_015c                  .long   0x15c
0000_05b1y  02                         .uleb128 0x2
0000_05b2y  7e                         .byte   0x7e
0000_05b3y  7c                         .sleb128 -4
0000_05b4y  15                         .uleb128 0x15
0000_05b5y  76 00                      .string "v"
0000_05b7y  03                         .byte   0x3
0000_05b8y  a7                         .byte   0xa7
0000_05b9y  0000_005b                  .long   0x5b
0000_05bdy  02                         .uleb128 0x2
0000_05bey  7e                         .byte   0x7e
0000_05bfy  7a                         .sleb128 -6
0000_05c0y  00                         .byte   0
0000_05c1y  00                         .byte   0
0000_05c2y  19                         .uleb128 0x19
0000_05c3y  0000_040e+                 .long   .LASF46
0000_05c7y  03                         .byte   0x3
0000_05c8y  a8                         .byte   0xa8
0000_05c9y  0000_060b                  .long   0x60b
0000_05cdy  0000_0700'                 .long   .LFB26
0000_05d1y  0000_003a                  .long   .LFE26-.LFB26
0000_05d5y  01                         .uleb128 0x1
0000_05d6y  9c                         .byte   0x9c
0000_05d7y  0000_060b                  .long   0x60b
0000_05dby  14                         .uleb128 0x14
0000_05dcy  70 00                      .string "p"
0000_05dey  03                         .byte   0x3
0000_05dfy  a8                         .byte   0xa8
0000_05e0y  0000_015c                  .long   0x15c
0000_05e4y  02                         .uleb128 0x2
0000_05e5y  91                         .byte   0x91
0000_05e6y  00                         .sleb128 0
0000_05e7y  1b                         .uleb128 0x1b
0000_05e8y  0000_0708'                 .long   .LBB7
0000_05ecy  0000_0032                  .long   .LBE7-.LBB7
0000_05f0y  15                         .uleb128 0x15
0000_05f1y  5f 70 00                   .string "_p"
0000_05f4y  03                         .byte   0x3
0000_05f5y  a9                         .byte   0xa9
0000_05f6y  0000_015c                  .long   0x15c
0000_05fay  02                         .uleb128 0x2
0000_05fby  7e                         .byte   0x7e
0000_05fcy  7c                         .sleb128 -4
0000_05fdy  15                         .uleb128 0x15
0000_05fey  76 00                      .string "v"
0000_0600y  03                         .byte   0x3
0000_0601y  a9                         .byte   0xa9
0000_0602y  0000_060b                  .long   0x60b
0000_0606y  02                         .uleb128 0x2
0000_0607y  7e                         .byte   0x7e
0000_0608y  78                         .sleb128 -8
0000_0609y  00                         .byte   0
0000_060ay  00                         .byte   0
0000_060by  02                         .uleb128 0x2
0000_060cy  04                         .byte   0x4
0000_060dy  05                         .byte   0x5
0000_060ey  0000_0234+                 .long   .LASF47
0000_0612y  1a                         .uleb128 0x1a
0000_0613y  0000_0398+                 .long   .LASF48
0000_0617y  03                         .byte   0x3
0000_0618y  ab                         .byte   0xab
0000_0619y  0000_0774'                 .long   .LFB27
0000_061dy  0000_0040                  .long   .LFE27-.LFB27
0000_0621y  01                         .uleb128 0x1
0000_0622y  9c                         .byte   0x9c
0000_0623y  0000_0657                  .long   0x657
0000_0627y  14                         .uleb128 0x14
0000_0628y  70 00                      .string "p"
0000_062ay  03                         .byte   0x3
0000_062by  ab                         .byte   0xab
0000_062cy  0000_015c                  .long   0x15c
0000_0630y  02                         .uleb128 0x2
0000_0631y  91                         .byte   0x91
0000_0632y  00                         .sleb128 0
0000_0633y  14                         .uleb128 0x14
0000_0634y  63 00                      .string "c"
0000_0636y  03                         .byte   0x3
0000_0637y  ab                         .byte   0xab
0000_0638y  0000_0062                  .long   0x62
0000_063cy  02                         .uleb128 0x2
0000_063dy  7e                         .byte   0x7e
0000_063ey  7a                         .sleb128 -6
0000_063fy  1b                         .uleb128 0x1b
0000_0640y  0000_078c'                 .long   .LBB8
0000_0644y  0000_002e                  .long   .LBE8-.LBB8
0000_0648y  15                         .uleb128 0x15
0000_0649y  5f 70 00                   .string "_p"
0000_064cy  03                         .byte   0x3
0000_064dy  ab                         .byte   0xab
0000_064ey  0000_015c                  .long   0x15c
0000_0652y  02                         .uleb128 0x2
0000_0653y  7e                         .byte   0x7e
0000_0654y  7c                         .sleb128 -4
0000_0655y  00                         .byte   0
0000_0656y  00                         .byte   0
0000_0657y  1a                         .uleb128 0x1a
0000_0658y  0000_03fc+                 .long   .LASF49
0000_065cy  03                         .byte   0x3
0000_065dy  ac                         .byte   0xac
0000_065ey  0000_07f4'                 .long   .LFB28
0000_0662y  0000_0040                  .long   .LFE28-.LFB28
0000_0666y  01                         .uleb128 0x1
0000_0667y  9c                         .byte   0x9c
0000_0668y  0000_069c                  .long   0x69c
0000_066cy  14                         .uleb128 0x14
0000_066dy  70 00                      .string "p"
0000_066fy  03                         .byte   0x3
0000_0670y  ac                         .byte   0xac
0000_0671y  0000_015c                  .long   0x15c
0000_0675y  02                         .uleb128 0x2
0000_0676y  91                         .byte   0x91
0000_0677y  00                         .sleb128 0
0000_0678y  14                         .uleb128 0x14
0000_0679y  63 00                      .string "c"
0000_067by  03                         .byte   0x3
0000_067cy  ac                         .byte   0xac
0000_067dy  0000_0155                  .long   0x155
0000_0681y  02                         .uleb128 0x2
0000_0682y  7e                         .byte   0x7e
0000_0683y  7a                         .sleb128 -6
0000_0684y  1b                         .uleb128 0x1b
0000_0685y  0000_080c'                 .long   .LBB9
0000_0689y  0000_002e                  .long   .LBE9-.LBB9
0000_068dy  15                         .uleb128 0x15
0000_068ey  5f 70 00                   .string "_p"
0000_0691y  03                         .byte   0x3
0000_0692y  ac                         .byte   0xac
0000_0693y  0000_015c                  .long   0x15c
0000_0697y  02                         .uleb128 0x2
0000_0698y  7e                         .byte   0x7e
0000_0699y  7c                         .sleb128 -4
0000_069ay  00                         .byte   0
0000_069by  00                         .byte   0
0000_069cy  1a                         .uleb128 0x1a
0000_069dy  0000_03d0+                 .long   .LASF50
0000_06a1y  03                         .byte   0x3
0000_06a2y  ad                         .byte   0xad
0000_06a3y  0000_0874'                 .long   .LFB29
0000_06a7y  0000_0038                  .long   .LFE29-.LFB29
0000_06aby  01                         .uleb128 0x1
0000_06acy  9c                         .byte   0x9c
0000_06ady  0000_06e1                  .long   0x6e1
0000_06b1y  14                         .uleb128 0x14
0000_06b2y  70 00                      .string "p"
0000_06b4y  03                         .byte   0x3
0000_06b5y  ad                         .byte   0xad
0000_06b6y  0000_015c                  .long   0x15c
0000_06bay  02                         .uleb128 0x2
0000_06bby  91                         .byte   0x91
0000_06bcy  00                         .sleb128 0
0000_06bdy  14                         .uleb128 0x14
0000_06bey  63 00                      .string "c"
0000_06c0y  03                         .byte   0x3
0000_06c1y  ad                         .byte   0xad
0000_06c2y  0000_060b                  .long   0x60b
0000_06c6y  02                         .uleb128 0x2
0000_06c7y  91                         .byte   0x91
0000_06c8y  04                         .sleb128 4
0000_06c9y  1b                         .uleb128 0x1b
0000_06cay  0000_087c'                 .long   .LBB10
0000_06cey  0000_002e                  .long   .LBE10-.LBB10
0000_06d2y  15                         .uleb128 0x15
0000_06d3y  5f 70 00                   .string "_p"
0000_06d6y  03                         .byte   0x3
0000_06d7y  ad                         .byte   0xad
0000_06d8y  0000_015c                  .long   0x15c
0000_06dcy  02                         .uleb128 0x2
0000_06ddy  7e                         .byte   0x7e
0000_06dey  7c                         .sleb128 -4
0000_06dfy  00                         .byte   0
0000_06e0y  00                         .byte   0
0000_06e1y  19                         .uleb128 0x19
0000_06e2y  0000_048c+                 .long   .LASF51
0000_06e6y  03                         .byte   0x3
0000_06e7y  af                         .byte   0xaf
0000_06e8y  0000_0049                  .long   0x49
0000_06ecy  0000_08e4'                 .long   .LFB30
0000_06f0y  0000_0038                  .long   .LFE30-.LFB30
0000_06f4y  01                         .uleb128 0x1
0000_06f5y  9c                         .byte   0x9c
0000_06f6y  0000_072a                  .long   0x72a
0000_06fay  14                         .uleb128 0x14
0000_06fby  70 00                      .string "p"
0000_06fdy  03                         .byte   0x3
0000_06fey  af                         .byte   0xaf
0000_06ffy  0000_015c                  .long   0x15c
0000_0703y  02                         .uleb128 0x2
0000_0704y  91                         .byte   0x91
0000_0705y  00                         .sleb128 0
0000_0706y  1b                         .uleb128 0x1b
0000_0707y  0000_08ec'                 .long   .LBB11
0000_070by  0000_0030                  .long   .LBE11-.LBB11
0000_070fy  15                         .uleb128 0x15
0000_0710y  5f 70 00                   .string "_p"
0000_0713y  03                         .byte   0x3
0000_0714y  b0                         .byte   0xb0
0000_0715y  0000_015c                  .long   0x15c
0000_0719y  02                         .uleb128 0x2
0000_071ay  7e                         .byte   0x7e
0000_071by  7c                         .sleb128 -4
0000_071cy  15                         .uleb128 0x15
0000_071dy  76 00                      .string "v"
0000_071fy  03                         .byte   0x3
0000_0720y  b0                         .byte   0xb0
0000_0721y  0000_0049                  .long   0x49
0000_0725y  02                         .uleb128 0x2
0000_0726y  7e                         .byte   0x7e
0000_0727y  7b                         .sleb128 -5
0000_0728y  00                         .byte   0
0000_0729y  00                         .byte   0
0000_072ay  19                         .uleb128 0x19
0000_072by  0000_050c+                 .long   .LASF52
0000_072fy  03                         .byte   0x3
0000_0730y  b1                         .byte   0xb1
0000_0731y  0000_005b                  .long   0x5b
0000_0735y  0000_0954'                 .long   .LFB31
0000_0739y  0000_003a                  .long   .LFE31-.LFB31
0000_073dy  01                         .uleb128 0x1
0000_073ey  9c                         .byte   0x9c
0000_073fy  0000_0773                  .long   0x773
0000_0743y  14                         .uleb128 0x14
0000_0744y  70 00                      .string "p"
0000_0746y  03                         .byte   0x3
0000_0747y  b1                         .byte   0xb1
0000_0748y  0000_015c                  .long   0x15c
0000_074cy  02                         .uleb128 0x2
0000_074dy  91                         .byte   0x91
0000_074ey  00                         .sleb128 0
0000_074fy  1b                         .uleb128 0x1b
0000_0750y  0000_095c'                 .long   .LBB12
0000_0754y  0000_0032                  .long   .LBE12-.LBB12
0000_0758y  15                         .uleb128 0x15
0000_0759y  5f 70 00                   .string "_p"
0000_075cy  03                         .byte   0x3
0000_075dy  b2                         .byte   0xb2
0000_075ey  0000_015c                  .long   0x15c
0000_0762y  02                         .uleb128 0x2
0000_0763y  7e                         .byte   0x7e
0000_0764y  7c                         .sleb128 -4
0000_0765y  15                         .uleb128 0x15
0000_0766y  76 00                      .string "v"
0000_0768y  03                         .byte   0x3
0000_0769y  b2                         .byte   0xb2
0000_076ay  0000_005b                  .long   0x5b
0000_076ey  02                         .uleb128 0x2
0000_076fy  7e                         .byte   0x7e
0000_0770y  7a                         .sleb128 -6
0000_0771y  00                         .byte   0
0000_0772y  00                         .byte   0
0000_0773y  19                         .uleb128 0x19
0000_0774y  0000_04ae+                 .long   .LASF53
0000_0778y  03                         .byte   0x3
0000_0779y  b3                         .byte   0xb3
0000_077ay  0000_060b                  .long   0x60b
0000_077ey  0000_09c8'                 .long   .LFB32
0000_0782y  0000_003a                  .long   .LFE32-.LFB32
0000_0786y  01                         .uleb128 0x1
0000_0787y  9c                         .byte   0x9c
0000_0788y  0000_07bc                  .long   0x7bc
0000_078cy  14                         .uleb128 0x14
0000_078dy  70 00                      .string "p"
0000_078fy  03                         .byte   0x3
0000_0790y  b3                         .byte   0xb3
0000_0791y  0000_015c                  .long   0x15c
0000_0795y  02                         .uleb128 0x2
0000_0796y  91                         .byte   0x91
0000_0797y  00                         .sleb128 0
0000_0798y  1b                         .uleb128 0x1b
0000_0799y  0000_09d0'                 .long   .LBB13
0000_079dy  0000_0032                  .long   .LBE13-.LBB13
0000_07a1y  15                         .uleb128 0x15
0000_07a2y  5f 70 00                   .string "_p"
0000_07a5y  03                         .byte   0x3
0000_07a6y  b4                         .byte   0xb4
0000_07a7y  0000_015c                  .long   0x15c
0000_07aby  02                         .uleb128 0x2
0000_07acy  7e                         .byte   0x7e
0000_07ady  7c                         .sleb128 -4
0000_07aey  15                         .uleb128 0x15
0000_07afy  76 00                      .string "v"
0000_07b1y  03                         .byte   0x3
0000_07b2y  b4                         .byte   0xb4
0000_07b3y  0000_060b                  .long   0x60b
0000_07b7y  02                         .uleb128 0x2
0000_07b8y  7e                         .byte   0x7e
0000_07b9y  78                         .sleb128 -8
0000_07bay  00                         .byte   0
0000_07bby  00                         .byte   0
0000_07bcy  13                         .uleb128 0x13
0000_07bdy  0000_0186+                 .long   .LASF54
0000_07c1y  04                         .byte   0x4
0000_07c2y  23                         .byte   0x23
0000_07c3y  0000_0a3c'                 .long   .LFB33
0000_07c7y  0000_0022                  .long   .LFE33-.LFB33
0000_07cby  01                         .uleb128 0x1
0000_07ccy  9c                         .byte   0x9c
0000_07cdy  0000_07ec                  .long   0x7ec
0000_07d1y  14                         .uleb128 0x14
0000_07d2y  70 00                      .string "p"
0000_07d4y  04                         .byte   0x4
0000_07d5y  23                         .byte   0x23
0000_07d6y  0000_0213                  .long   0x213
0000_07day  02                         .uleb128 0x2
0000_07dby  91                         .byte   0x91
0000_07dcy  00                         .sleb128 0
0000_07ddy  14                         .uleb128 0x14
0000_07dey  61 72 67 00                .string "arg"
0000_07e2y  04                         .byte   0x4
0000_07e3y  23                         .byte   0x23
0000_07e4y  0000_007d                  .long   0x7d
0000_07e8y  02                         .uleb128 0x2
0000_07e9y  91                         .byte   0x91
0000_07eay  04                         .sleb128 4
0000_07eby  00                         .byte   0
0000_07ecy  1c                         .uleb128 0x1c
0000_07edy  0000_006c+                 .long   .LASF55
0000_07f1y  05                         .byte   0x5
0000_07f2y  21                         .byte   0x21
0000_07f3y  0000_0076                  .long   0x76
0000_07f7y  0000_0a80'                 .long   .LFB34
0000_07fby  0000_003e                  .long   .LFE34-.LFB34
0000_07ffy  01                         .uleb128 0x1
0000_0800y  9c                         .byte   0x9c
0000_0801y  0000_0853                  .long   0x853
0000_0805y  14                         .uleb128 0x14
0000_0806y  63 00                      .string "c"
0000_0808y  05                         .byte   0x5
0000_0809y  21                         .byte   0x21
0000_080ay  0000_002c                  .long   0x2c
0000_080ey  02                         .uleb128 0x2
0000_080fy  91                         .byte   0x91
0000_0810y  00                         .sleb128 0
0000_0811y  1d                         .uleb128 0x1d
0000_0812y  70 69 00                   .string "pi"
0000_0815y  04                         .byte   0x4
0000_0816y  05                         .byte   0x5
0000_0817y  23                         .byte   0x23
0000_0818y  0000_082f                  .long   0x82f
0000_081cy  1e                         .uleb128 0x1e
0000_081dy  69 00                      .string "i"
0000_081fy  05                         .byte   0x5
0000_0820y  23                         .byte   0x23
0000_0821y  0000_0076                  .long   0x76
0000_0825y  1e                         .uleb128 0x1e
0000_0826y  76 00                      .string "v"
0000_0828y  05                         .byte   0x5
0000_0829y  23                         .byte   0x23
0000_082ay  0000_007d                  .long   0x7d
0000_082ey  00                         .byte   0
0000_082fy  15                         .uleb128 0x15
0000_0830y  76 00                      .string "v"
0000_0832y  05                         .byte   0x5
0000_0833y  23                         .byte   0x23
0000_0834y  0000_0811                  .long   0x811
0000_0838y  02                         .uleb128 0x2
0000_0839y  7e                         .byte   0x7e
0000_083ay  7c                         .sleb128 -4
0000_083by  1b                         .uleb128 0x1b
0000_083cy  0000_0ad8'                 .long   .LBB14
0000_0840y  0000_000c                  .long   .LBE14-.LBB14
0000_0844y  1f                         .uleb128 0x1f
0000_0845y  0000_037a+                 .long   .LASF58
0000_0849y  05                         .byte   0x5
0000_084ay  29                         .byte   0x29
0000_084by  0000_0076                  .long   0x76
0000_084fy  06                         .uleb128 0x6
0000_0850y  00                         .byte   0
0000_0851y  00                         .byte   0
0000_0852y  00                         .byte   0
0000_0853y  18                         .uleb128 0x18
0000_0854y  0000_0106+                 .long   .LASF56
0000_0858y  05                         .byte   0x5
0000_0859y  2d                         .byte   0x2d
0000_085ay  0000_0afc'                 .long   .LFB35
0000_085ey  0000_006a                  .long   .LFE35-.LFB35
0000_0862y  01                         .uleb128 0x1
0000_0863y  9c                         .byte   0x9c
0000_0864y  0000_088c                  .long   0x88c
0000_0868y  14                         .uleb128 0x14
0000_0869y  70 00                      .string "p"
0000_086by  05                         .byte   0x5
0000_086cy  2d                         .byte   0x2d
0000_086dy  0000_088c                  .long   0x88c
0000_0871y  02                         .uleb128 0x2
0000_0872y  91                         .byte   0x91
0000_0873y  00                         .sleb128 0
0000_0874y  1b                         .uleb128 0x1b
0000_0875y  0000_0b18'                 .long   .LBB15
0000_0879y  0000_0030                  .long   .LBE15-.LBB15
0000_087dy  15                         .uleb128 0x15
0000_087ey  6d 62 00                   .string "mb"
0000_0881y  05                         .byte   0x5
0000_0882y  30                         .byte   0x30
0000_0883y  0000_015c                  .long   0x15c
0000_0887y  02                         .uleb128 0x2
0000_0888y  7e                         .byte   0x7e
0000_0889y  7c                         .sleb128 -4
0000_088ay  00                         .byte   0
0000_088by  00                         .byte   0
0000_088cy  04                         .uleb128 0x4
0000_088dy  04                         .byte   0x4
0000_088ey  0000_0062                  .long   0x62
0000_0892y  18                         .uleb128 0x18
0000_0893y  0000_009e+                 .long   .LASF57
0000_0897y  05                         .byte   0x5
0000_0898y  3b                         .byte   0x3b
0000_0899y  0000_0bd0'                 .long   .LFB36
0000_089dy  0000_0056                  .long   .LFE36-.LFB36
0000_08a1y  01                         .uleb128 0x1
0000_08a2y  9c                         .byte   0x9c
0000_08a3y  0000_08c0                  .long   0x8c0
0000_08a7y  14                         .uleb128 0x14
0000_08a8y  70 00                      .string "p"
0000_08aay  05                         .byte   0x5
0000_08aby  3b                         .byte   0x3b
0000_08acy  0000_088c                  .long   0x88c
0000_08b0y  02                         .uleb128 0x2
0000_08b1y  91                         .byte   0x91
0000_08b2y  00                         .sleb128 0
0000_08b3y  15                         .uleb128 0x15
0000_08b4y  71 00                      .string "q"
0000_08b6y  05                         .byte   0x5
0000_08b7y  3d                         .byte   0x3d
0000_08b8y  0000_007d                  .long   0x7d
0000_08bcy  02                         .uleb128 0x2
0000_08bdy  7e                         .byte   0x7e
0000_08bey  7c                         .sleb128 -4
0000_08bfy  00                         .byte   0
0000_08c0y  20                         .uleb128 0x20
0000_08c1y  0000_051c+                 .long   .LASF72
0000_08c5y  05                         .byte   0x5
0000_08c6y  4b                         .byte   0x4b
0000_08c7y  0000_0c7c'                 .long   .LFB37
0000_08cby  0000_00c0                  .long   .LFE37-.LFB37
0000_08cfy  01                         .uleb128 0x1
0000_08d0y  9c                         .byte   0x9c
0000_08d1y  0000_093a                  .long   0x93a
0000_08d5y  21                         .uleb128 0x21
0000_08d6y  0000_01f6+                 .long   .LASF73
0000_08day  05                         .byte   0x5
0000_08dby  4d                         .byte   0x4d
0000_08dcy  0000_0076                  .long   0x76
0000_08e0y  0000_08e6                  .long   0x8e6
0000_08e4y  06                         .uleb128 0x6
0000_08e5y  00                         .byte   0
0000_08e6y  1b                         .uleb128 0x1b
0000_08e7y  0000_0ca8'                 .long   .LBB16
0000_08eby  0000_00a2                  .long   .LBE16-.LBB16
0000_08efy  15                         .uleb128 0x15
0000_08f0y  69 00                      .string "i"
0000_08f2y  05                         .byte   0x5
0000_08f3y  4f                         .byte   0x4f
0000_08f4y  0000_0076                  .long   0x76
0000_08f8y  02                         .uleb128 0x2
0000_08f9y  7e                         .byte   0x7e
0000_08fay  7c                         .sleb128 -4
0000_08fby  22                         .uleb128 0x22
0000_08fcy  0000_0cac'                 .long   .LBB17
0000_0900y  0000_005a                  .long   .LBE17-.LBB17
0000_0904y  0000_0925                  .long   0x925
0000_0908y  16                         .uleb128 0x16
0000_0909y  0000_031c+                 .long   .LASF13
0000_090dy  05                         .byte   0x5
0000_090ey  54                         .byte   0x54
0000_090fy  0000_007d                  .long   0x7d
0000_0913y  02                         .uleb128 0x2
0000_0914y  7e                         .byte   0x7e
0000_0915y  78                         .sleb128 -8
0000_0916y  15                         .uleb128 0x15
0000_0917y  61 72 67 00                .string "arg"
0000_091by  05                         .byte   0x5
0000_091cy  55                         .byte   0x55
0000_091dy  0000_007d                  .long   0x7d
0000_0921y  02                         .uleb128 0x2
0000_0922y  7e                         .byte   0x7e
0000_0923y  74                         .sleb128 -12
0000_0924y  00                         .byte   0
0000_0925y  23                         .uleb128 0x23
0000_0926y  0000_0000+                 .long   .Ldebug_ranges0+0
0000_092ay  1f                         .uleb128 0x1f
0000_092by  0000_0174+                 .long   .LASF59
0000_092fy  05                         .byte   0x5
0000_0930y  5e                         .byte   0x5e
0000_0931y  0000_0076                  .long   0x76
0000_0935y  06                         .uleb128 0x6
0000_0936y  00                         .byte   0
0000_0937y  00                         .byte   0
0000_0938y  00                         .byte   0
0000_0939y  00                         .byte   0
0000_093ay  24                         .uleb128 0x24
0000_093by  0000_0480+                 .long   .LASF74
0000_093fy  16                         .uleb128 0x16
0000_0940y  0000_049c+                 .long   .LASF60
0000_0944y  05                         .byte   0x5
0000_0945y  1f                         .byte   0x1f
0000_0946y  0000_003e                  .long   0x3e
0000_094ay  05                         .uleb128 0x5
0000_094by  03                         .byte   0x3
0000_094cy  0000_0000%                 .long   in_panic
0000_0950y  25                         .uleb128 0x25
0000_0951y  0000_007c+                 .long   .LASF61
0000_0955y  05                         .byte   0x5
0000_0956y  38                         .byte   0x38
0000_0957y  0000_088c                  .long   0x88c
0000_095by  05                         .uleb128 0x5
0000_095cy  03                         .byte   0x3
0000_095dy  0000_0000*                 .long   panicstr
0000_0961y  26                         .uleb128 0x26
0000_0962y  0000_001e+                 .long   .LASF62
0000_0966y  07                         .byte   0x7
0000_0967y  4b                         .byte   0x4b
0000_0968y  0000_096c                  .long   0x96c
0000_096cy  04                         .uleb128 0x4
0000_096dy  04                         .byte   0x4
0000_096ey  0000_007f                  .long   0x7f
0000_0972y  26                         .uleb128 0x26
0000_0973y  0000_02ea+                 .long   .LASF63
0000_0977y  07                         .byte   0x7
0000_0978y  6d                         .byte   0x6d
0000_0979y  0000_0037                  .long   0x37
0000_097dy  26                         .uleb128 0x26
0000_097ey  0000_0568+                 .long   .LASF64
0000_0982y  07                         .byte   0x7
0000_0983y  74                         .byte   0x74
0000_0984y  0000_093a                  .long   0x93a
0000_0988y  26                         .uleb128 0x26
0000_0989y  0000_04ce+                 .long   .LASF65
0000_098dy  04                         .byte   0x4
0000_098ey  26                         .byte   0x26
0000_098fy  0000_0993                  .long   0x993
0000_0993y  04                         .uleb128 0x4
0000_0994y  04                         .byte   0x4
0000_0995y  0000_007d                  .long   0x7d
0000_0999y  26                         .uleb128 0x26
0000_099ay  0000_034a+                 .long   .LASF66
0000_099ey  04                         .byte   0x4
0000_099fy  26                         .byte   0x26
0000_09a0y  0000_0993                  .long   0x993
0000_09a4y  0d                         .uleb128 0xd
0000_09a5y  0000_007d                  .long   0x7d
0000_09a9y  0000_09af                  .long   0x9af
0000_09ady  27                         .uleb128 0x27
0000_09aey  00                         .byte   0
0000_09afy  26                         .uleb128 0x26
0000_09b0y  0000_04ec+                 .long   .LASF67
0000_09b4y  04                         .byte   0x4
0000_09b5y  27                         .byte   0x27
0000_09b6y  0000_09a4                  .long   0x9a4
0000_09bay  00                         .byte   0
0000_0000z                             .section    .debug_abbrev,"",@progbits
0000_0000z                         .Ldebug_abbrev0:
0000_0000z  01                         .uleb128 0x1
0000_0001z  11                         .uleb128 0x11
0000_0002z  01                         .byte   0x1
0000_0003z  25                         .uleb128 0x25
0000_0004z  0e                         .uleb128 0xe
0000_0005z  13                         .uleb128 0x13
0000_0006z  0b                         .uleb128 0xb
0000_0007z  03                         .uleb128 0x3
0000_0008z  0e                         .uleb128 0xe
0000_0009z  1b                         .uleb128 0x1b
0000_000az  0e                         .uleb128 0xe
0000_000bz  11                         .uleb128 0x11
0000_000cz  01                         .uleb128 0x1
0000_000dz  12                         .uleb128 0x12
0000_000ez  06                         .uleb128 0x6
0000_000fz  10                         .uleb128 0x10
0000_0010z  17                         .uleb128 0x17
0000_0011z  00                         .byte   0
0000_0012z  00                         .byte   0
0000_0013z  02                         .uleb128 0x2
0000_0014z  24                         .uleb128 0x24
0000_0015z  00                         .byte   0
0000_0016z  0b                         .uleb128 0xb
0000_0017z  0b                         .uleb128 0xb
0000_0018z  3e                         .uleb128 0x3e
0000_0019z  0b                         .uleb128 0xb
0000_001az  03                         .uleb128 0x3
0000_001bz  0e                         .uleb128 0xe
0000_001cz  00                         .byte   0
0000_001dz  00                         .byte   0
0000_001ez  03                         .uleb128 0x3
0000_001fz  16                         .uleb128 0x16
0000_0020z  00                         .byte   0
0000_0021z  03                         .uleb128 0x3
0000_0022z  0e                         .uleb128 0xe
0000_0023z  3a                         .uleb128 0x3a
0000_0024z  0b                         .uleb128 0xb
0000_0025z  3b                         .uleb128 0x3b
0000_0026z  0b                         .uleb128 0xb
0000_0027z  49                         .uleb128 0x49
0000_0028z  13                         .uleb128 0x13
0000_0029z  00                         .byte   0
0000_002az  00                         .byte   0
0000_002bz  04                         .uleb128 0x4
0000_002cz  0f                         .uleb128 0xf
0000_002dz  00                         .byte   0
0000_002ez  0b                         .uleb128 0xb
0000_002fz  0b                         .uleb128 0xb
0000_0030z  49                         .uleb128 0x49
0000_0031z  13                         .uleb128 0x13
0000_0032z  00                         .byte   0
0000_0033z  00                         .byte   0
0000_0034z  05                         .uleb128 0x5
0000_0035z  15                         .uleb128 0x15
0000_0036z  01                         .byte   0x1
0000_0037z  01                         .uleb128 0x1
0000_0038z  13                         .uleb128 0x13
0000_0039z  00                         .byte   0
0000_003az  00                         .byte   0
0000_003bz  06                         .uleb128 0x6
0000_003cz  18                         .uleb128 0x18
0000_003dz  00                         .byte   0
0000_003ez  00                         .byte   0
0000_003fz  00                         .byte   0
0000_0040z  07                         .uleb128 0x7
0000_0041z  24                         .uleb128 0x24
0000_0042z  00                         .byte   0
0000_0043z  0b                         .uleb128 0xb
0000_0044z  0b                         .uleb128 0xb
0000_0045z  3e                         .uleb128 0x3e
0000_0046z  0b                         .uleb128 0xb
0000_0047z  03                         .uleb128 0x3
0000_0048z  08                         .uleb128 0x8
0000_0049z  00                         .byte   0
0000_004az  00                         .byte   0
0000_004bz  08                         .uleb128 0x8
0000_004cz  0f                         .uleb128 0xf
0000_004dz  00                         .byte   0
0000_004ez  0b                         .uleb128 0xb
0000_004fz  0b                         .uleb128 0xb
0000_0050z  00                         .byte   0
0000_0051z  00                         .byte   0
0000_0052z  09                         .uleb128 0x9
0000_0053z  13                         .uleb128 0x13
0000_0054z  01                         .byte   0x1
0000_0055z  03                         .uleb128 0x3
0000_0056z  0e                         .uleb128 0xe
0000_0057z  0b                         .uleb128 0xb
0000_0058z  0b                         .uleb128 0xb
0000_0059z  3a                         .uleb128 0x3a
0000_005az  0b                         .uleb128 0xb
0000_005bz  3b                         .uleb128 0x3b
0000_005cz  0b                         .uleb128 0xb
0000_005dz  01                         .uleb128 0x1
0000_005ez  13                         .uleb128 0x13
0000_005fz  00                         .byte   0
0000_0060z  00                         .byte   0
0000_0061z  0a                         .uleb128 0xa
0000_0062z  0d                         .uleb128 0xd
0000_0063z  00                         .byte   0
0000_0064z  03                         .uleb128 0x3
0000_0065z  08                         .uleb128 0x8
0000_0066z  3a                         .uleb128 0x3a
0000_0067z  0b                         .uleb128 0xb
0000_0068z  3b                         .uleb128 0x3b
0000_0069z  0b                         .uleb128 0xb
0000_006az  49                         .uleb128 0x49
0000_006bz  13                         .uleb128 0x13
0000_006cz  38                         .uleb128 0x38
0000_006dz  0b                         .uleb128 0xb
0000_006ez  00                         .byte   0
0000_006fz  00                         .byte   0
0000_0070z  0b                         .uleb128 0xb
0000_0071z  0d                         .uleb128 0xd
0000_0072z  00                         .byte   0
0000_0073z  03                         .uleb128 0x3
0000_0074z  0e                         .uleb128 0xe
0000_0075z  3a                         .uleb128 0x3a
0000_0076z  0b                         .uleb128 0xb
0000_0077z  3b                         .uleb128 0x3b
0000_0078z  0b                         .uleb128 0xb
0000_0079z  49                         .uleb128 0x49
0000_007az  13                         .uleb128 0x13
0000_007bz  38                         .uleb128 0x38
0000_007cz  0b                         .uleb128 0xb
0000_007dz  00                         .byte   0
0000_007ez  00                         .byte   0
0000_007fz  0c                         .uleb128 0xc
0000_0080z  13                         .uleb128 0x13
0000_0081z  01                         .byte   0x1
0000_0082z  03                         .uleb128 0x3
0000_0083z  0e                         .uleb128 0xe
0000_0084z  0b                         .uleb128 0xb
0000_0085z  05                         .uleb128 0x5
0000_0086z  3a                         .uleb128 0x3a
0000_0087z  0b                         .uleb128 0xb
0000_0088z  3b                         .uleb128 0x3b
0000_0089z  0b                         .uleb128 0xb
0000_008az  01                         .uleb128 0x1
0000_008bz  13                         .uleb128 0x13
0000_008cz  00                         .byte   0
0000_008dz  00                         .byte   0
0000_008ez  0d                         .uleb128 0xd
0000_008fz  01                         .uleb128 0x1
0000_0090z  01                         .byte   0x1
0000_0091z  49                         .uleb128 0x49
0000_0092z  13                         .uleb128 0x13
0000_0093z  01                         .uleb128 0x1
0000_0094z  13                         .uleb128 0x13
0000_0095z  00                         .byte   0
0000_0096z  00                         .byte   0
0000_0097z  0e                         .uleb128 0xe
0000_0098z  21                         .uleb128 0x21
0000_0099z  00                         .byte   0
0000_009az  49                         .uleb128 0x49
0000_009bz  13                         .uleb128 0x13
0000_009cz  2f                         .uleb128 0x2f
0000_009dz  05                         .uleb128 0x5
0000_009ez  00                         .byte   0
0000_009fz  00                         .byte   0
0000_00a0z  0f                         .uleb128 0xf
0000_00a1z  26                         .uleb128 0x26
0000_00a2z  00                         .byte   0
0000_00a3z  49                         .uleb128 0x49
0000_00a4z  13                         .uleb128 0x13
0000_00a5z  00                         .byte   0
0000_00a6z  00                         .byte   0
0000_00a7z  10                         .uleb128 0x10
0000_00a8z  2e                         .uleb128 0x2e
0000_00a9z  01                         .byte   0x1
0000_00aaz  03                         .uleb128 0x3
0000_00abz  08                         .uleb128 0x8
0000_00acz  3a                         .uleb128 0x3a
0000_00adz  0b                         .uleb128 0xb
0000_00aez  3b                         .uleb128 0x3b
0000_00afz  0b                         .uleb128 0xb
0000_00b0z  27                         .uleb128 0x27
0000_00b1z  19                         .uleb128 0x19
0000_00b2z  11                         .uleb128 0x11
0000_00b3z  01                         .uleb128 0x1
0000_00b4z  12                         .uleb128 0x12
0000_00b5z  06                         .uleb128 0x6
0000_00b6z  40                         .uleb128 0x40
0000_00b7z  18                         .uleb128 0x18
0000_00b8z  97 42                      .uleb128 0x2117
0000_00baz  19                         .uleb128 0x19
0000_00bbz  01                         .uleb128 0x1
0000_00bcz  13                         .uleb128 0x13
0000_00bdz  00                         .byte   0
0000_00bez  00                         .byte   0
0000_00bfz  11                         .uleb128 0x11
0000_00c0z  05                         .uleb128 0x5
0000_00c1z  00                         .byte   0
0000_00c2z  03                         .uleb128 0x3
0000_00c3z  0e                         .uleb128 0xe
0000_00c4z  3a                         .uleb128 0x3a
0000_00c5z  0b                         .uleb128 0xb
0000_00c6z  3b                         .uleb128 0x3b
0000_00c7z  0b                         .uleb128 0xb
0000_00c8z  49                         .uleb128 0x49
0000_00c9z  13                         .uleb128 0x13
0000_00caz  02                         .uleb128 0x2
0000_00cbz  18                         .uleb128 0x18
0000_00ccz  00                         .byte   0
0000_00cdz  00                         .byte   0
0000_00cez  12                         .uleb128 0x12
0000_00cfz  2e                         .uleb128 0x2e
0000_00d0z  00                         .byte   0
0000_00d1z  03                         .uleb128 0x3
0000_00d2z  0e                         .uleb128 0xe
0000_00d3z  3a                         .uleb128 0x3a
0000_00d4z  0b                         .uleb128 0xb
0000_00d5z  3b                         .uleb128 0x3b
0000_00d6z  0b                         .uleb128 0xb
0000_00d7z  27                         .uleb128 0x27
0000_00d8z  19                         .uleb128 0x19
0000_00d9z  87 01                      .uleb128 0x87
0000_00dbz  19                         .uleb128 0x19
0000_00dcz  11                         .uleb128 0x11
0000_00ddz  01                         .uleb128 0x1
0000_00dez  12                         .uleb128 0x12
0000_00dfz  06                         .uleb128 0x6
0000_00e0z  40                         .uleb128 0x40
0000_00e1z  18                         .uleb128 0x18
0000_00e2z  96 42                      .uleb128 0x2116
0000_00e4z  19                         .uleb128 0x19
0000_00e5z  00                         .byte   0
0000_00e6z  00                         .byte   0
0000_00e7z  13                         .uleb128 0x13
0000_00e8z  2e                         .uleb128 0x2e
0000_00e9z  01                         .byte   0x1
0000_00eaz  03                         .uleb128 0x3
0000_00ebz  0e                         .uleb128 0xe
0000_00ecz  3a                         .uleb128 0x3a
0000_00edz  0b                         .uleb128 0xb
0000_00eez  3b                         .uleb128 0x3b
0000_00efz  0b                         .uleb128 0xb
0000_00f0z  27                         .uleb128 0x27
0000_00f1z  19                         .uleb128 0x19
0000_00f2z  11                         .uleb128 0x11
0000_00f3z  01                         .uleb128 0x1
0000_00f4z  12                         .uleb128 0x12
0000_00f5z  06                         .uleb128 0x6
0000_00f6z  40                         .uleb128 0x40
0000_00f7z  18                         .uleb128 0x18
0000_00f8z  96 42                      .uleb128 0x2116
0000_00faz  19                         .uleb128 0x19
0000_00fbz  01                         .uleb128 0x1
0000_00fcz  13                         .uleb128 0x13
0000_00fdz  00                         .byte   0
0000_00fez  00                         .byte   0
0000_00ffz  14                         .uleb128 0x14
0000_0100z  05                         .uleb128 0x5
0000_0101z  00                         .byte   0
0000_0102z  03                         .uleb128 0x3
0000_0103z  08                         .uleb128 0x8
0000_0104z  3a                         .uleb128 0x3a
0000_0105z  0b                         .uleb128 0xb
0000_0106z  3b                         .uleb128 0x3b
0000_0107z  0b                         .uleb128 0xb
0000_0108z  49                         .uleb128 0x49
0000_0109z  13                         .uleb128 0x13
0000_010az  02                         .uleb128 0x2
0000_010bz  18                         .uleb128 0x18
0000_010cz  00                         .byte   0
0000_010dz  00                         .byte   0
0000_010ez  15                         .uleb128 0x15
0000_010fz  34                         .uleb128 0x34
0000_0110z  00                         .byte   0
0000_0111z  03                         .uleb128 0x3
0000_0112z  08                         .uleb128 0x8
0000_0113z  3a                         .uleb128 0x3a
0000_0114z  0b                         .uleb128 0xb
0000_0115z  3b                         .uleb128 0x3b
0000_0116z  0b                         .uleb128 0xb
0000_0117z  49                         .uleb128 0x49
0000_0118z  13                         .uleb128 0x13
0000_0119z  02                         .uleb128 0x2
0000_011az  18                         .uleb128 0x18
0000_011bz  00                         .byte   0
0000_011cz  00                         .byte   0
0000_011dz  16                         .uleb128 0x16
0000_011ez  34                         .uleb128 0x34
0000_011fz  00                         .byte   0
0000_0120z  03                         .uleb128 0x3
0000_0121z  0e                         .uleb128 0xe
0000_0122z  3a                         .uleb128 0x3a
0000_0123z  0b                         .uleb128 0xb
0000_0124z  3b                         .uleb128 0x3b
0000_0125z  0b                         .uleb128 0xb
0000_0126z  49                         .uleb128 0x49
0000_0127z  13                         .uleb128 0x13
0000_0128z  02                         .uleb128 0x2
0000_0129z  18                         .uleb128 0x18
0000_012az  00                         .byte   0
0000_012bz  00                         .byte   0
0000_012cz  17                         .uleb128 0x17
0000_012dz  26                         .uleb128 0x26
0000_012ez  00                         .byte   0
0000_012fz  00                         .byte   0
0000_0130z  00                         .byte   0
0000_0131z  18                         .uleb128 0x18
0000_0132z  2e                         .uleb128 0x2e
0000_0133z  01                         .byte   0x1
0000_0134z  3f                         .uleb128 0x3f
0000_0135z  19                         .uleb128 0x19
0000_0136z  03                         .uleb128 0x3
0000_0137z  0e                         .uleb128 0xe
0000_0138z  3a                         .uleb128 0x3a
0000_0139z  0b                         .uleb128 0xb
0000_013az  3b                         .uleb128 0x3b
0000_013bz  0b                         .uleb128 0xb
0000_013cz  27                         .uleb128 0x27
0000_013dz  19                         .uleb128 0x19
0000_013ez  11                         .uleb128 0x11
0000_013fz  01                         .uleb128 0x1
0000_0140z  12                         .uleb128 0x12
0000_0141z  06                         .uleb128 0x6
0000_0142z  40                         .uleb128 0x40
0000_0143z  18                         .uleb128 0x18
0000_0144z  96 42                      .uleb128 0x2116
0000_0146z  19                         .uleb128 0x19
0000_0147z  01                         .uleb128 0x1
0000_0148z  13                         .uleb128 0x13
0000_0149z  00                         .byte   0
0000_014az  00                         .byte   0
0000_014bz  19                         .uleb128 0x19
0000_014cz  2e                         .uleb128 0x2e
0000_014dz  01                         .byte   0x1
0000_014ez  3f                         .uleb128 0x3f
0000_014fz  19                         .uleb128 0x19
0000_0150z  03                         .uleb128 0x3
0000_0151z  0e                         .uleb128 0xe
0000_0152z  3a                         .uleb128 0x3a
0000_0153z  0b                         .uleb128 0xb
0000_0154z  3b                         .uleb128 0x3b
0000_0155z  0b                         .uleb128 0xb
0000_0156z  27                         .uleb128 0x27
0000_0157z  19                         .uleb128 0x19
0000_0158z  49                         .uleb128 0x49
0000_0159z  13                         .uleb128 0x13
0000_015az  11                         .uleb128 0x11
0000_015bz  01                         .uleb128 0x1
0000_015cz  12                         .uleb128 0x12
0000_015dz  06                         .uleb128 0x6
0000_015ez  40                         .uleb128 0x40
0000_015fz  18                         .uleb128 0x18
0000_0160z  97 42                      .uleb128 0x2117
0000_0162z  19                         .uleb128 0x19
0000_0163z  01                         .uleb128 0x1
0000_0164z  13                         .uleb128 0x13
0000_0165z  00                         .byte   0
0000_0166z  00                         .byte   0
0000_0167z  1a                         .uleb128 0x1a
0000_0168z  2e                         .uleb128 0x2e
0000_0169z  01                         .byte   0x1
0000_016az  3f                         .uleb128 0x3f
0000_016bz  19                         .uleb128 0x19
0000_016cz  03                         .uleb128 0x3
0000_016dz  0e                         .uleb128 0xe
0000_016ez  3a                         .uleb128 0x3a
0000_016fz  0b                         .uleb128 0xb
0000_0170z  3b                         .uleb128 0x3b
0000_0171z  0b                         .uleb128 0xb
0000_0172z  27                         .uleb128 0x27
0000_0173z  19                         .uleb128 0x19
0000_0174z  11                         .uleb128 0x11
0000_0175z  01                         .uleb128 0x1
0000_0176z  12                         .uleb128 0x12
0000_0177z  06                         .uleb128 0x6
0000_0178z  40                         .uleb128 0x40
0000_0179z  18                         .uleb128 0x18
0000_017az  97 42                      .uleb128 0x2117
0000_017cz  19                         .uleb128 0x19
0000_017dz  01                         .uleb128 0x1
0000_017ez  13                         .uleb128 0x13
0000_017fz  00                         .byte   0
0000_0180z  00                         .byte   0
0000_0181z  1b                         .uleb128 0x1b
0000_0182z  0b                         .uleb128 0xb
0000_0183z  01                         .byte   0x1
0000_0184z  11                         .uleb128 0x11
0000_0185z  01                         .uleb128 0x1
0000_0186z  12                         .uleb128 0x12
0000_0187z  06                         .uleb128 0x6
0000_0188z  00                         .byte   0
0000_0189z  00                         .byte   0
0000_018az  1c                         .uleb128 0x1c
0000_018bz  2e                         .uleb128 0x2e
0000_018cz  01                         .byte   0x1
0000_018dz  3f                         .uleb128 0x3f
0000_018ez  19                         .uleb128 0x19
0000_018fz  03                         .uleb128 0x3
0000_0190z  0e                         .uleb128 0xe
0000_0191z  3a                         .uleb128 0x3a
0000_0192z  0b                         .uleb128 0xb
0000_0193z  3b                         .uleb128 0x3b
0000_0194z  0b                         .uleb128 0xb
0000_0195z  27                         .uleb128 0x27
0000_0196z  19                         .uleb128 0x19
0000_0197z  49                         .uleb128 0x49
0000_0198z  13                         .uleb128 0x13
0000_0199z  11                         .uleb128 0x11
0000_019az  01                         .uleb128 0x1
0000_019bz  12                         .uleb128 0x12
0000_019cz  06                         .uleb128 0x6
0000_019dz  40                         .uleb128 0x40
0000_019ez  18                         .uleb128 0x18
0000_019fz  96 42                      .uleb128 0x2116
0000_01a1z  19                         .uleb128 0x19
0000_01a2z  01                         .uleb128 0x1
0000_01a3z  13                         .uleb128 0x13
0000_01a4z  00                         .byte   0
0000_01a5z  00                         .byte   0
0000_01a6z  1d                         .uleb128 0x1d
0000_01a7z  17                         .uleb128 0x17
0000_01a8z  01                         .byte   0x1
0000_01a9z  03                         .uleb128 0x3
0000_01aaz  08                         .uleb128 0x8
0000_01abz  0b                         .uleb128 0xb
0000_01acz  0b                         .uleb128 0xb
0000_01adz  3a                         .uleb128 0x3a
0000_01aez  0b                         .uleb128 0xb
0000_01afz  3b                         .uleb128 0x3b
0000_01b0z  0b                         .uleb128 0xb
0000_01b1z  01                         .uleb128 0x1
0000_01b2z  13                         .uleb128 0x13
0000_01b3z  00                         .byte   0
0000_01b4z  00                         .byte   0
0000_01b5z  1e                         .uleb128 0x1e
0000_01b6z  0d                         .uleb128 0xd
0000_01b7z  00                         .byte   0
0000_01b8z  03                         .uleb128 0x3
0000_01b9z  08                         .uleb128 0x8
0000_01baz  3a                         .uleb128 0x3a
0000_01bbz  0b                         .uleb128 0xb
0000_01bcz  3b                         .uleb128 0x3b
0000_01bdz  0b                         .uleb128 0xb
0000_01bez  49                         .uleb128 0x49
0000_01bfz  13                         .uleb128 0x13
0000_01c0z  00                         .byte   0
0000_01c1z  00                         .byte   0
0000_01c2z  1f                         .uleb128 0x1f
0000_01c3z  2e                         .uleb128 0x2e
0000_01c4z  01                         .byte   0x1
0000_01c5z  3f                         .uleb128 0x3f
0000_01c6z  19                         .uleb128 0x19
0000_01c7z  03                         .uleb128 0x3
0000_01c8z  0e                         .uleb128 0xe
0000_01c9z  3a                         .uleb128 0x3a
0000_01caz  0b                         .uleb128 0xb
0000_01cbz  3b                         .uleb128 0x3b
0000_01ccz  0b                         .uleb128 0xb
0000_01cdz  49                         .uleb128 0x49
0000_01cez  13                         .uleb128 0x13
0000_01cfz  3c                         .uleb128 0x3c
0000_01d0z  19                         .uleb128 0x19
0000_01d1z  00                         .byte   0
0000_01d2z  00                         .byte   0
0000_01d3z  20                         .uleb128 0x20
0000_01d4z  2e                         .uleb128 0x2e
0000_01d5z  01                         .byte   0x1
0000_01d6z  3f                         .uleb128 0x3f
0000_01d7z  19                         .uleb128 0x19
0000_01d8z  03                         .uleb128 0x3
0000_01d9z  0e                         .uleb128 0xe
0000_01daz  3a                         .uleb128 0x3a
0000_01dbz  0b                         .uleb128 0xb
0000_01dcz  3b                         .uleb128 0x3b
0000_01ddz  0b                         .uleb128 0xb
0000_01dez  11                         .uleb128 0x11
0000_01dfz  01                         .uleb128 0x1
0000_01e0z  12                         .uleb128 0x12
0000_01e1z  06                         .uleb128 0x6
0000_01e2z  40                         .uleb128 0x40
0000_01e3z  18                         .uleb128 0x18
0000_01e4z  96 42                      .uleb128 0x2116
0000_01e6z  19                         .uleb128 0x19
0000_01e7z  01                         .uleb128 0x1
0000_01e8z  13                         .uleb128 0x13
0000_01e9z  00                         .byte   0
0000_01eaz  00                         .byte   0
0000_01ebz  21                         .uleb128 0x21
0000_01ecz  2e                         .uleb128 0x2e
0000_01edz  01                         .byte   0x1
0000_01eez  3f                         .uleb128 0x3f
0000_01efz  19                         .uleb128 0x19
0000_01f0z  03                         .uleb128 0x3
0000_01f1z  0e                         .uleb128 0xe
0000_01f2z  3a                         .uleb128 0x3a
0000_01f3z  0b                         .uleb128 0xb
0000_01f4z  3b                         .uleb128 0x3b
0000_01f5z  0b                         .uleb128 0xb
0000_01f6z  49                         .uleb128 0x49
0000_01f7z  13                         .uleb128 0x13
0000_01f8z  3c                         .uleb128 0x3c
0000_01f9z  19                         .uleb128 0x19
0000_01faz  01                         .uleb128 0x1
0000_01fbz  13                         .uleb128 0x13
0000_01fcz  00                         .byte   0
0000_01fdz  00                         .byte   0
0000_01fez  22                         .uleb128 0x22
0000_01ffz  0b                         .uleb128 0xb
0000_0200z  01                         .byte   0x1
0000_0201z  11                         .uleb128 0x11
0000_0202z  01                         .uleb128 0x1
0000_0203z  12                         .uleb128 0x12
0000_0204z  06                         .uleb128 0x6
0000_0205z  01                         .uleb128 0x1
0000_0206z  13                         .uleb128 0x13
0000_0207z  00                         .byte   0
0000_0208z  00                         .byte   0
0000_0209z  23                         .uleb128 0x23
0000_020az  0b                         .uleb128 0xb
0000_020bz  01                         .byte   0x1
0000_020cz  55                         .uleb128 0x55
0000_020dz  17                         .uleb128 0x17
0000_020ez  00                         .byte   0
0000_020fz  00                         .byte   0
0000_0210z  24                         .uleb128 0x24
0000_0211z  13                         .uleb128 0x13
0000_0212z  00                         .byte   0
0000_0213z  03                         .uleb128 0x3
0000_0214z  0e                         .uleb128 0xe
0000_0215z  3c                         .uleb128 0x3c
0000_0216z  19                         .uleb128 0x19
0000_0217z  00                         .byte   0
0000_0218z  00                         .byte   0
0000_0219z  25                         .uleb128 0x25
0000_021az  34                         .uleb128 0x34
0000_021bz  00                         .byte   0
0000_021cz  03                         .uleb128 0x3
0000_021dz  0e                         .uleb128 0xe
0000_021ez  3a                         .uleb128 0x3a
0000_021fz  0b                         .uleb128 0xb
0000_0220z  3b                         .uleb128 0x3b
0000_0221z  0b                         .uleb128 0xb
0000_0222z  49                         .uleb128 0x49
0000_0223z  13                         .uleb128 0x13
0000_0224z  3f                         .uleb128 0x3f
0000_0225z  19                         .uleb128 0x19
0000_0226z  02                         .uleb128 0x2
0000_0227z  18                         .uleb128 0x18
0000_0228z  00                         .byte   0
0000_0229z  00                         .byte   0
0000_022az  26                         .uleb128 0x26
0000_022bz  34                         .uleb128 0x34
0000_022cz  00                         .byte   0
0000_022dz  03                         .uleb128 0x3
0000_022ez  0e                         .uleb128 0xe
0000_022fz  3a                         .uleb128 0x3a
0000_0230z  0b                         .uleb128 0xb
0000_0231z  3b                         .uleb128 0x3b
0000_0232z  0b                         .uleb128 0xb
0000_0233z  49                         .uleb128 0x49
0000_0234z  13                         .uleb128 0x13
0000_0235z  3f                         .uleb128 0x3f
0000_0236z  19                         .uleb128 0x19
0000_0237z  3c                         .uleb128 0x3c
0000_0238z  19                         .uleb128 0x19
0000_0239z  00                         .byte   0
0000_023az  00                         .byte   0
0000_023bz  27                         .uleb128 0x27
0000_023cz  21                         .uleb128 0x21
0000_023dz  00                         .byte   0
0000_023ez  00                         .byte   0
0000_023fz  00                         .byte   0
0000_0240z  00                         .byte   0
0000_0000@                             .section    .debug_aranges,"",@progbits
0000_0000@  0000_001c                  .long   0x1c
0000_0004@  0002                       .word   0x2
0000_0006@  0000_0000y                 .long   .Ldebug_info0
0000_000a@  04                         .byte   0x4
0000_000b@  00                         .byte   0
0000_000c@  0000                       .word   0
0000_000e@  0000                       .word   0
0000_0010@  0000_0000'                 .long   .Ltext0
0000_0014@  0000_06fe                  .long   .Letext0-.Ltext0
0000_0018@  0000_0000                  .long   0
0000_001c@  0000_0000                  .long   0
0000_0000+                             .section    .debug_ranges,"",@progbits
0000_0000+                         .Ldebug_ranges0:
0000_0000+  0000_06ca                  .long   .LBB18-.Ltext0
0000_0004+  0000_06e2                  .long   .LBE18-.Ltext0
0000_0008+  0000_06f4                  .long   .LBB19-.Ltext0
0000_000c+  0000_06f6                  .long   .LBE19-.Ltext0
0000_0010+  0000_0000                  .long   0
0000_0014+  0000_0000                  .long   0
0000_0000+                             .section    .debug_line,"",@progbits
0000_0000+                         .Ldebug_line0:
0000_0000+                             .section    .debug_str,"MS",@progbits,1
0000_0000+                         .LASF25:
0000_0000+  6c 69 6d 69 74 00          .string "limit"
0000_0006+                         .LASF16:
0000_0006+  6d 62 75 66 5f 68 64       .string "mbuf_hdr"
            72 00                  
0000_000f+                         .LASF62:
0000_000f+  63 6f 6e 73 6f 6c 65       .string "console_out"
            5f 6f 75 74 00         
0000_001b+                         .LASF31:
0000_001b+  6d 62 5f 72 6f 6f 6d       .string "mb_room"
            00                     
0000_0023+                         .LASF23:
0000_0023+  73 68 6f 72 74 20 69       .string "short int"
            6e 74 00               
0000_002d+                         .LASF24:
0000_002d+  73 69 7a 65 74 79 70       .string "sizetype"
            65 00                  
0000_0036+                         .LASF55:
0000_0036+  70 75 74 63 68 61 72       .string "putchar"
            00                     
0000_003e+                         .LASF61:
0000_003e+  70 61 6e 69 63 73 74       .string "panicstr"
            72 00                  
0000_0047+                         .LASF41:
0000_0047+  6d 62 5f 70 75 74 63       .string "mb_putc"
            00                     
0000_004f+                         .LASF57:
0000_004f+  70 61 6e 69 63 00          .string "panic"
0000_0055+                         .LASF5:
0000_0055+  75 5f 73 68 6f 72 74       .string "u_short"
            00                     
0000_005d+                         .LASF43:
0000_005d+  6d 62 5f 70 75 74 6c       .string "mb_putl"
            00                     
0000_0065+                         .LASF38:
0000_0065+  6d 62 5f 73 6b 69 70       .string "mb_skip"
            00                     
0000_006d+                         .LASF14:
0000_006d+  6d 62 75 66 00             .string "mbuf"
0000_0072+                         .LASF35:
0000_0072+  6d 62 5f 74 6f 70 00       .string "mb_top"
0000_0079+                         .LASF18:
0000_0079+  68 65 61 64 00             .string "head"
0000_007e+                         .LASF11:
0000_007e+  75 6e 69 74 00             .string "unit"
0000_0083+                         .LASF56:
0000_0083+  70 75 74 73 00             .string "puts"
0000_0088+                         .LASF8:
0000_0088+  50 52 4f 43 00             .string "PROC"
0000_008d+                         .LASF28:
0000_008d+  6d 62 5f 67 65 74 5f       .string "mb_get_links"
            6c 69 6e 6b 73 00      
0000_009a+                         .LASF29:
0000_009a+  6d 62 5f 65 6d 70 74       .string "mb_empty"
            79 00                  
0000_00a3+                         .LASF32:
0000_00a3+  6d 62 5f 6c 65 66 74       .string "mb_left"
            00                     
0000_00ab+                         .LASF39:
0000_00ab+  6d 62 5f 74 61 64 76       .string "mb_tadv"
            00                     
0000_00b3+                         .LASF3:
0000_00b3+  75 5f 63 68 61 72 00       .string "u_char"
0000_00ba+                         .LASF59:
0000_00ba+  61 74 78 5f 69 64 6c       .string "atx_idle"
            65 00                  
0000_00c3+                         .LASF54:
0000_00c3+  65 78 65 63 00             .string "exec"
0000_00c8+                         .LASF70:
0000_00c8+  2f 55 73 65 72 73 2f       .string "/Users/kent/Desktop/tfd/toll.src/smn/src.m68k/caos"
            6b 65 6e 74 2f 44 65   
            73 6b 74 6f 70 2f 74 ...
0000_00fb+                         .LASF73:
0000_00fb+  5f 5f 64 69 73 70 6c       .string "__display_current_proc"
            61 79 5f 63 75 72 72   
            65 6e 74 5f 70 72 6f ...
0000_0112+                         .LASF42:
0000_0112+  6d 62 5f 70 75 74 77       .string "mb_putw"
            00                     
0000_011a+                         .LASF47:
0000_011a+  6c 6f 6e 67 20 69 6e       .string "long int"
            74 00                  
0000_0123+                         .LASF33:
0000_0123+  6d 62 5f 68 72 6f 6f       .string "mb_hroom"
            6d 00                  
0000_012c+                         .LASF9:
0000_012c+  66 72 61 6d 65 00          .string "frame"
0000_0132+                         .LASF20:
0000_0132+  6c 69 6e 6b 73 00          .string "links"
0000_0138+                         .LASF68:
0000_0138+  47 4e 55 20 43 31 31       .string "GNU C11 5.4.0 -mcpu=68020 -g"
            20 35 2e 34 2e 30 20   
            2d 6d 63 70 75 3d 36 ...
0000_0155+                         .LASF22:
0000_0155+  71 75 65 75 65 00          .string "queue"
0000_015b+                         .LASF30:
0000_015b+  6d 62 5f 6c 65 6e 00       .string "mb_len"
0000_0162+                         .LASF17:
0000_0162+  74 61 69 6c 00             .string "tail"
0000_0167+                         .LASF4:
0000_0167+  75 6e 73 69 67 6e 65       .string "unsigned char"
            64 20 63 68 61 72 00   
0000_0175+                         .LASF63:
0000_0175+  63 6f 6e 73 6f 6c 65       .string "console_dbug_flags"
            5f 64 62 75 67 5f 66   
            6c 61 67 73 00         
0000_0188+                         .LASF71:
0000_0188+  61 62 6f 72 74 00          .string "abort"
0000_018e+                         .LASF13:
0000_018e+  70 72 6f 63 00             .string "proc"
0000_0193+                         .LASF19:
0000_0193+  74 79 70 65 00             .string "type"
0000_0198+                         .LASF1:
0000_0198+  75 6e 73 69 67 6e 65       .string "unsigned int"
            64 20 69 6e 74 00      
0000_01a5+                         .LASF66:
0000_01a5+  73 79 73 5f 71 75 65       .string "sys_queue_tail"
            75 65 5f 74 61 69 6c   
            00                     
0000_01b4+                         .LASF40:
0000_01b4+  6d 62 5f 66 6c 75 73       .string "mb_flush"
            68 00                  
0000_01bd+                         .LASF58:
0000_01bd+  70 75 74 43 6f 6e 73       .string "putConsoleChar"
            6f 6c 65 43 68 61 72   
            00                     
0000_01cc+                         .LASF48:
0000_01cc+  6d 62 5f 70 75 73 68       .string "mb_pushc"
            63 00                  
0000_01d5+                         .LASF6:
0000_01d5+  73 68 6f 72 74 20 75       .string "short unsigned int"
            6e 73 69 67 6e 65 64   
            20 69 6e 74 00         
0000_01e8+                         .LASF50:
0000_01e8+  6d 62 5f 70 75 73 68       .string "mb_pushl"
            6c 00                  
0000_01f1+                         .LASF7:
0000_01f1+  63 68 61 72 00             .string "char"
0000_01f6+                         .LASF44:
0000_01f6+  6d 62 5f 67 65 74 63       .string "mb_getc"
            00                     
0000_01fe+                         .LASF49:
0000_01fe+  6d 62 5f 70 75 73 68       .string "mb_pushw"
            77 00                  
0000_0207+                         .LASF46:
0000_0207+  6d 62 5f 67 65 74 6c       .string "mb_getl"
            00                     
0000_020f+                         .LASF36:
0000_020f+  6d 62 5f 68 70 74 72       .string "mb_hptr"
            00                     
0000_0217+                         .LASF69:
0000_0217+  70 75 74 63 68 61 72       .string "putchar.c"
            2e 63 00               
0000_0221+                         .LASF15:
0000_0221+  64 61 74 61 00             .string "data"
0000_0226+                         .LASF45:
0000_0226+  6d 62 5f 67 65 74 77       .string "mb_getw"
            00                     
0000_022e+                         .LASF0:
0000_022e+  6c 6f 6e 67 20 75 6e       .string "long unsigned int"
            73 69 67 6e 65 64 20   
            69 6e 74 00            
0000_0240+                         .LASF74:
0000_0240+  63 6c 6f 63 6b 00          .string "clock"
0000_0246+                         .LASF51:
0000_0246+  6d 62 5f 70 6f 70 63       .string "mb_popc"
            00                     
0000_024e+                         .LASF60:
0000_024e+  69 6e 5f 70 61 6e 69       .string "in_panic"
            63 00                  
0000_0257+                         .LASF53:
0000_0257+  6d 62 5f 70 6f 70 6c       .string "mb_popl"
            00                     
0000_025f+                         .LASF37:
0000_025f+  6d 62 5f 74 70 74 72       .string "mb_tptr"
            00                     
0000_0267+                         .LASF65:
0000_0267+  73 79 73 5f 71 75 65       .string "sys_queue_head"
            75 65 5f 68 65 61 64   
            00                     
0000_0276+                         .LASF67:
0000_0276+  73 79 73 5f 71 75 65       .string "sys_queue_table"
            75 65 5f 74 61 62 6c   
            65 00                  
0000_0286+                         .LASF52:
0000_0286+  6d 62 5f 70 6f 70 77       .string "mb_popw"
            00                     
0000_028e+                         .LASF72:
0000_028e+  61 62 6f 72 74 5f 73       .string "abort_supv"
            75 70 76 00            
0000_0299+                         .LASF2:
0000_0299+  75 5f 69 6e 74 00          .string "u_int"
0000_029f+                         .LASF34:
0000_029f+  6d 62 5f 66 72 65 65       .string "mb_free"
            00                     
0000_02a7+                         .LASF26:
0000_02a7+  5f 61 72 67 00             .string "_arg"
0000_02ac+                         .LASF27:
0000_02ac+  6d 62 5f 6c 69 6e 6b       .string "mb_link"
            00                     
0000_02b4+                         .LASF64:
0000_02b4+  75 70 5f 74 69 6d 65       .string "up_time"
            00                     
0000_02bc+                         .LASF12:
0000_02bc+  4d 42 55 46 00             .string "MBUF"
0000_02c1+                         .LASF21:
0000_02c1+  6e 65 78 74 00             .string "next"
0000_02c6+                         .LASF10:
0000_02c6+  64 65 73 63 00             .string "desc"
0000_02cb+                             .ident  "GCC: (GNU) 5.4.0"
0000_0000+                         .section ".comment"
0000_0000+  20 63 6f 6d 6d 65 6e   .ascii " comment "
            74 20                  
0000_02cb+                         .previous
