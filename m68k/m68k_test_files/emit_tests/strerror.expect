

gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
 0: info: [sz: w, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [sys_nerr(index: 3)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] IMMED, DATA [fits: 0]-> [-1,-1] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L2(index: 4)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 6, cp: f, opc = 5] idx: = 6 [opc: 5 cpid: -1 cpu: 0 feat: 0] DIRECT [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = za0@(d0:l,[sys_errlist(index: 5)]:a)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,8] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,8] : result = 2


gen_insn: arg mode = 12 arg = [.L3(index: 6)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 6, cp: f, opc = 5] idx: = 6 [opc: 5 cpid: -1 cpu: 0 feat: 0] DIRECT [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [.LC0(index: 7)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [ebuf.1452(index: 8)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [sprintf(index: 9)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a7@(12)
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #[ebuf.1452(index: 8)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 1][fits: 2]-> [2,2] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [2,2] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 3 : 00111 : size = [2,6] : result = 2



gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
 0: info: [sz: v, is_32b: f, arg_c: 0, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2













gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 11 arg = #0
gen_insn: const args = true
 0: info: [sz: w, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, IMMED [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [strerror(index: 2)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [sys_nerr(index: 3)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,6] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] IMMED, DATA [fits: 0]-> [-1,-1] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] DATA_REG, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] POST_INCR, POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 12 arg = [.L5(index: 11)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 6, cp: f, opc = 5] idx: = 6 [opc: 5 cpid: -1 cpu: 0 feat: 0] DIRECT [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = za0@(d0:l,[sys_errlist(index: 5)]:a)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,8] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,8] : result = 2


gen_insn: arg mode = 12 arg = [.L6(index: 12)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 6, cp: f, opc = 5] idx: = 6 [opc: 5 cpid: -1 cpu: 0 feat: 0] DIRECT [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2



gen_insn: arg mode = 5 arg = a6@(8)
gen_insn: arg mode = 4 arg = a7@-
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [4,4] : result = 2


gen_insn: arg mode = 12 arg = [.LC0(index: 7)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [ebuf.1461(index: 13)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 12 arg = [sprintf(index: 9)]
gen_insn: const args = false
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL [fits: 2]-> [4,6] 
candidates: 1 : 1 : size = [4,6] : result = 2


gen_insn: arg mode = 5 arg = a7@(12)
gen_insn: arg mode = 1 arg = a7
gen_insn: const args = true
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] CONTROL, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #[ebuf.1461(index: 13)]
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = false
 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 1][fits: 2]-> [2,2] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [2,2] 
 3: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 3 : 00111 : size = [2,6] : result = 2



gen_insn: arg mode = 1 arg = a6
gen_insn: const args = true
 0: info: [sz: v, is_32b: f, arg_c: 1, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] ADDR_REG [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: const args = true
 0: info: [sz: v, is_32b: f, arg_c: 0, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2









 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [6,6] : result = 2


 0: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info: [sz: l, is_32b: f, arg_c: 2, index: 0, cp: f, opc = 3] idx: = 0 [opc: 3 cpid: -1 cpu: 0 feat: 0] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 00001 : size = [6,6] : result = 2

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : DW_FILE: [0,0] ffffffff 
fmt : DW_FILE [0,0]: 0: SYM: 1 "strerror.c"

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 254e56 {5a01, 0} 
fmt : M68K_WORD [4,4]: 4e56: a6,#0

raw : M68K_WORD: [4,4] 222e {45, 8} 
fmt : M68K_WORD [4,4]: 222e: a6@(8),d1

raw : M68K_WORD: [6,6] 2039 {c8} [sys_nerr(index: 3)] 
fmt : M68K_WORD [6,6]: 2039: [sys_nerr(index: 3)]:l,d0

raw : M68K_WORD: [2,2] 17b081 {0} 
fmt : M68K_WORD [2,2]: b081: d1,d0

raw : M68K_BRANCH: [2,2] 216300 [.L2(index: 4)] 
fmt : M68K_BRANCH [2,2]: 6300 21 [.L2(index: 4)]

raw : M68K_WORD: [4,4] 202e {45, 8} 
fmt : M68K_WORD [4,4]: 202e: a6@(8),d0

raw : M68K_WORD: [8,8] 2030 {86, 980} [sys_errlist(index: 5)] 
fmt : M68K_WORD [8,8]: 2030: za0@(d0:l,[sys_errlist(index: 5)]:a),d0

raw : M68K_BRANCH: [2,2] 216000 [.L3(index: 6)] 
fmt : M68K_BRANCH [2,2]: 6000 21 [.L3(index: 6)]

raw : LABEL: [0,0] 200020 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c487a {1fcc} [.LC0(index: 7)] 
fmt : M68K_WORD [4,4]: 487a: [.LC0(index: 7)]

raw : M68K_WORD: [6,6] 1c4879 {1fc8} [ebuf.1452(index: 8)] 
fmt : M68K_WORD [6,6]: 4879: [ebuf.1452(index: 8)]:l

raw : M68K_WORD: [6,6] 1c4eb9 {1fc8} [sprintf(index: 9)] 
fmt : M68K_WORD [6,6]: 4eb9: [sprintf(index: 9)]:l

raw : M68K_WORD: [4,4] 194fef {145, c} 
fmt : M68K_WORD [4,4]: 4fef: a7@(c),a7

raw : M68K_LIST: [6,6] 10000 [movel] {3c, d6} [ebuf.1452(index: 8)] 
fmt : M68K_LIST [6,6]: 00001 movel: #[ebuf.1452(index: 8)],d0

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [2,2] 254e5e {1f01} 
fmt : M68K_WORD [2,2]: 4e5e: a6

raw : M68K_WORD: [2,2] 234e75 
fmt : M68K_WORD [2,2]: 4e75

raw : LABEL: [0,0] 420042 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 2 cx[1](0+ca(.text+42)-ca(.text+0)) 
fmt : SIZE [0,0]: cx[1](0+ca(.text+42)-ca(.text+0))

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : STR<1>: [18,18] 6e6b6e55 {6f, 77, 6e, 20, 65, 72, 72, 6f} {72, 3a, 20, 25, 64, 0} 
fmt : STR<1> [18,18]: 85 110 107 110 111 119 110 32 101 114 114 111 114 58 32 37 100 0 

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 254e56 {5a01, 0} 
fmt : M68K_WORD [4,4]: 4e56: a6,#0

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c4eba {1fcc} [strerror(index: 2)] 
fmt : M68K_WORD [4,4]: 4eba: [strerror(index: 2)]

raw : M68K_WORD: [2,2] 1a588f {113} 
fmt : M68K_WORD [2,2]: 588f: #4,a7

raw : M68K_WORD: [4,4] 222e {45, 8} 
fmt : M68K_WORD [4,4]: 222e: a6@(8),d1

raw : M68K_WORD: [6,6] 2039 {c8} [sys_nerr(index: 3)] 
fmt : M68K_WORD [6,6]: 2039: [sys_nerr(index: 3)]:l,d0

raw : M68K_WORD: [2,2] 17b081 {0} 
fmt : M68K_WORD [2,2]: b081: d1,d0

raw : M68K_BRANCH: [2,2] 216300 [.L5(index: b)] 
fmt : M68K_BRANCH [2,2]: 6300 21 [.L5(index: b)]

raw : M68K_WORD: [4,4] 202e {45, 8} 
fmt : M68K_WORD [4,4]: 202e: a6@(8),d0

raw : M68K_WORD: [8,8] 2030 {86, 980} [sys_errlist(index: 5)] 
fmt : M68K_WORD [8,8]: 2030: za0@(d0:l,[sys_errlist(index: 5)]:a),d0

raw : M68K_BRANCH: [2,2] 216000 [.L6(index: c)] 
fmt : M68K_BRANCH [2,2]: 6000 21 [.L6(index: c)]

raw : LABEL: [0,0] 2a002a 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c487a {1fcc} [.LC0(index: 7)] 
fmt : M68K_WORD [4,4]: 487a: [.LC0(index: 7)]

raw : M68K_WORD: [6,6] 1c4879 {1fc8} [ebuf.1461(index: d)] 
fmt : M68K_WORD [6,6]: 4879: [ebuf.1461(index: d)]:l

raw : M68K_WORD: [6,6] 1c4eb9 {1fc8} [sprintf(index: 9)] 
fmt : M68K_WORD [6,6]: 4eb9: [sprintf(index: 9)]:l

raw : M68K_WORD: [4,4] 194fef {145, c} 
fmt : M68K_WORD [4,4]: 4fef: a7@(c),a7

raw : M68K_LIST: [6,6] 10000 [movel] {3c, d6} [ebuf.1461(index: d)] 
fmt : M68K_LIST [6,6]: 00001 movel: #[ebuf.1461(index: 13)],d0

raw : LABEL: [0,0] 480048 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [2,2] 254e5e {1f01} 
fmt : M68K_WORD [2,2]: 4e5e: a6

raw : M68K_WORD: [2,2] 234e75 
fmt : M68K_WORD [2,2]: 4e75

raw : LABEL: [0,0] 4c004c 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] a cx[2](0+ca(.text+a0)-ca(.text+54)) 
fmt : SIZE [0,0]: cx[2](0+ca(.text+a0)-ca(.text+54))

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : COMM: [0,0] 8 
fmt : COMM [0,0]: [ebuf.1452(index: 8)]

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : COMM: [0,0] d 
fmt : COMM [0,0]: [ebuf.1461(index: 13)]

raw : IDENT: [0,0] 0 "GCC: (GNU) 5.4.0" 
fmt : IDENT [0,0]: 

raw : SEG: [0,0] 2 
fmt : SEG [0,0]: 2 .bss:0

raw : LABEL: [20,20] 0 
fmt : LABEL [20,20]: 

raw : LABEL: [20,20] 140014 
fmt : LABEL [20,20]: 

symbols:
   0: "strerror.c"        LF: file = "strerror.c"
   1: strerror            Gf: addr = ca(.text+0) e_size = cx[1](0+ca(.text+42)-ca(.text+0))
   2: sys_nerr            LU: *undef*
   3: .L2                 LL: addr = ca(.text+20)
   4: sys_errlist         LU: *undef*
   5: .L3                 LL: addr = ca(.text+3e)
   6: .LC0                LL: addr = ca(.text+42)
   7: ebuf.1452           LL: addr = ca(.bss+0) f_size = 14 align = 1
   8: sprintf             LU: *undef*
   9: strerror2           Gf: addr = ca(.text+54) e_size = cx[2](0+ca(.text+a0)-ca(.text+54))
  10: .L5                 LL: addr = ca(.text+7e)
  11: .L6                 LL: addr = ca(.text+9c)
  12: ebuf.1461           LL: addr = ca(.bss+14) f_size = 14 align = 1

sections:
   0: .text               :  1        6  0  0                     
   1: .data               :  1        3  0  0                     
   2: .bss                :  8        3  0  0                     

dump: core_segment
   0: : .text               :  0 [160,160] (hex) = a0
   1: : .bss                :  0 [40,40] (hex) = 28

dump: core_fragment
   0: : .text:0             : base = [0,0], size = [66,66], align = 4 (end) = 0x42 (relaxed), next = 1
   1: : .text:0             : base = [66,66], size = [18,18], align = 2 (end) = 0x54 (relaxed), next = 2
   2: : .text:0             : base = [84,84], size = [0,0], align = 4 (end) = 0x54 (relaxed), next = 3
   3: : .text:0             : base = [84,84], size = [76,76], align = 2 (end) = 0xa0 (relaxed)
   4: : .bss:0              : base = [0,0], size = [40,40], align = 4 (end) = 0x28 (relaxed)

dump: dl_data

0000_0000x                             .file   "strerror.c"
0000_0000'                         strerror:
0000_0000'  4e56 0000                  link.w %fp,#0
0000_0004'  222e 0008                  move.l 8(%fp),%d1
0000_0008'  2039 0000_0000*            move.l sys_nerr,%d0
0000_000e'  b081                       cmp.l %d1,%d0
0000_0010'  63 0e                      jls .L2
0000_0012'  202e 0008                  move.l 8(%fp),%d0
0000_0016'  2030 0980 0000_0000*       move.l sys_errlist(%d0.l*4),%d0
0000_001e'  60 1e                      jra .L3
0000_0020'                         .L2:
0000_0020'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_0024'  487a 001c                  pea .LC0
0000_0028'  4879 0000_0000%            pea ebuf.1452
0000_002e'  4eb9 0000_0000*            jsr sprintf
0000_0034'  4fef 000c                  lea (12,%sp),%sp
0000_0038'  203c 0000_0000%            move.l #ebuf.1452,%d0
0000_003e'                         .L3:
0000_003e'  4e5e                       unlk %fp
0000_0040'  4e75                       rts
            = 0000_0042                .size   strerror, .-strerror
0000_0042'                             .align  2
0000_0042'                             .globl  strerror2
0000_0042'                             .type   strerror2, @function
0000_0042'                         .LC0:
0000_0042'  55 6e 6b 6e 6f 77 6e       .string "Unknown error: %d"
            20 65 72 72 6f 72 3a   
            20 25 64 00            
0000_0054'                             .text
0000_0054'                             .align  2
0000_0054'                             .globl  strerror
0000_0054'                             .type   strerror, @function
0000_0054'                         strerror2:
0000_0054'  4e56 0000                  link.w %fp,#0
0000_0058'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_005c'  4eba ffa2                  jsr strerror
0000_0060'  588f                       addq.l #4,%sp
0000_0062'  222e 0008                  move.l 8(%fp),%d1
0000_0066'  2039 0000_0000*            move.l sys_nerr,%d0
0000_006c'  b081                       cmp.l %d1,%d0
0000_006e'  63 0e                      jls .L5
0000_0070'  202e 0008                  move.l 8(%fp),%d0
0000_0074'  2030 0980 0000_0000*       move.l sys_errlist(%d0.l*4),%d0
0000_007c'  60 1e                      jra .L6
0000_007e'                         .L5:
0000_007e'  2f2e 0008                  move.l 8(%fp),-(%sp)
0000_0082'  487a ffbe                  pea .LC0
0000_0086'  4879 0000_0028%            pea ebuf.1461
0000_008c'  4eb9 0000_0000*            jsr sprintf
0000_0092'  4fef 000c                  lea (12,%sp),%sp
0000_0096'  203c 0000_0028%            move.l #ebuf.1461,%d0
0000_009c'                         .L6:
0000_009c'  4e5e                       unlk %fp
0000_009e'  4e75                       rts
            = 0000_004c                .size   strerror2, .-strerror2
0000_00a0'                             .local  ebuf.1452
0000_00a0'                             .comm   ebuf.1452,20,1
0000_00a0'                             .local  ebuf.1461
0000_00a0'                             .comm   ebuf.1461,20,1
0000_00a0'                             .ident  "GCC: (GNU) 5.4.0"
symbols:
   0: "strerror.c"        LF: file = "strerror.c" sym_num = 1
   1: strerror            Gf: addr = ca(.text+0) e_size = CX[1](0+[66,66]) sym_num = 7
   2: sys_nerr            GU: *undef* sym_num = 8
   3: .L2                 LL: addr = ca(.text+20)
   4: sys_errlist         GU: *undef* sym_num = 9
   5: .L3                 LL: addr = ca(.text+3e)
   6: .LC0                LL: addr = ca(.text+42)
   7: ebuf.1452           LL: addr = ca(.bss+0) f_size = 14 align = 1 sym_num = 5
   8: sprintf             GU: *undef* sym_num = a
   9: strerror2           Gf: addr = ca(.text+54) e_size = CX[2](0+[76,76]) sym_num = 11
  10: .L5                 LL: addr = ca(.text+7e)
  11: .L6                 LL: addr = ca(.text+9c)
  12: ebuf.1461           LL: addr = ca(.bss+14) f_size = 14 align = 1 sym_num = 6

sections:
   0: .text               :  1        6  0  0                     
   1: .data               :  1        3  0  0                     
   2: .bss                :  8        3  0  0                     

dump: core_segment
   0: : .text               :  0 [160,160] (hex) = a0
   1: : .bss                :  0 [40,40] (hex) = 28

dump: core_fragment
   0: : .text:0             : base = [0,0], size = [66,66], align = 4 (end) = 0x42 (relaxed), next = 1
   1: : .text:0             : base = [66,66], size = [18,18], align = 2 (end) = 0x54 (relaxed), next = 2
   2: : .text:0             : base = [84,84], size = [0,0], align = 4 (end) = 0x54 (relaxed), next = 3
   3: : .text:0             : base = [84,84], size = [76,76], align = 2 (end) = 0xa0 (relaxed)
   4: : .bss:0              : base = [0,0], size = [40,40], align = 4 (end) = 0x28 (relaxed)

dump: dl_data

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : DW_FILE: [0,0] ffffffff 
fmt : DW_FILE [0,0]: 0: SYM: 1 "strerror.c"

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 254e56 {5a01, 0} 
fmt : M68K_WORD [4,4]: 4e56: a6,#0

raw : M68K_WORD: [4,4] 222e {45, 8} 
fmt : M68K_WORD [4,4]: 222e: a6@(8),d1

raw : M68K_WORD: [6,6] 2039 {c8} [sys_nerr(index: 3)] 
fmt : M68K_WORD [6,6]: 2039: [sys_nerr(index: 3)]:l,d0

raw : M68K_WORD: [2,2] 17b081 {0} 
fmt : M68K_WORD [2,2]: b081: d1,d0

raw : M68K_BRANCH: [2,2] 216300 [.L2(index: 4)] 
fmt : M68K_BRANCH [2,2]: 6300 21 [.L2(index: 4)]

raw : M68K_WORD: [4,4] 202e {45, 8} 
fmt : M68K_WORD [4,4]: 202e: a6@(8),d0

raw : M68K_WORD: [8,8] 2030 {86, 980} [sys_errlist(index: 5)] 
fmt : M68K_WORD [8,8]: 2030: za0@(d0:l,[sys_errlist(index: 5)]:a),d0

raw : M68K_BRANCH: [2,2] 216000 [.L3(index: 6)] 
fmt : M68K_BRANCH [2,2]: 6000 21 [.L3(index: 6)]

raw : LABEL: [0,0] 200020 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c487a {1fcc} [.LC0(index: 7)] 
fmt : M68K_WORD [4,4]: 487a: [.LC0(index: 7)]

raw : M68K_WORD: [6,6] 1c4879 {1fc8} [ebuf.1452(index: 8)] 
fmt : M68K_WORD [6,6]: 4879: [ebuf.1452(index: 8)]:l

raw : M68K_WORD: [6,6] 1c4eb9 {1fc8} [sprintf(index: 9)] 
fmt : M68K_WORD [6,6]: 4eb9: [sprintf(index: 9)]:l

raw : M68K_WORD: [4,4] 194fef {145, c} 
fmt : M68K_WORD [4,4]: 4fef: a7@(c),a7

raw : M68K_LIST: [6,6] 10000 [movel] {3c, d6} [ebuf.1452(index: 8)] 
fmt : M68K_LIST [6,6]: 00001 movel: #[ebuf.1452(index: 8)],d0

raw : LABEL: [0,0] 3e003e 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [2,2] 254e5e {1f01} 
fmt : M68K_WORD [2,2]: 4e5e: a6

raw : M68K_WORD: [2,2] 234e75 
fmt : M68K_WORD [2,2]: 4e75

raw : LABEL: [0,0] 420042 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] 2 CX[1](0+[66,66]) 
fmt : SIZE [0,0]: CX[1](0+[66,66])

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : STR<1>: [18,18] 6e6b6e55 {6f, 77, 6e, 20, 65, 72, 72, 6f} {72, 3a, 20, 25, 64, 0} 
fmt : STR<1> [18,18]: 85 110 107 110 111 119 110 32 101 114 114 111 114 58 32 37 100 0 

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : ALIGN: [0,0] 2 
fmt : ALIGN [0,0]: 2

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : TYPE: [0,0] 0 
fmt : TYPE [0,0]: 

raw : LABEL: [0,0] 0 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 254e56 {5a01, 0} 
fmt : M68K_WORD [4,4]: 4e56: a6,#0

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c4eba {1fcc} [strerror(index: 2)] 
fmt : M68K_WORD [4,4]: 4eba: [strerror(index: 2)]

raw : M68K_WORD: [2,2] 1a588f {113} 
fmt : M68K_WORD [2,2]: 588f: #4,a7

raw : M68K_WORD: [4,4] 222e {45, 8} 
fmt : M68K_WORD [4,4]: 222e: a6@(8),d1

raw : M68K_WORD: [6,6] 2039 {c8} [sys_nerr(index: 3)] 
fmt : M68K_WORD [6,6]: 2039: [sys_nerr(index: 3)]:l,d0

raw : M68K_WORD: [2,2] 17b081 {0} 
fmt : M68K_WORD [2,2]: b081: d1,d0

raw : M68K_BRANCH: [2,2] 216300 [.L5(index: b)] 
fmt : M68K_BRANCH [2,2]: 6300 21 [.L5(index: b)]

raw : M68K_WORD: [4,4] 202e {45, 8} 
fmt : M68K_WORD [4,4]: 202e: a6@(8),d0

raw : M68K_WORD: [8,8] 2030 {86, 980} [sys_errlist(index: 5)] 
fmt : M68K_WORD [8,8]: 2030: za0@(d0:l,[sys_errlist(index: 5)]:a),d0

raw : M68K_BRANCH: [2,2] 216000 [.L6(index: c)] 
fmt : M68K_BRANCH [2,2]: 6000 21 [.L6(index: c)]

raw : LABEL: [0,0] 2a002a 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [4,4] 2f2e {445, 8} 
fmt : M68K_WORD [4,4]: 2f2e: a6@(8),a7@-

raw : M68K_WORD: [4,4] 1c487a {1fcc} [.LC0(index: 7)] 
fmt : M68K_WORD [4,4]: 487a: [.LC0(index: 7)]

raw : M68K_WORD: [6,6] 1c4879 {1fc8} [ebuf.1461(index: d)] 
fmt : M68K_WORD [6,6]: 4879: [ebuf.1461(index: d)]:l

raw : M68K_WORD: [6,6] 1c4eb9 {1fc8} [sprintf(index: 9)] 
fmt : M68K_WORD [6,6]: 4eb9: [sprintf(index: 9)]:l

raw : M68K_WORD: [4,4] 194fef {145, c} 
fmt : M68K_WORD [4,4]: 4fef: a7@(c),a7

raw : M68K_LIST: [6,6] 10000 [movel] {3c, d6} [ebuf.1461(index: d)] 
fmt : M68K_LIST [6,6]: 00001 movel: #[ebuf.1461(index: 13)],d0

raw : LABEL: [0,0] 480048 
fmt : LABEL [0,0]: 

raw : M68K_WORD: [2,2] 254e5e {1f01} 
fmt : M68K_WORD [2,2]: 4e5e: a6

raw : M68K_WORD: [2,2] 234e75 
fmt : M68K_WORD [2,2]: 4e75

raw : LABEL: [0,0] 4c004c 
fmt : LABEL [0,0]: 

raw : SIZE: [0,0] a CX[2](0+[76,76]) 
fmt : SIZE [0,0]: CX[2](0+[76,76])

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : COMM: [0,0] 8 
fmt : COMM [0,0]: [ebuf.1452(index: 8)]

raw : SYM: [0,0] 0 
fmt : SYM [0,0]: 

raw : COMM: [0,0] d 
fmt : COMM [0,0]: [ebuf.1461(index: 13)]

raw : IDENT: [0,0] 0 "GCC: (GNU) 5.4.0" 
fmt : IDENT [0,0]: 

raw : SEG: [0,0] 2 
fmt : SEG [0,0]: 2 .bss:0

raw : LABEL: [20,20] 0 
fmt : LABEL [20,20]: 

raw : LABEL: [20,20] 140014 
fmt : LABEL [20,20]: 

