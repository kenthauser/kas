1. Fix kas_object ref() to require mutable object. 
   Since ref_loc_t::get() returns mutable, must require mutable to create.
  
2. Error to org backwards.

3. Error to skip backwards.

4. Org displays new addr w/o data. Make "skip" do same. 

5. refactor ref_loc_t / kas_object to parser

6. require kas_loc for kas_object. Change `add` methods to take loc as first arg.

7. convert m68k_arg to tagged with "is_missing" method.

8. x3/string/tst.hpp: allocs a node for a pointer type.
     XXX need data_t in x3/string/detail/tst.hpp


*********************************


Generic TGT types:

1. stmt

2. insn

3. "ARG" class requirements (empty, validate*, size*, ok_for_target)

4. fmt_*: templated with ARG_CNT & opc_*

5. reg_definitions (?). Include "ALIAS" inserter (?)

6. `opc_list`, `opc_resolved` (?)

7. insn_serialize

*********************************

*1. Why is opcode::trace not picked up in tgt_stmt::gen_insn

*2. z80:bit number serialized as immed data 

*3. local labels untagged

*4. Z80:ld (blkcnt),a -> chunk reader error.

*5. Z80: ex de,hl -> serialized incorrectly

*6. Z80: no args decoded {** INVALID **}

*7. Z80: ld hl,(blockfree) -> best not selected.

*8. Z80: ld hl,(blockfree) -> chunk reader error

*9. Z80: ld (blockfree),hl -> chunk reader error

*10. Z80: handle negative immed values (8-bit math, ix/iy offset)

*11. Z80:ld e,(hl) -> not matched

12. tgt process args: convert to begin/end. Thus vector & array are identical.
        also eliminates need to clear "de-serialize" arg vector.

*13. DATA_LEN = BLOCK_LEN - 2;  -> Needs to be evaluated as constant, not expression.

***********************************

1. M68k. refactor `m68k_size_defn` to make suitable for `target`

*2. Add `INFO` to code

*3. Complete `serialize` methods

*4. Implement default `emit`. Implement `arg` emit

5. Throw at end of adder if no `list`

6. mcode OPCODE size type calculated

7. refactor INFO to target. 

8. refactor CC to be in common: cc<cc_names, defn<{defn args...}> >

9. back-port Z80


************************************

ARM Notes:

1. implement STMT flags wrt ccode, sflag

2. implement relocation flags in TGT_EMIT

3. add ALU insns

4. add A32 insns

5. add T16 & T32 insns

6. add A64 insns

7. backport TGT mods.


****************************************

M68K Notes (m68k.input)

*1. move.l a4@-,a1@(123): DST mode not inserted (correct: 2364 007b)
 
*2. move.b #.-m_second, d4: offset incorrect

*3. move.l #m_last-m_first, d3: base value incorrectly calculated 

*4. ARM relocation name generated.

*5. "extract" is for sz, not info.

*6. stmt::print_info method, needs to be ostream support.

7. `chk:` label fails. Mimics insn name

8. fix m68k_branch arg-mode discrimination

*9. rename fmt::emit -> fmt::emit_reloc

10. remove recently added `dot_p` to insert/emit_reloc. Any code executed
    after "assembly complete" shouldn't call `fits`

11. `ident` doesn't work

*12. move with `direct:long arg` dest emits mode 7.0 (direct:short) with 4-byte arg

*13. move.l short, long: src = (symbol value .text+2), dst = globl: src mode: 7.2 (correct)
    but w/o displacement. dst_mode = 7.0 (correct is 7.1). 32-bit displacement generated
    Emits `emit: expected` error

*14. move with source pc@ generates: invalid indirect

*15. move with source pc@(d1, 123) generates : invalid addr_mode

*16. move.b #-100, d6 generates "ff9c" as arg. correct is "009c"

#17. refactor "extension" for relocations & to remove `fits` from emit.

*18. `list` needs to restore `args` before next ?

19. parse_support picks up wrong `pc`

*20. a2@(inner) & a2@(outer) both generate `symbol` reloc even `inner` is local & `outer` extern

*21. "size" still called after "assembly done". 

*22. move.l #123, a4 --> `lea`

*23. tab expansion in error message "~~~~ <<- Here" incorrect. Source tab expansion correct.

24. immed byte arg not masked to 8 bits. Modify `set_size` to
    `set_size(emit_bytes, data_size, offset)` & make `reloc` honor both base::offset & base::size. 

*25. Refactor `tgt_format` base class to be virtual. Instantiate virtual class in virtual base class. 
    override base-class members with virtual base class members.

*26. refactor `val_range` into tgt. Add <size_t> ctors

*27. refactor `validate` to take info instead of sz. refactor `tgt::arg.size() to take info.
    define `info` as separate type. include `sz` method.
    
28. move.l a2@(short), d2: shoud this be evaled as move.l pc(a2, short-(pc+2)), d2.

29. `opc::calc_size` must use & return `data.size`. why?

*30. core_fits(disp) doesn't handle fuzz correctly. fits<byte>([10, 22]) with fuzz of 109 should not be maybe.

31. frags marked `relaxed` when they're not.

32. `ref_loc_t` instances are 64 bits. need to reduce to 32 bits. probably by storing "referenced" type in
    loc map & using single 32-bit index to retrieve both.

*33. `quick` now just `fixed`. Need to generalize.

*34. refactor `tgt_data_inserter_t` to accept `chunk_type` (for chunk) & `data_type` (for arg).
    Default `data_type` to `expression::e_fixed_t`

*35. enforce `tgt_data_inserter_t`, `tgt_data_reader_t` takes size/data upto `data_type`

36. still problem with int64_t being converted to expr. Fix tgt_data_inserter unsigned short, int>

*37. refactor `ref_loc_t` to take template, not type.

38. refactor `tgt_reg` & `tgt_regset` to take template, not type.

*39. Erroring wrong insn: `expected = 0x4, actual = 0xfff...fff04`. Probably `cross-frag` reporting error

40. Emit `warnings` in output file.

41. Don't generate `warnings` in `emit`. Object should be fixed.

*42. Need to declare "rounding" modes to `flt.get_bin_parts`. Implement ROUND, TRUNC. Acutally `bool trunc` will probably suffice

43. Handle +/- INF, +/- NAN in `ieee::fixed`. Test for overflow where warning generated.

********************

Plan 10/2: First fix floating point emit/warning/etc

*1. Handle +/- INF, +/- NAN as floating point.

2. Error when float->fixed overflows, is NAN, or INF

3. Warn when float->fixed doesn't overflow

*4. Make template and value_t are configurable in template

*5. Rename template: float_host_t -> float_host

*6. Implement 16-bit float format

*7. Refactor out `float` impl.

8. if e_float_t deleted: variant won't compile

9. expr_t: get_p<e_float_t> & get_p<typename e_float_t::object_t> should return different values

*10. parser variant: fix configuration via header files

11. python `configure` script

12. make `err_msg` derived form multiple base types

*************************

*1. Fix copy-ctor assignment ctor in core_expr (fixed by deleting)

*2. refactor "junk" parsing in `parser/parser_def.h`. Use expectation failure to 
    parse "junk following statement" and "invalid statement". Refactor `kas_parser`
    (in parser_obj.h) to expose ast & parser. Refactor "resync_base" to use hooks &
    perform "accept", "retry", etc

*3. make "listing" emit "diagnostics" not otherwise generated

*4. allow blank lines

*5. error expressions emit as "xx" with diagnostic

*6. unsupported relocations emit as errors

*7. back-end object relocation absorbs "addend" if rela

*8. tokens store pointers to objects

*9. first core expression is index [2]

*10. `RELOC:` message shows `rela` value for `rel` relocation

*11. addr format not same for `addr` & `RELOC`

*12. missing not flagged 

*13. `.long e` has relocation address `0000_0000X`, not `*`

*14. end listing with symbol table (just use dump)

*15. refactor `opc_*` to accept `token` not `expr`

*16. `diag` not setting token `position`

*17. last line (.long...) not in listing??

*18. print diagnostics before relocations

*19. make 'empty' errors print ^ not ~~~

*20. make `where` print escaped & quoted

21. kas_token(expr const&) constructor not implemented

22. core_expr copy assignment ctor declared, but not implemented

*23. tgt_data_inserter skip/reserve not complete, implemented

24. default `mcode_t::sz` implementation needed

25. symbol expressions not allowed (error on `_`)

26. tgt_stmt::validate_args doesn't error on "diag" args

27. label parsing sub-optimal. Don't know why so many "rules" are required.

*28. 1: jr 1b -> deleted: need some "seen this pass" magic

*29. listing address & "equ" size

*30. "common size of zero" error message not location tagged

*31. EQU symbols recorded as STB_TOKENS

*32. only `rela` relocations should list addend

*33. `.lcomm` symbols should show bss address

*34. fix `get_p` & expr() mess in `kas_token` --> push

35. ld a,#DATALEN -> Z80_Gen: DATALEN not evaluated as constant

*36. emitting an error value (ie divide-by-zero) uses loc from evaluation, not arg.
    should probably just emit as `xxxx` w/o message

*37. error as regset(offset) value is treated as zero

*38. invalid equ's should display "=xxxx", not address

*39. create a.out object

40. add character constants (including eg 'ab') to c_int_parser

41. add symbol binding: name is "local". not emitted unless all labels emitted.
     sort of Internal lite

*42. branch is always long

43. expr_fits need "relocation" info (ie: can expr be emitted)

*44. m68k_opc_branch routines are suitable for base code. Need to update
    emit to handle relocations & use arg.emit()

*45. the `do_calc_size` routine in m68k_opc_branch should be referenced in
    `val_branch` routine, which needs to be made generic `tgt_validate` routine.

46. Need to add `get_relocs` & `get_dot` to `core_fits`

*47. check logic in core_expr_dot.h:seen_this_pass

*48. First jump: first relax: initial_size = [2,2], from insn size of [0, 6]

49. Get bsd FLOAT working as `.long`, etc

50. a6@(d5:8:l) -> error parsing. Validate both ignore_junk & !ignore_junk. Both
    seem questionable.

51. add support for MODE_PC_DISP_LONG

52. add arg method for "serialized_data_size". Remove `tgt_validate::has_extension` 
    which adds similar info, but ad-hoc.

53. Add parse errors for m68k:reg/size/scale subparsers, instead of just generic junk.

54. ? should move.l a2@(short), d2 -> move.l pc@(a2, short), d2

55. refactor make_reg_seq as `tgt_reg_seq <STR, RC, N, tst=void, base=0>`

56. make register list list-of-list (ala insn). Currently list<list<>, ...> doesn't compile

*57. Too many `mac` instructions. Validate `mcode` before adding to insn list

58. Need way to pass `cpu_defns` to reg_parser, and others. Can't have static race.

59. Harmonize `mcode_idx_t` & `defn_idx_t`: there is a one-to-one relationship. 1 type.

60. core_expr & tgt_regset need to use temporary objects as intermediates. Only assign
    kas_object instance when converted to `expr_t`

61. disallow tgt_reg_t MODE w/o token

62. reg_find returns hw_defn fail register over hw_defn pass register

63. Z80: revisit need for "z80_stmt_impl.h". Can be merged into CRTP?

64. Z80: rst isns incorrect

65. Z80: floating point non-support doesn't link

66. make `hw_defs`  a subclass of actual class to prevent excessive type name

67. assembling cf_frame screws up insn_container

*68. `chkw`, `jne` not parsing correctly w/o "."

69. Add token_init_list (types) member type for `token_defn_t` data_p init.

*70. FP args allowed on non-fp insns

71. allow float_value to be `void` to disable floating point

72. find home for tok_missing. Should not be in `terminals`

*73. convert comment/separator type to KAS_STRING

*74. define bsd_precedence as example

75. M68k: zpc@(x) -> should map to direct short

76. refactor ref_loc_t to unquote template.

77. clean up & harmonize parse error processing: currently in parser_def.h::insn_junk,
    parser_obj.h:operator*(), and error_handler_base.h. Handle `junk` characters,
    trailing `junk` and exception errors. Populate execption `map` from individual parsers.







