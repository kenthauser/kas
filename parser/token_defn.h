#ifndef KAS_PARSER_TOKEN_DEFN_H
#define KAS_PARSER_TOKEN_DEFN_H

//#include "kas_token.h"
#include "kas/kas_string.h"     // for "NAMES" of tokens

namespace kas::parser
{

// `token_defn` is an abstract base class used to specialize `kas_token` instances
// to convert the parsed "integer" & "raw" types as required.
//
// `token_defn` has no instance data & is essentially a way to access a "VTABLE".
// Since `token_defn` instances & derived instances are generally created as rvalues
// (ie not permanently allocated), the instance value can't be stored for future refernce.
// Accordingly, the virtual method `get` is defined which returns a reference to a 
// statically created instance of derived type.

struct token_defn_base
{
    // get reference to static instance of derived type
    virtual token_defn_base const& get() const = 0;

    // get token name
    virtual const char *name() const = 0;
    
    // calculate "expr" from token's "raw" and/or "expr" values
    // default: don't modify `kas_token` expr value
    virtual void gen_expr(expr_t& e, kas_token const&) const {};
    
    // test if token is particular type
    token_defn_base const *is_token_type(std::type_info const& info) const
    {
        // NB: warning generated by `typeid(get())`
        auto&& t = get();
        return info == typeid(t) ? this : nullptr;
    }
};

// XXX new comment
// `token_defn_t` is currently a "final" type (eg: `get` method *must* be overridden)
// could be better if it was a CRTP base.
// NB: currently `gen_expr` overrides take place in `kas::parser` namespace. 
// Deriving from `token_defn_t` required redefining `get()` method: likely error.

// declared in `parser_types.h`
template <typename NAME, typename VALUE_T = x3::unused_type, typename PARSER = void>
struct token_defn_t : token_defn_base
{
    using base_t   = token_defn_base;
    using name_t   = NAME;
    using value_t  = VALUE_T;       // NB: default if `unused_type`
    using parser_t = PARSER;

    // true iff can generate `parser` from `token_defn_t`
    using has_parser = meta::bool_<!std::is_void_v<VALUE_T> && !std::is_void_v<PARSER>>;

    base_t const& get() const override
    {
        // NB: `NAME` is not "literal type" per clang, thus not constexpr
        static const token_defn_t defn;
        return defn;
    }

    const char *name() const override
    {
        return NAME();
    }
    
    // specialize template out-of-line to supply non-default method
    // alternatively: derive subclass & "override"
    // NB: subclass normally needs to "override" `get` as well.
    void gen_expr(expr_t& e, kas_token const& pos) const override {}
};

#if 0
// XXX eventually separate into different header

// create an actual parser. We need context to complete location tagging
// cribbed from x3::raw_directive
template <typename TOK_DEFN, typename Subject>
struct X_kas_token_parser : x3::unary_parser<Subject, X_kas_token_parser<TOK_DEFN, Subject>>
{
    using base_type = x3::unary_parser<Subject, X_kas_token_parser<TOK_DEFN, Subject>>;
    using attribute_type = kas_token;

    X_kas_token_parser(Subject const& subject)
        : base_type(subject) {}

    template <typename Iterator, typename Context
                , typename RContext, typename Attribute>
    bool parse(Iterator& first, Iterator const& last
                , Context const& context, RContext const& rcontext, Attribute& attr) const
    {
        using raw_string = std::basic_string<typename Iterator::value_type>;
        using s_attr = typename x3::traits::attribute_of<Subject, Context>::type;
        using subject_attribute_type = std::conditional_t<
                        std::is_same_v<raw_string, s_attr>, x3::unused_type, s_attr>;

        subject_attribute_type value;
        x3::skip_over(first, last, context);
        Iterator i = first;

        // remove skipper (implicit lexeme)
        auto const& skipper = x3::get<x3::skipper_tag>(context);

        using unused_skipper_type = 
                    x3::unused_skipper<typename std::remove_reference_t<decltype(skipper)>>;
        unused_skipper_type unused_skipper(skipper);

        if (this->subject.parse(
                  i, last
                , x3::make_context<x3::skipper_tag>(unused_skipper, context)
                , rcontext, value))
        {
            auto& handler = x3::get<parser::error_handler_tag>(context).get();

            // create "token" of `TOK_DEFN` type with parsed location
            
            // store parsed value in token (except for strings)
            expr_t e;
            if constexpr (!std::is_same_v<decltype(value), x3::unused_type>)
                e = value;
                
            attribute_type token(TOK_DEFN(), e, {first, i, &handler});
#if 0
            print_type_name("token_parser::token_type").name<TOK>(std::cout); 
            //print_type_name("token_parser::subject::s_attr")
            //        .name<s_attr>(std::cout);
            
            //print_type_name("token_parser::subject_type").name<subject_attribute_type>(std::cout); 
            print_type_name("token_parser::attribute ").name<Attribute>(std::cout);
            std::cout << "token_parser: matched: " << std::string(first, i);
            std::cout << std::endl;
#endif            
            
            // consume parsed characters
            first = i;          // update first to just past parsed token

            // save token as parsed value
            x3::traits::move_to(token, attr);
            return true;
        }
        return false;
    }           
};
template <typename TOK
        , typename = std::enable_if_t<std::is_base_of_v<token_defn_base, TOK>>>
struct X_kas_token_x3
{
    template <typename Subject>
    X_kas_token_parser<TOK, typename x3::extension::as_parser<Subject>::value_type>
    operator[](Subject const& subject) const
    {
        return { as_parser(subject) };
    }

    // XXX need to return default if [] not used

};

template <typename T> static const X_kas_token_x3<T> X_token = {};
// XXXXXXXXXXX

#endif
}

#endif
