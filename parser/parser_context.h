#ifndef PARSER_PARSER_CONTEXT_H
#define PARSER_PARSER_CONTEXT_H

#include "parser_types.h"
#include <boost/spirit/home/x3/support/context.hpp>

namespace kas::parser
{
namespace x3 = boost::spirit::x3;

// tag used to get find location to store diag generated by error handler
struct error_diag_tag;

// forward declare parser (stored in context)
namespace detail
{
    struct kas_parser;
}

using error_diag_type = detail::kas_parser;

// The Phrase Parse Context
using skipper_context_type = x3::phrase_parse_context<skipper_t>::type;

// Combined Diag & Phrase Parse Context
using diag_context_type   = x3::context<
                                  error_diag_tag
                                , error_diag_type
                                , skipper_context_type
                                >;

// Combined Error Handler and Diag Context
using error_context_type    = x3::context<
                                  error_handler_tag
                                , error_handler_type
                                , diag_context_type
                                >;

using kas_context_type  = error_context_type;
using stmt_context_type = error_context_type;

// Combined Error Handler and Phrase Parse Context
using expr_context_type = stmt_context_type;

struct kas_context
{
private:
    static skipper_context_type& ctx_skipper()
    {
        static auto const skipper = x3::as_parser(skipper_t{});
        static auto       ctx     = x3::make_context<x3::skipper_tag>(skipper);
        return ctx;
    }

public:
    kas_context(error_diag_type& diag, error_handler_type& ehandler)
        : diag(diag), ehandler(ehandler) {}

    template <typename CTX>
    kas_context(CTX& ctx)
        : diag    (x3::get<error_diag_tag>(ctx))
        , ehandler(x3::get<error_handler_tag>(ctx))
        {}

    auto& operator()() const
    {
        return context;
    }

private:
    // NB: data members are initialized in declaration order
    error_diag_type&    diag;
    error_handler_type& ehandler;

    diag_context_type   ctx_diag    { x3::make_context<error_diag_tag>(diag
                                        , ctx_skipper()) };
    error_context_type  context     { x3::make_context<error_handler_tag>(ehandler
                                        , ctx_diag) };
};
}

#endif
