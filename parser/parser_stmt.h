#ifndef KAS_PARSER_INSN_H
#define KAS_PARSER_INSN_H

#include "expr/expr.h"
#include "kas_core/opcode.h"
#include "literal_parser.h"
#include "stmt_print.h"

#include <functional>

/*
 * Declare the statements used by the parser itself.
 *
 * These are the
 *
 * 1) "empty" stmt: `x3` requires stmt expose default type
 * 2) "eoi"   stmt: generated at end-of-input
 *
 * Also support the `print` module.
 * Provide indirection to `print_stmt` as required`
 */


namespace kas::parser
{
namespace detail {
    using namespace meta;
    using boost::mpl::string;

    // vector of types in variant
    template <typename tag = void> struct parser_type_l : list<> {};

    // vector of rules for statments 
    template <typename tag = void> struct parser_stmt_l : list<> {};

    // vector of rules for label
    template <typename tag = void> struct parser_label_l : list<> {};

    // declare empty strings for comment and stmt seperator default
    template <typename = void> struct stmt_separator_str : string<> {};
    template <typename = void> struct stmt_comment_str   : string<> {};

    // declare default "Parsers" for comment & stmt seperator
    // NB can't default "type", because that would instantiate
    // stmt_*_str templates
    template <typename INSN_SEPARATOR, typename = void>
    struct stmt_separator_p : literal_parser<INSN_SEPARATOR> {};

    template <typename INSN_COMMENT,   typename = void>
    struct stmt_comment_p   : literal_parser<INSN_COMMENT>   {};
}

using namespace ::kas::core::opc;

namespace print {
    template <typename OS, typename...Ts>
    void print_stmt(OS&, Ts&&...);
}


using print_obj = print::stmt_print<std::ostream>;
struct parser_stmt : kas_position_tagged
{
    using base_t = parser_stmt;
    using print_obj = print::stmt_print<std::ostream>;
    using opcode = core::opcode;

    // this type has no local members to initialize
    parser_stmt() = default;
    
    virtual const char *name() const = 0;
    virtual void  print_args(print_obj const&) const = 0;
    virtual opcode *gen_insn(opcode::data_t&) = 0;
    virtual ~parser_stmt() = default;

    // interface to insn: call operator() generates insn
    template <typename...Ts>
    opcode& operator()(Ts&&...);

    // interface to insn: ostream& operator<< prints
    template <typename OS>
    friend OS& operator<<(OS& os, parser_stmt const&);
};

////////////////////////////////////////////////////////////////////////
//
// statments generated by parser
//
////////////////////////////////////////////////////////////////////////

namespace detail
{
    template <typename OPC>
    struct stmt_diag : parser_stmt
    {
        static inline OPC opc;

        stmt_diag(kas_error_t diag = {}) : diag(diag) {}

        const char *name() const override
        {
            return opc.name();
        }

        void print_args(print_obj const& p_obj) const override
        {
            if (diag)
                p_obj(std::make_tuple(diag));
        }

        opcode *gen_insn(insn_data& data) override
        {
            // fixed area unused otherwise...
            data.fixed.diag = diag;
            return &opc;
        }
        
        kas_error_t diag;
    };
}

using stmt_empty = detail::stmt_diag<opc_nop<>>;
using stmt_eoi   = detail::stmt_diag<opc_nop<KAS_STRING("EOI")>>;
using stmt_error = detail::stmt_diag<opc_error>;


namespace detail
{
    // stmts defined by parser
    template<> struct parser_type_l<defn_parser> : list<
          stmt_empty        // default value for variant
        , stmt_error
        > {};

    // don't allow label_l to be empty
    template<> struct parser_label_l<defn_parser> : list<
          stmt_eoi
        > {};
}

}


#endif
