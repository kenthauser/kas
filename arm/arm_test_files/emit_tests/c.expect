















raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<2>: [4,4] 30002 
fmt : INT<2> [4,4]: 2 3 

raw : INT<4>: [12,12] 4 {5, f423f} 
fmt : INT<4> [12,12]: 4 5 999999 

raw : INT<8>: [32,32] 0 7 8 9 a 
fmt : INT<8> [32,32]: 7 8 9 10 

raw : STR<0>: [6,6] 6c656807 {6c, 6f} 
fmt : STR<0> [6,6]: 7 104 101 108 108 111 

raw : STR<1>: [15,15] 206f7420 {74, 68, 65, 20, 77, 6f, 72, 6c} {64, a, 0} 
fmt : STR<1> [15,15]: 32 116 111 32 116 104 101 32 119 111 114 108 100 10 0 

raw : INT<1>: [6,6] 0 Error: Invalid argument {9c, 0, 64, c8} Error: Invalid argument 
fmt : INT<1> [6,6]: Error: Invalid argument 156 0 100 200 Error: Invalid argument 

raw : INT<2>: [8,8] 10002 Error: Divide by zero kas::core::arg_missing const& {4} 
fmt : INT<2> [8,8]: 2 Error: Divide by zero kas::core::arg_missing const& 4 

raw : LABEL: [0,0] 540054 
fmt : LABEL [0,0]: 

raw : INT<2>: [8,8] 10002 [e(index: 1)] [f(index: 2)] cx[1](0+ca(.text+54)-[ident 1:f]) 
fmt : INT<2> [8,8]: 2 [e(index: 1)] [f(index: 2)] cx[1](0+ca(.text+54)-[ident 1:f]) 

raw : INT<1>: [1,1] 0 Error: Divide by zero 
fmt : INT<1> [1,1]: Error: Divide by zero 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<4>: [4,4] 0 [e(index: 1)] 
fmt : INT<4> [4,4]: [e(index: 1)] 

raw : INT<4>: [4,4] 0 cx[2](0+[ident 1:f]-ca(.text+54)) 
fmt : INT<4> [4,4]: cx[2](0+[ident 1:f]-ca(.text+54)) 

raw : LABEL: [0,0] 660066 
fmt : LABEL [0,0]: 

raw : INT<4>: [16,16] 3 [e(index: 1)] [f(index: 2)] cx[3](0+ca(.text+66)-ca(.text+54)) 
fmt : INT<4> [16,16]: 3 [e(index: 1)] [f(index: 2)] cx[3](0+ca(.text+66)-ca(.text+54)) 

symbols:
   0: e                   LL: addr = ca(.text+54)
   1: f                   LL: addr = ca(.text+66)

sections:
   0: .text               :  1        6  0  0                     
   1: .data               :  1        3  0  0                     
   2: .bss                :  8        3  0  0                     

dump: core_segment
   0: : .text               :  0 [118,118] (hex) = 76
   1: : .bss                :  0 [0,0] (hex) = 0

dump: core_fragment
   0: : .text:0             : base = [0,0], size = [118,118], align = 4 (end) = 0x76 (relaxed)

dump: dl_data

0000_0000'  01                         .byte   1
0000_0001'  0002 0003                  .word   2, 3
0000_0005'  0000_0004 0000_0005        .long   4, 5, 999999
            000f_423f              
0000_0011'  0000_0000_0000_0007        .quad   7, 8, 9, 10
            0000_0000_0000_0008    
            0000_0000_0000_0009 ...
0000_0031'  07 68 65 6c 6c 6f          .ascii  "\ahello"
0000_0037'  20 74 6f 20 74 68 65       .asciz  " to the world\n"
            20 77 6f 72 6c 64 0a   
            00                     
                                   ;
0000_0046'  xx  9c 00 64 c8 xx         .byte  -200, -100, 0, 100, 200, 300
                                              ~~~~ <<-- Here
dummy_path:8:Error: Invalid argument
                                                                       ~~~ <<-- Here
dummy_path:8:Error: Invalid argument
                                   
0000_004c'  0002 xxxx                  .word   2,3/0, ,4
            2[kas::core::arg_missing const&]
            0000 0004              
                                                  ~~ <<-- Here
dummy_path:10:Error: Divide by zero
0000_0054'                         e:
0000_0054'  0002 00a8' 00cc' ffee      .word   2, e, f, e - f
                                       ; XXX must refactor core_expr to get loc
                                       ;.byte   e - f + 300
0000_005c'  xx                         .byte   3/(3-3)
                                                ~~~~~~ <<-- Here
dummy_path:15:Error: Divide by zero
0000_005d'  01                         .byte   1
0000_005e'  0000_00a8'                 .long   e
0000_0062'  0000_0012                  .long   f - e
0000_0066'                         f:
0000_0066'  0000_0003 0000_00a8'       .long   3, e, f, f - e
            0000_00cc' 0000_0012   
symbols:
   0: e                   LL: addr = ca(.text+54) sym_num = 4
   1: f                   LL: addr = ca(.text+66) sym_num = 5

sections:
   0: .text               :  1        6  0  0                     
   1: .data               :  1        3  0  0                     
   2: .bss                :  8        3  0  0                     

dump: core_segment
   0: : .text               :  0 [118,118] (hex) = 76
   1: : .bss                :  0 [0,0] (hex) = 0

dump: core_fragment
   0: : .text:0             : base = [0,0], size = [118,118], align = 4 (end) = 0x76 (relaxed)

dump: dl_data

raw : SEG: [0,0] 1 
fmt : SEG [0,0]: 1 .text:0

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<2>: [4,4] 30002 
fmt : INT<2> [4,4]: 2 3 

raw : INT<4>: [12,12] 4 {5, f423f} 
fmt : INT<4> [12,12]: 4 5 999999 

raw : INT<8>: [32,32] 0 7 8 9 a 
fmt : INT<8> [32,32]: 7 8 9 10 

raw : STR<0>: [6,6] 6c656807 {6c, 6f} 
fmt : STR<0> [6,6]: 7 104 101 108 108 111 

raw : STR<1>: [15,15] 206f7420 {74, 68, 65, 20, 77, 6f, 72, 6c} {64, a, 0} 
fmt : STR<1> [15,15]: 32 116 111 32 116 104 101 32 119 111 114 108 100 10 0 

raw : INT<1>: [6,6] 0 Error: Invalid argument {9c, 0, 64, c8} Error: Invalid argument 
fmt : INT<1> [6,6]: Error: Invalid argument 156 0 100 200 Error: Invalid argument 

raw : INT<2>: [8,8] 10002 Error: Divide by zero kas::core::arg_missing const& {4} 
fmt : INT<2> [8,8]: 2 Error: Divide by zero kas::core::arg_missing const& 4 

raw : LABEL: [0,0] 540054 
fmt : LABEL [0,0]: 

raw : INT<2>: [8,8] 10002 [e(index: 1)] [f(index: 2)] CX[1](0+[-18,-18]) 
fmt : INT<2> [8,8]: 2 [e(index: 1)] [f(index: 2)] CX[1](0+[-18,-18]) 

raw : INT<1>: [1,1] 0 Error: Divide by zero 
fmt : INT<1> [1,1]: Error: Divide by zero 

raw : INT<1>: [1,1] 1000001 
fmt : INT<1> [1,1]: 1 

raw : INT<4>: [4,4] 0 [e(index: 1)] 
fmt : INT<4> [4,4]: [e(index: 1)] 

raw : INT<4>: [4,4] 0 CX[2](0+[18,18]) 
fmt : INT<4> [4,4]: CX[2](0+[18,18]) 

raw : LABEL: [0,0] 660066 
fmt : LABEL [0,0]: 

raw : INT<4>: [16,16] 3 [e(index: 1)] [f(index: 2)] CX[3](0+[18,18]) 
fmt : INT<4> [16,16]: 3 [e(index: 1)] [f(index: 2)] CX[3](0+[18,18]) 

