/*
 * Copyright (c) 1992 Twenty-First Designs, Inc.
 * Unpublished work. All rights reserved.  
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF 
 * TWENTY-FIRST DESIGNS, INC.
 *
 * This software source code contains trade secrets and other
 * proprietary information of Twenty-First Designs, Inc. All
 * disclosure or use of this source code is strictly restricted
 * by contract to that required for operation and maintenance 
 * of equipment provided by Twenty-First Designs, Inc.
 * All other disclosure or use of this source code is prohibited.
 *
 ***********************************************************
 *
 * $Id: sched.z80,v 1.1.1.1 2000/10/18 04:29:56 kent Exp $
 *
 ***********************************************************
 *
 * RTC Scheduler
 *
 * Allow events to be scheduled in the future. Requires that
 * an `sched_tbl' be defined as a unused external page of memory.
 *
 * function:  sched
 * arguments:	HL = fn
 *		IY = iy_area
 *		 A = counts
 *
 * returns:	HL = cancel pointer
 *	
 *	where `counts' is count of 100 msec increments to
 *	to wait.
 *
 * function:  cancel
 * arguments:	HL = cancel pointer
 *	
 *	cancels an event previously scheduled.
 *
 * function:  sched_init
 *
 * attaches the `sched' interrupt handler to system
 * callout table.
 *
 ***********************************************************
 */


	.globl	sched_init, sched, cancel

sched_events	=	64
sched_len	=	64 * 4		; cant exceed one page
SCHED_PSCALE	=	100 / 25

	.lcomm	sched_save, 2
	.lcomm	sched_pscale, 1

sched_init:
; check the alignment of the sched_tbl & install interrupt handler
	ld	hl,#sched_tbl
	ld	(sched_save),hl
	ld	a,l
	or	a
	call	nz,bad_error
	ld	de,#sched_len		; table length
	call	bzero			; clear table
	ld	hl,#sched_pscale
	ld	(hl),#SCHED_PSCALE
	ld	hl,#sched_int
	jp	rtc_install		; put in system callout table

sched:
; put routine in SCHED table for later call
; arguments:	A  = time, HL = fn, IY = argument (pointer)
; returns:	HL = pointer used for cancl
; first make sure that 'sched' is running
	ex	de,hl
	ld	hl,(sched_save)
	bit	7,h			; should be RAM (not inited)
	call	z,bad_error		; error if not running
	inc	a			; round up count
	add	a			; mult by 4
	add	a
	add	a,l
	and	#sched_len - 1		; for wrapping
	ld	l,a
	push	bc
	ld	b,#sched_events
	push	iy			; prepare for storage

; Note: successful loop requires 92 T-cycles with interrupts disabled
1$:	xor	a			; get a zero
	inc	l			; point to FN MSB (page)
	di				; avoid contention each time
	or	(hl)			; test for zero
	jr	z,2$			; found empty entry
	ei				; allow ints while looping
	ld	a,l
	add	#3
	and	#sched_len - 1
	ld	l,a
	djnz	1$
	rst	0x38			; no room

; install entry in table
2$:	dec	l
	ld	(hl),e
	inc	l
	ld	(hl),d
	inc	l
	pop	de
	ld	(hl),e
	inc	l
	ei				; enabled after next instruction
	ld	(hl),d
	dec	l			; restore HL for cancel
	dec	l
	dec	l
	pop	bc
	ret

cancel:
; clear entry at HL to cancel scheduling
; must preserve BC register
	inc	hl
	ld	(hl),#0			; only need to clr page
	ret

sched_int:
; the sched interrupt handler
; entered every 25 msec from "rtc_int"
; check table to see if a routine is scheduled for this time through
	ld	hl,#sched_pscale	; prescale callout to 100 msec
	dec	(hl)
	ret	nz
	ld	(hl),#SCHED_PSCALE
	ld	hl,(sched_save)
	ld	a,#4
	add	a,l
	and	#sched_len-1
	ld	(sched_save),a
	ld	e,(hl)			; location to call
	inc	hl
	ld	a,(hl)
	or	a			; test for page zero
	ret	z			; quit if none
	ld	d,a			; DE = fn
	xor	a			; get a zero
	ld	(hl),a			; and clear out entry
	inc	hl
	ld	c,(hl)			; pointer for IY
	inc	hl
	ld	b,(hl)
	push	bc
	ex	(sp),iy			; save IY
	ex	de,hl
	call	chl			; execute routine
	pop	iy			; restore registers
	ret				; "rtc_int" fixes others
