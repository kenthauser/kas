
gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 14 arg = fp1
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fp1: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a1@
gen_insn: arg mode = 14 arg = fp2
gen_insn: const args = true
validate: info = info [sz: s, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1@: OK
validate: arg = fp2: OK
validate: OK
 0: info [sz: s, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 3 arg = a2@+
gen_insn: arg mode = 14 arg = fp3
gen_insn: const args = true
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@+: OK
validate: arg = fp3: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@+: OK
validate: arg = fp3: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
 0: info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] FP_REG, FP_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = a3@(d0:l)
gen_insn: arg mode = 14 arg = fp4
gen_insn: const args = true
validate: info = info [sz: p, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3@(d0:l): OK
validate: arg = fp4: OK
validate: OK
 0: info [sz: p, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 1 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a4@(d1:l)@(0)
gen_insn: arg mode = 14 arg = fp5
gen_insn: const args = true
validate: info = info [sz: w, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@(d1:l)@(0): OK
validate: arg = fp5: OK
validate: OK
 0: info [sz: w, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 1 : size = [6,6] : result = 2


gen_insn: arg mode = 11 arg = #1
gen_insn: arg mode = 14 arg = fp6
gen_insn: const args = true
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = fp6: OK
validate: OK
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #1: OK
validate: arg = fp6: OK
validate: OK
validate: info = info [sz: d, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
 0: info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [12,12] 
 1: info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] FP_REG, FP_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [12,12] : result = 2


gen_insn: arg mode = 12 arg = [fp_short(index: 1)]
gen_insn: arg mode = 14 arg = fp7
gen_insn: const args = false
validate: info = info [sz: b, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = [fp_short(index: 1)]: OK
validate: arg = fp7: OK
validate: OK
 0: info [sz: b, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [6,8] 
candidates: 1 : 1 : size = [6,8] : result = 2


gen_insn: arg mode = 14 arg = fp1
gen_insn: arg mode = 14 arg = fp2
gen_insn: const args = true
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = fp1: OK
validate: arg = fp2: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = fp1: OK
validate: arg = fp2: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
 0: info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 0]-> [-1,-1] 
 1: info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] FP_REG, FP_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 010 : size = [4,4] : result = 2


gen_insn: arg mode = 14 arg = fp3
gen_insn: const args = true
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 1
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 1
validate: info = info [sz: x, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = fp3: OK
validate: OK
 2: info [sz: x, words: 2, arg_c: 1, tst: fpu_basic] FP_REG [fits: 2]-> [4,4] 
candidates: 1 : 100 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d2
gen_insn: arg mode = 14 arg = fp4
gen_insn: const args = true
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: invalid argument
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: invalid argument
validate: info = info [sz: d, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
gen_insn: error: invalid argument

gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 14 arg = fp2
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = fp2: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a2@
gen_insn: arg mode = 14 arg = fp3
gen_insn: const args = true
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = fp3: OK
validate: OK
validate: info = info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = fp3: OK
validate: OK
validate: info = info [sz: d, words: 2, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
 0: info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: d, words: 2, arg_c: 2, tst: fpu_basic] FP_REG, FP_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 14 arg = fpcr
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fpcr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fpcr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fpcr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fpcr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = fpcr: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FCTRL_REG [fits: 2][fits: 2]-> [4,4] 
 2: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FCTRL_REG, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] ADDR_REG, FPIAR [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FPIAR, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a0@
gen_insn: arg mode = 14 arg = fpsr
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = fpsr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = fpsr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = fpsr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = fpsr: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0@: OK
validate: arg = fpsr: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FCTRL_REG [fits: 2][fits: 2]-> [4,4] 
 2: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FCTRL_REG, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] ADDR_REG, FPIAR [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FPIAR, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a3
gen_insn: arg mode = 14 arg = fpiar
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = fpiar: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = fpiar: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = fpiar: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = fpiar: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = fpiar: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FP_REG [fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] DATA, FCTRL_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FCTRL_REG, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] ADDR_REG, FPIAR [fits: 2][fits: 2]-> [4,4] 
 4: info [sz: l, words: 2, arg_c: 2, tst: fpu_basic] FPIAR, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 01000 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = za0@(d2:l,10:w)
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: fpu_basic] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l,10:w): OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l,10:w): OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: fpu_basic] CONTROL_ALTER [fits: 2]-> [6,6] 
 1: info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] PRE_DECR [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a3@(d0:l)
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a3@(d0:l): OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a3@(d0:l): OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] CONTROL [fits: 2]-> [4,4] 
 1: info [sz: v, words: 1, arg_c: 1, tst: fpu_m68k] POST_INCR [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 15 arg = rs[fp1-fp3/fp5/fp7]
gen_insn: arg mode = 2 arg = a2@
gen_insn: const args = true
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fp1-fp3/fp5/fp7]: OK
validate: arg = a2@: OK
validate: OK
 0: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] FP_REGSET, CONTROL_ALTER [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] FP_REGSET, PRE_DECR [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] CONTROL, FP_REGSET [fits: 0]-> [-1,-1] 
 3: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] POST_INCR, FP_REGSET [fits: 0]-> [-1,-1] 
 4: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] DATA_REG, CONTROL_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] DATA_REG, PRE_DECR [fits: 0]-> [-1,-1] 
 6: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] CONTROL, DATA_REG [fits: 0]-> [-1,-1] 
 7: info [sz: x, words: 2, arg_c: 2, tst: fpu_m68k] POST_INCR, DATA_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 00000001 : size = [4,4] : result = 2


gen_insn: arg mode = 15 arg = rs[fpiar/fpcr]
gen_insn: arg mode = 2 arg = a3@
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = rs[fpiar/fpcr]: OK
validate: arg = a3@: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] FC_REGSET, MEM_ALTER [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] MEM, FC_REGSET [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] FCTRL_REG, DATA_REG [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] DATA_REG, FCTRL_REG [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] FPIAR, ADDR_REG [fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 2, arg_c: 2, tst: fpu_m68k] ADDR_REG, FPIAR [fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2




                                   ;
                                   ; test move instructions
                                   
                                   ; 0. constants used
                                   
0000_0000'                         fp_short:
                                   
0000_0000'  f200 4098                 fabs.l   d0,fp1
0000_0004'  f211 4518                 fabs.s   a1@, fp2
0000_0008'  f21a 4998                 fabs.x   a2@+, fp3
0000_000c'  f233 4e18 0800            fabs.p   a3@(d0),fp4
0000_0012'  f234 5298 1911            fabs.w   a4@(d1)@(0), fp5
0000_0018'  f23c 5718                 fabs.d   #1, fp6
            0000_0000_5555_aaaa    
0000_0024'  f23a 5b98 ffd8            fabs.b   fp_short, fp7
0000_002a'  f200 0518                 fabs.x   fp1, fp2
0000_002e'  f200 0d98                 fabs.x   fp3
                                   
0000_0032'                            fabs.d   d2, fp4
                                   Error: invalid argument
                                   
0000_0032'  f201 4158                 fsabs.l  d1, fp2
0000_0036'  f212 55dc                 fdabs.d  a2@, fp3
                                   
0000_003a'  f200 9000                 fmove.l  d0, fpcr
0000_003e'  f210 8800                 fmove.l  a0@, fpsr
0000_0042'  f20b 8400                 fmove.l  a3, fpiar
                                   
0000_0046'  f330 29a0 000a            fsave    d2@(10)
0000_004c'  f373 0800                 frestore a3@(d0)
                                   
0000_0050'  f212 f075                 fmovem.x fp1-fp3/fp5/fp7, a2@
0000_0054'  f213 b400                 fmovem.l fpiar/fpcr, a3@
                                   
                                   
                                   
                                   
