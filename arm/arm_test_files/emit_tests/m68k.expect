gen_insn: arg mode = 11 arg = #3
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000010 : size = [2,2] : result = 2


gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 0, tst: void] 
validate: info = OK
validate: count with arg_c = 0
validate: args with validate_t::cpu(arg, info)
validate: OK
 0: info [sz: v, words: 1, arg_c: 0, tst: void] -> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: byte operation on address register
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = a1: byte operation on address register
gen_insn: error: byte operation on address register

gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 11 arg = #3
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = #3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = #3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = #3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = #3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: arg = #3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 0 : 0000000000000000000000000 : size = [2,0] : result = 0


gen_insn: arg mode = 0 arg = d2
gen_insn: arg mode = 30 arg = Err: d1

gen_insn: arg mode = 6 arg = za0@(d2:l)
gen_insn: arg mode = 3 arg = a2@+
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = za0@(d2:l)
gen_insn: arg mode = 3 arg = a2@+
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 6 arg = za0@(d2:l)
gen_insn: arg mode = 3 arg = a2@+
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: arg = a2@+: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 30 arg = Err: d3

gen_insn: arg mode = 4 arg = a4@-
gen_insn: arg mode = 5 arg = a1@(123)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@-: OK
validate: arg = a1@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@-: OK
validate: arg = a1@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@-: OK
validate: arg = a1@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@-: OK
validate: arg = a1@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@-: OK
validate: arg = a1@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 6 arg = a2@(a3:l)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a2@(a3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a2@(a3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a2@(a3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a2@(a3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = a2@(a3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d2
gen_insn: arg mode = 6 arg = a2@(a2:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a2@(a2:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a2@(a2:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a2@(a2:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a2@(a2:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d2: OK
validate: arg = a2@(a2:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d3
gen_insn: arg mode = 6 arg = a3@(d3:l:4)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a3@(d3:l:4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a3@(d3:l:4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a3@(d3:l:4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a3@(d3:l:4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a3@(d3:l:4): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d4
gen_insn: arg mode = 6 arg = a4@(d4:l:8)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d4: OK
validate: arg = a4@(d4:l:8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d4: OK
validate: arg = a4@(d4:l:8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d4: OK
validate: arg = a4@(d4:l:8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d4: OK
validate: arg = a4@(d4:l:8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d4: OK
validate: arg = a4@(d4:l:8): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2



gen_insn: arg mode = 0 arg = d6
gen_insn: arg mode = 30 arg = Err: 123

gen_insn: arg mode = 30 arg = Err: za0

gen_insn: arg mode = 30 arg = Err: za0

gen_insn: arg mode = 9 arg = pc@(0)
gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(0): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(0): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(0): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(0): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(0): OK
validate: arg = d0: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 30 arg = Err: zpc

gen_insn: arg mode = 30 arg = Err: 0

gen_insn: arg mode = 9 arg = pc@(10)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(10): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(10): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(10): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(10): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = pc@(10): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 10 arg = zpc@(10:w)
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = zpc@(10:w): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = zpc@(10:w): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = zpc@(10:w): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = zpc@(10:w): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = zpc@(10:w): OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a0
gen_insn: arg mode = 6 arg = a1@(d1:l,123:w)@(234:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = a1@(d1:l,123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = a1@(d1:l,123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = a1@(d1:l,123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = a1@(d1:l,123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a0: OK
validate: arg = a1@(d1:l,123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [8,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [8,8] : result = 2


gen_insn: arg mode = 1 arg = a1
gen_insn: arg mode = 6 arg = a2@(d1:l)@(321:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = a2@(d1:l)@(321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = a2@(d1:l)@(321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = a2@(d1:l)@(321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = a2@(d1:l)@(321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: arg = a2@(d1:l)@(321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a7
gen_insn: arg mode = 6 arg = a2@(d1:l)@(0)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(d1:l)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(d1:l)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(d1:l)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(d1:l)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(d1:l)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2




gen_insn: arg mode = 1 arg = a6
gen_insn: arg mode = 6 arg = a2@(0)@(d1:l)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = a2@(0)@(d1:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = a2@(0)@(d1:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = a2@(0)@(d1:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = a2@(0)@(d1:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a6: OK
validate: arg = a2@(0)@(d1:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a2
gen_insn: arg mode = 6 arg = a3@(123:w)@(234:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2: OK
validate: arg = a3@(123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2: OK
validate: arg = a3@(123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2: OK
validate: arg = a3@(123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2: OK
validate: arg = a3@(123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2: OK
validate: arg = a3@(123:w)@(234:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [8,8] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [8,8] : result = 2


gen_insn: arg mode = 1 arg = a3
gen_insn: arg mode = 6 arg = a4@(123:w)@(d3:l)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4@(123:w)@(d3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4@(123:w)@(d3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4@(123:w)@(d3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4@(123:w)@(d3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4@(123:w)@(d3:l): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a4
gen_insn: arg mode = 6 arg = a5@(0)@(d4:l,321:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4: OK
validate: arg = a5@(0)@(d4:l,321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4: OK
validate: arg = a5@(0)@(d4:l,321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4: OK
validate: arg = a5@(0)@(d4:l,321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4: OK
validate: arg = a5@(0)@(d4:l,321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a4: OK
validate: arg = a5@(0)@(d4:l,321:w): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2


gen_insn: arg mode = 1 arg = a2
gen_insn: arg mode = 30 arg = Err: d2

gen_insn: arg mode = 1 arg = a7
gen_insn: arg mode = 6 arg = a2@(0)@(0)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(0)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(0)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(0)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(0)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a7: OK
validate: arg = a2@(0)@(0): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a7
gen_insn: arg mode = 30 arg = Err: 3

gen_insn: arg mode = 1 arg = a7
gen_insn: arg mode = 30 arg = Err: d0

gen_insn: arg mode = 0 arg = d1
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: arg = d2: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 1: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, ADDR_REG [fits: 0]-> [-1,-1] 
 2: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, DATA_REG [fits: 0]-> [-1,-1] 
 3: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 0001 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a3
gen_insn: arg mode = 1 arg = a4
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a3: OK
validate: arg = a4: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, ADDR_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0010 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a5
gen_insn: arg mode = 0 arg = d6
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a5: OK
validate: arg = d6: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a5: OK
validate: arg = d6: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a5: OK
validate: arg = d6: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a5: OK
validate: arg = d6: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0100 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d7
gen_insn: arg mode = 1 arg = a0
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d7: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d7: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d7: OK
validate: arg = a0: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d7: OK
validate: arg = a0: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, ADDR_REG [fits: 0]-> [-1,-1] 
 2: info [sz: v, words: 1, arg_c: 2, tst: m68k] ADDR_REG, DATA_REG [fits: 0]-> [-1,-1] 
 3: info [sz: v, words: 1, arg_c: 2, tst: m68k] DATA_REG, ADDR_REG [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 1000 : size = [2,2] : result = 2


gen_insn: arg mode = 0 arg = d3
gen_insn: arg mode = 5 arg = a4@(123)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: movep] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a4@(123): OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: movep] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = d3: OK
validate: arg = a4@(123): OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: movep] DATA_REG, MOVEP [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: l, words: 1, arg_c: 2, tst: movep] MOVEP, DATA_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a2@
gen_insn: arg mode = 0 arg = d6
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: movep] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d6: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: movep] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d6: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: movep] DATA_REG, MOVEP [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: movep] MOVEP, DATA_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 10 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 0 arg = d4
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = d4: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 100000 : size = [2,2] : result = 2


gen_insn: arg mode = 2 arg = a2@
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 1: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: w, words: 1, arg_c: 2, tst: m68k] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: m68k] Q_MATH, ALTERABLE [fits: 0]-> [-1,-1] 
candidates: 1 : 00010 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 2, tst: void] IMMED, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 1, arg_c: 2, tst: m68k] IMMED, MEM_ALTER [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] DATA_REG, MEM_ALTER [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ADDR_REG [fits: 2][fits: 2]-> [6,6] 
 5: info [sz: l, words: 1, arg_c: 2, tst: void] Q_MATH, ALTERABLE [fits: 2][fits: 2]-> [2,2] 
candidates: 1 : 100000 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #4
gen_insn: arg mode = 1 arg = a2
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: m68k] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #4: OK
validate: arg = a2: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: m68k] GEN, ADDR_REG [fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 2 arg = a2@
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 1, arg_c: 1, tst: m68k] MEM_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 10 : size = [2,2] : result = 2


gen_insn: arg mode = 6 arg = za0@(d2:l)
gen_insn: const args = true
validate: info = info [sz: v, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: OK
validate: info = info [sz: v, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l): OK
validate: OK
 0: info [sz: v, words: 1, arg_c: 1, tst: void] DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 1, arg_c: 1, tst: m68k] MEM_ALTER [fits: 2]-> [4,4] 
candidates: 1 : 10 : size = [4,4] : result = 2


gen_insn: arg mode = 0 arg = d0
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d0: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 6 arg = za0@(d2:l,10:w)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = za0@(d2:l,10:w): OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [6,6] 
candidates: 1 : 1 : size = [6,6] : result = 2



gen_insn: arg mode = 0 arg = d0
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 2
gen_insn: error: invalid arguments

gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 1, tst: m68k] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = d1: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 1, tst: m68k] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 1 arg = a1
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a1: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 0 : 0 : size = [2,0] : result = 0


gen_insn: arg mode = 3 arg = a2@+
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@+: OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [2,2] 
candidates: 1 : 1 : size = [2,2] : result = 2


gen_insn: arg mode = 6 arg = a3@(d0:l)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a3@(d0:l): OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 5 arg = a4@(10)
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 1, tst: void] 
validate: info = OK
validate: count with arg_c = 1
validate: args with validate_t::cpu(arg, info)
validate: arg = a4@(10): OK
validate: OK
 0: info [sz: l, words: 1, arg_c: 1, tst: void] DATA_ALTER [fits: 2]-> [4,4] 
candidates: 1 : 1 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #3
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000010 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #3
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


gen_insn: arg mode = 11 arg = #3
gen_insn: arg mode = 0 arg = d2
gen_insn: const args = true
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #3: OK
validate: arg = d2: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2



gen_insn: arg mode = 11 arg = #cx[1](0)
gen_insn: arg mode = 0 arg = d4
gen_insn: const args = true
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[1](0): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[1](0): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[1](0): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[1](0): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[1](0): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 2][fits: 2]-> [2,2] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 2][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000010 : size = [2,2] : result = 2


gen_insn: arg mode = 11 arg = #cx[2](0+ca([dot])-ca(.text+a2))
gen_insn: arg mode = 0 arg = d4
gen_insn: const args = false
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: read_ccr] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: w, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[2](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [2,2] 
 2: info [sz: w, words: 1, arg_c: 2, tst: void] SR, DATA_ALTER [fits: 0]-> [-1,-1] 
 3: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, SR [fits: 2][fits: 0]-> [-1,-1] 
 4: info [sz: w, words: 1, arg_c: 2, tst: read_ccr] CCR, DATA_ALTER [fits: 0]-> [-1,-1] 
 5: info [sz: w, words: 1, arg_c: 2, tst: void] DATA, CCR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 2 : 000011 : size = [2,4] : result = 2


gen_insn: arg mode = 11 arg = #cx[3](0+ca([dot])-ca(.text+a2))
gen_insn: arg mode = 0 arg = d4
gen_insn: const args = false
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[3](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: b, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[3](0+ca([dot])-ca(.text+a2)): OK
validate: arg = d4: OK
validate: OK
 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [2,2] 
candidates: 2 : 11 : size = [2,4] : result = 2



gen_insn: arg mode = 11 arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c))
gen_insn: arg mode = 0 arg = d3
gen_insn: const args = false
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c)): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c)): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c)): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c)): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: void] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = #cx[4](0+[ident 2:m_last]-ca(.text+8c)): OK
validate: arg = d3: OK
validate: OK
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: coldfire] 
validate: info = coldfire
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: mac] 
validate: info = mac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
validate: info = info [sz: l, words: 1, arg_c: 2, tst: emac] 
validate: info = emac
 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 1][fits: 2]-> [2,2] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 1][fits: 2]-> [2,2] 
 3: info [sz: l, words: 1, arg_c: 2, tst: void] ADDR_REG, USP [fits: 0]-> [-1,-1] 
 4: info [sz: l, words: 1, arg_c: 2, tst: void] USP, ADDR_REG [fits: 0]-> [-1,-1] 
candidates: 3 : 0000000000000000000000111 : size = [2,6] : result = 2



gen_insn: arg mode = 6 arg = a2@(d0:l)
gen_insn: arg mode = 0 arg = d1
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, DATA_REG [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 0]-> [-1,-1] 
candidates: 1 : 001 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a2@(d0:l)
gen_insn: arg mode = 16 arg = d1:d1
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1:d1: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1:d1: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d1:d1: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 010 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a2@(d0:l)
gen_insn: arg mode = 16 arg = d3:d4
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d3:d4: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d3:d4: OK
validate: OK
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d0:l): OK
validate: arg = d3:d4: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, DATA_REG [fits: 2][fits: 0]-> [-1,-1] 
 1: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
 2: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 010 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a2@(d1:l)
gen_insn: arg mode = 16 arg = d5:d5
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d1:l): OK
validate: arg = d5:d5: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 1 : size = [6,6] : result = 2


gen_insn: arg mode = 6 arg = a2@(d1:l)
gen_insn: arg mode = 16 arg = d5:d6
gen_insn: const args = true
validate: info = info [sz: l, words: 2, arg_c: 2, tst: mult64] 
validate: info = OK
validate: count with arg_c = 2
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@(d1:l): OK
validate: arg = d5:d6: OK
validate: OK
 0: info [sz: l, words: 2, arg_c: 2, tst: mult64] DATA, PAIR [fits: 2][fits: 2]-> [6,6] 
candidates: 1 : 1 : size = [6,6] : result = 2


gen_insn: arg mode = 2 arg = a2@
gen_insn: arg mode = 17 arg = {3,d2}
gen_insn: arg mode = 0 arg = d4
gen_insn: const args = true
validate: info = info [sz: v, words: 2, arg_c: 3, tst: m68020] 
validate: info = OK
validate: count with arg_c = 3
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = {3,d2}: OK
validate: arg = d4: OK
validate: OK
validate: info = info [sz: v, words: 2, arg_c: 3, tst: m68020] 
validate: info = OK
validate: count with arg_c = 3
validate: args with validate_t::cpu(arg, info)
validate: arg = a2@: OK
validate: arg = {3,d2}: OK
validate: arg = d4: OK
validate: OK
 0: info [sz: v, words: 2, arg_c: 3, tst: m68020] DATA_REG, BITFIELD, DATA_REG [fits: 0]-> [-1,-1] 
 1: info [sz: v, words: 2, arg_c: 3, tst: m68020] CONTROL, BITFIELD, DATA_REG [fits: 2][fits: 2][fits: 2]-> [4,4] 
candidates: 1 : 10 : size = [4,4] : result = 2


gen_insn: arg mode = 1 arg = a1.l
gen_insn: arg mode = 30 arg = Err: d2




 0: info [sz: w, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: w, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 000001 : size = [4,4] : result = 2


 0: info [sz: b, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [4,4] 
 1: info [sz: b, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 01 : size = [4,4] : result = 2


 0: info [sz: l, words: 1, arg_c: 2, tst: void] GEN, ALTERABLE [fits: 2][fits: 2]-> [6,6] 
 1: info [sz: l, words: 1, arg_c: 2, tst: void] Q_IMMED, DATA_REG [fits: 0]-> [-1,-1] 
 2: info [sz: l, words: 1, arg_c: 2, tst: void] Z_IMMED, DATA_ALTER [fits: 0]-> [-1,-1] 
candidates: 1 : 0000000000000000000000001 : size = [6,6] : result = 2

0000_0058'  7403                       move.l  #3,d2
0000_0002'  4e71                       nop
0000_0004'  2240                       move.l  d0, a1
0000_0006'  3240                       move.w  d0, a1
0000_0008'                             move.b  d0, a1
                                   Error: byte operation on address register
0000_0008'                             move.l  d0, #3
                                   Error: invalid arguments
0000_0008'                             move.l  d2, #d1
                                   Error: invalid immediate
0000_0008'  24f0 2990                  move.l  d2@, a2@+
0000_000c'  34f0 2990                  move.w  d2@, a2@+
0000_0010'  14f0 2990                  move.b  d2@, a2@+
0000_0014'                             move.l  d3@-, a4@
                                   Error: addr reg required
0000_0014'  2364 007b                  move.l  a4@-,a1@(123)
0000_0018'  2581 b800                  move.l  d1, a2@(a3)
0000_001c'  2582 a000                  move.l  d2, a2@(a2:w)
0000_0020'  2783 3c00                  move.l  d3, a3@(d3:4)
0000_0024'  2984 4e00                  move.l  d4, a4@(d4:l:8)
0000_0028'                             move.l  d5, a6@(d5:8:l)
                                       ~~~~~~~~~~~~~~~~~~~~ <<-- Here
dummy_path:17:Error: Expecting: ')'
0000_0028'                             move.l  d6, a6@(d4, 123:4)
                                   Error: index_scale
0000_0028'                             move.l  za0, d0
                                   Error: invalid direct
0000_0028'                             move.l  za0@, d2
                                   Error: invalid indirect
0000_0028'  203a 0000                  move.l  pc@, d0
0000_002c'                             move.l  zpc@, d1
                                   Error: invalid indirect
0000_002c'                             move.l  zpc@(0), d2
                                   Error: invalid addr_mode
0000_002c'  223a 000a                  move.l  pc@(10), d1
0000_0030'  243b 09e0 000a             move.l  zpc@(10), d2
0000_0036'  2388 1922 007b 00ea        move.l  a0, a1@(123, d1)@(234)
0000_003e'  2589 1912 0141             move.l  a1, a2@(d1)@(321)
0000_0044'  258f 1911                  move.l  a7, a2@(d1)@(0)
0000_0048'                             move.l  a5, a2@()
                                       ~~~~~~~~~~~~~~~~ <<-- Here
dummy_path:29:Error: Expecting: N5boost6spirit2x34listINS1_4ruleIN3kas4m68k6parser8_mit_s_sENS6_15expr_size_scaleELb0EEENS1_12literal_charINS0_13char_encoding8standardENS1_11unused_typeEEEEE
0000_0048'                             move.l  a6, a2@(d1)@()
                                       ~~~~~~~~~~~~~~~~~~~~~ <<-- Here
dummy_path:30:Error: Expecting: N5boost6spirit2x34listINS1_4ruleIN3kas4m68k6parser8_mit_s_sENS6_15expr_size_scaleELb0EEENS1_12literal_charINS0_13char_encoding8standardENS1_11unused_typeEEEEE
0000_0048'  258e 1915                  move.l  a6, a2@(0)@(d1)
0000_004c'  278a 0962 007b 00ea        move.l  a2, a3@(123)@(234)
0000_0054'  298b 3925 007b             move.l  a3, a4@(123)@(d3)
0000_005a'  2b8c 4916 0141             move.l  a4, a5@(0)@(321,d4)
0000_0060'                             move.l  a2, a2@(d1)@(d2)
                                   Error: invalid indirect
0000_0060'  258f 0951                  move.l  a7, a2@(0)@(0)
0000_0064'                             move.l  a7, a2@(1)@(2)@(3)
                                   Error: invalid indirect
0000_0064'                             move.l  a7, a2@(0)@(0)@(d0)
                                   Error: invalid indirect
                                   ;
0000_0064'  c342                       exg d1, d2
0000_0066'  c74c                       exg a3, a4
0000_0068'  cb8e                       exg a5, d6
0000_006a'  c18f                       exg d7, a0
                                   ;
0000_006c'  07cc 007b                  movep.l d3,a4@(123)
0000_0070'  0d0a 0000                  movep.w a2@,d6
0000_0074'  5884                       add.l   #4, d4
0000_0076'  d252                       add.w   a2@, d1
0000_0078'  588a                       add.l   #4, a2
0000_007a'  d4fc 0004                  adda.w  #4, a2
                                   
0000_007e'  50d2                       st  a2@
0000_0080'  56f0 2990                  sne d2@
                                   
0000_0084'  4480                       neg.l   d0
0000_0086'  46b0 29a0 000a             not.l   d2@(10)
                                       ;
0000_008c'                         m_first:
0000_008c'                             neg.l   d0, d1
                                   Error: invalid arguments
0000_008c'  4441                       neg.w   d1
0000_008e'                             neg.l   a1
                                   Error: invalid arguments
0000_008e'  449a                       neg.l   a2@+
0000_0090'  44b3 0800                  neg.l   a3@(d0)
0000_0094'  44ac 000a                  neg.l   a4@(10)
                                   
0000_0098'  7403                       move.l  #3,d2
0000_009a'  343c 0003                  move.w  #3,d2
0000_009e'  143c 00 03                 move.b  #3,d2
0000_00a2'                         m_second:
0000_00a2'  7800                       move.l  #.-m_second, d4
0000_00a4'  383c 0002                  move.w  #.-m_second, d4
0000_00a8'  183c 00 06                 move.b  #.-m_second, d4
0000_00ac'  0000 0000 0000 0000        .skip   8
0000_00b4'  263c 0000_0000*            move.l  #m_last-m_first, d3
0000_00ba'                         m_third:
0000_00ba'  4c72 1801 0800             divs.l  a2@(d0),d1
0000_00c0'  4c72 1c01 0800             divs.l  a2@(d0),d1:d1
0000_00c6'  4c72 4c03 0800             divs.l  a2@(d0),d3:d4
0000_00cc'  4c72 5805 1800             divsl.l a2@(d1),d5:d5
0000_00d2'  4c72 6805 1800             divsl.l a2@(d1),d5:d6
0000_00d8'  edd2 40e2                  bfffo   a2@{#3, d2}, d4
                                   
0000_00dc'                             move.l  a1.l, d2.w
                                   Error: invalid direct
                                       
